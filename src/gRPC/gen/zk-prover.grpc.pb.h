// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: zk-prover.proto
#ifndef GRPC_zk_2dprover_2eproto__INCLUDED
#define GRPC_zk_2dprover_2eproto__INCLUDED

#include "zk-prover.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace zkprover {

class ZKProver final {
 public:
  static constexpr char const* service_full_name() {
    return "zkprover.ZKProver";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetStatus(::grpc::ClientContext* context, const ::zkprover::NoParams& request, ::zkprover::State* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zkprover::State>> AsyncGetStatus(::grpc::ClientContext* context, const ::zkprover::NoParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zkprover::State>>(AsyncGetStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zkprover::State>> PrepareAsyncGetStatus(::grpc::ClientContext* context, const ::zkprover::NoParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zkprover::State>>(PrepareAsyncGetStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::zkprover::InputProver, ::zkprover::Proof>> GenProof(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::zkprover::InputProver, ::zkprover::Proof>>(GenProofRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::zkprover::InputProver, ::zkprover::Proof>> AsyncGenProof(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::zkprover::InputProver, ::zkprover::Proof>>(AsyncGenProofRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::zkprover::InputProver, ::zkprover::Proof>> PrepareAsyncGenProof(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::zkprover::InputProver, ::zkprover::Proof>>(PrepareAsyncGenProofRaw(context, cq));
    }
    virtual ::grpc::Status Cancel(::grpc::ClientContext* context, const ::zkprover::NoParams& request, ::zkprover::State* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zkprover::State>> AsyncCancel(::grpc::ClientContext* context, const ::zkprover::NoParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zkprover::State>>(AsyncCancelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zkprover::State>> PrepareAsyncCancel(::grpc::ClientContext* context, const ::zkprover::NoParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zkprover::State>>(PrepareAsyncCancelRaw(context, request, cq));
    }
    virtual ::grpc::Status GetProof(::grpc::ClientContext* context, const ::zkprover::NoParams& request, ::zkprover::Proof* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zkprover::Proof>> AsyncGetProof(::grpc::ClientContext* context, const ::zkprover::NoParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zkprover::Proof>>(AsyncGetProofRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zkprover::Proof>> PrepareAsyncGetProof(::grpc::ClientContext* context, const ::zkprover::NoParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zkprover::Proof>>(PrepareAsyncGetProofRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetStatus(::grpc::ClientContext* context, const ::zkprover::NoParams* request, ::zkprover::State* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetStatus(::grpc::ClientContext* context, const ::zkprover::NoParams* request, ::zkprover::State* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GenProof(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::zkprover::InputProver,::zkprover::Proof>* reactor) = 0;
      virtual void Cancel(::grpc::ClientContext* context, const ::zkprover::NoParams* request, ::zkprover::State* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Cancel(::grpc::ClientContext* context, const ::zkprover::NoParams* request, ::zkprover::State* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetProof(::grpc::ClientContext* context, const ::zkprover::NoParams* request, ::zkprover::Proof* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetProof(::grpc::ClientContext* context, const ::zkprover::NoParams* request, ::zkprover::Proof* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zkprover::State>* AsyncGetStatusRaw(::grpc::ClientContext* context, const ::zkprover::NoParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zkprover::State>* PrepareAsyncGetStatusRaw(::grpc::ClientContext* context, const ::zkprover::NoParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::zkprover::InputProver, ::zkprover::Proof>* GenProofRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::zkprover::InputProver, ::zkprover::Proof>* AsyncGenProofRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::zkprover::InputProver, ::zkprover::Proof>* PrepareAsyncGenProofRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zkprover::State>* AsyncCancelRaw(::grpc::ClientContext* context, const ::zkprover::NoParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zkprover::State>* PrepareAsyncCancelRaw(::grpc::ClientContext* context, const ::zkprover::NoParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zkprover::Proof>* AsyncGetProofRaw(::grpc::ClientContext* context, const ::zkprover::NoParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zkprover::Proof>* PrepareAsyncGetProofRaw(::grpc::ClientContext* context, const ::zkprover::NoParams& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetStatus(::grpc::ClientContext* context, const ::zkprover::NoParams& request, ::zkprover::State* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zkprover::State>> AsyncGetStatus(::grpc::ClientContext* context, const ::zkprover::NoParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zkprover::State>>(AsyncGetStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zkprover::State>> PrepareAsyncGetStatus(::grpc::ClientContext* context, const ::zkprover::NoParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zkprover::State>>(PrepareAsyncGetStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::zkprover::InputProver, ::zkprover::Proof>> GenProof(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::zkprover::InputProver, ::zkprover::Proof>>(GenProofRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::zkprover::InputProver, ::zkprover::Proof>> AsyncGenProof(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::zkprover::InputProver, ::zkprover::Proof>>(AsyncGenProofRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::zkprover::InputProver, ::zkprover::Proof>> PrepareAsyncGenProof(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::zkprover::InputProver, ::zkprover::Proof>>(PrepareAsyncGenProofRaw(context, cq));
    }
    ::grpc::Status Cancel(::grpc::ClientContext* context, const ::zkprover::NoParams& request, ::zkprover::State* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zkprover::State>> AsyncCancel(::grpc::ClientContext* context, const ::zkprover::NoParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zkprover::State>>(AsyncCancelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zkprover::State>> PrepareAsyncCancel(::grpc::ClientContext* context, const ::zkprover::NoParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zkprover::State>>(PrepareAsyncCancelRaw(context, request, cq));
    }
    ::grpc::Status GetProof(::grpc::ClientContext* context, const ::zkprover::NoParams& request, ::zkprover::Proof* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zkprover::Proof>> AsyncGetProof(::grpc::ClientContext* context, const ::zkprover::NoParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zkprover::Proof>>(AsyncGetProofRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zkprover::Proof>> PrepareAsyncGetProof(::grpc::ClientContext* context, const ::zkprover::NoParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zkprover::Proof>>(PrepareAsyncGetProofRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetStatus(::grpc::ClientContext* context, const ::zkprover::NoParams* request, ::zkprover::State* response, std::function<void(::grpc::Status)>) override;
      void GetStatus(::grpc::ClientContext* context, const ::zkprover::NoParams* request, ::zkprover::State* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GenProof(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::zkprover::InputProver,::zkprover::Proof>* reactor) override;
      void Cancel(::grpc::ClientContext* context, const ::zkprover::NoParams* request, ::zkprover::State* response, std::function<void(::grpc::Status)>) override;
      void Cancel(::grpc::ClientContext* context, const ::zkprover::NoParams* request, ::zkprover::State* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetProof(::grpc::ClientContext* context, const ::zkprover::NoParams* request, ::zkprover::Proof* response, std::function<void(::grpc::Status)>) override;
      void GetProof(::grpc::ClientContext* context, const ::zkprover::NoParams* request, ::zkprover::Proof* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::zkprover::State>* AsyncGetStatusRaw(::grpc::ClientContext* context, const ::zkprover::NoParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zkprover::State>* PrepareAsyncGetStatusRaw(::grpc::ClientContext* context, const ::zkprover::NoParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::zkprover::InputProver, ::zkprover::Proof>* GenProofRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::zkprover::InputProver, ::zkprover::Proof>* AsyncGenProofRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::zkprover::InputProver, ::zkprover::Proof>* PrepareAsyncGenProofRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zkprover::State>* AsyncCancelRaw(::grpc::ClientContext* context, const ::zkprover::NoParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zkprover::State>* PrepareAsyncCancelRaw(::grpc::ClientContext* context, const ::zkprover::NoParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zkprover::Proof>* AsyncGetProofRaw(::grpc::ClientContext* context, const ::zkprover::NoParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zkprover::Proof>* PrepareAsyncGetProofRaw(::grpc::ClientContext* context, const ::zkprover::NoParams& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_GenProof_;
    const ::grpc::internal::RpcMethod rpcmethod_Cancel_;
    const ::grpc::internal::RpcMethod rpcmethod_GetProof_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetStatus(::grpc::ServerContext* context, const ::zkprover::NoParams* request, ::zkprover::State* response);
    virtual ::grpc::Status GenProof(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::zkprover::Proof, ::zkprover::InputProver>* stream);
    virtual ::grpc::Status Cancel(::grpc::ServerContext* context, const ::zkprover::NoParams* request, ::zkprover::State* response);
    virtual ::grpc::Status GetProof(::grpc::ServerContext* context, const ::zkprover::NoParams* request, ::zkprover::Proof* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetStatus() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* /*context*/, const ::zkprover::NoParams* /*request*/, ::zkprover::State* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStatus(::grpc::ServerContext* context, ::zkprover::NoParams* request, ::grpc::ServerAsyncResponseWriter< ::zkprover::State>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GenProof : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GenProof() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GenProof() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenProof(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::zkprover::Proof, ::zkprover::InputProver>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGenProof(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::zkprover::Proof, ::zkprover::InputProver>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Cancel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Cancel() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Cancel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Cancel(::grpc::ServerContext* /*context*/, const ::zkprover::NoParams* /*request*/, ::zkprover::State* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCancel(::grpc::ServerContext* context, ::zkprover::NoParams* request, ::grpc::ServerAsyncResponseWriter< ::zkprover::State>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetProof : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetProof() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetProof() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProof(::grpc::ServerContext* /*context*/, const ::zkprover::NoParams* /*request*/, ::zkprover::Proof* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetProof(::grpc::ServerContext* context, ::zkprover::NoParams* request, ::grpc::ServerAsyncResponseWriter< ::zkprover::Proof>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetStatus<WithAsyncMethod_GenProof<WithAsyncMethod_Cancel<WithAsyncMethod_GetProof<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetStatus() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::zkprover::NoParams, ::zkprover::State>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zkprover::NoParams* request, ::zkprover::State* response) { return this->GetStatus(context, request, response); }));}
    void SetMessageAllocatorFor_GetStatus(
        ::grpc::MessageAllocator< ::zkprover::NoParams, ::zkprover::State>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zkprover::NoParams, ::zkprover::State>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* /*context*/, const ::zkprover::NoParams* /*request*/, ::zkprover::State* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::zkprover::NoParams* /*request*/, ::zkprover::State* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GenProof : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GenProof() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackBidiHandler< ::zkprover::InputProver, ::zkprover::Proof>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->GenProof(context); }));
    }
    ~WithCallbackMethod_GenProof() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenProof(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::zkprover::Proof, ::zkprover::InputProver>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::zkprover::InputProver, ::zkprover::Proof>* GenProof(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Cancel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Cancel() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::zkprover::NoParams, ::zkprover::State>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zkprover::NoParams* request, ::zkprover::State* response) { return this->Cancel(context, request, response); }));}
    void SetMessageAllocatorFor_Cancel(
        ::grpc::MessageAllocator< ::zkprover::NoParams, ::zkprover::State>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zkprover::NoParams, ::zkprover::State>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Cancel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Cancel(::grpc::ServerContext* /*context*/, const ::zkprover::NoParams* /*request*/, ::zkprover::State* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Cancel(
      ::grpc::CallbackServerContext* /*context*/, const ::zkprover::NoParams* /*request*/, ::zkprover::State* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetProof : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetProof() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::zkprover::NoParams, ::zkprover::Proof>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zkprover::NoParams* request, ::zkprover::Proof* response) { return this->GetProof(context, request, response); }));}
    void SetMessageAllocatorFor_GetProof(
        ::grpc::MessageAllocator< ::zkprover::NoParams, ::zkprover::Proof>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zkprover::NoParams, ::zkprover::Proof>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetProof() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProof(::grpc::ServerContext* /*context*/, const ::zkprover::NoParams* /*request*/, ::zkprover::Proof* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetProof(
      ::grpc::CallbackServerContext* /*context*/, const ::zkprover::NoParams* /*request*/, ::zkprover::Proof* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetStatus<WithCallbackMethod_GenProof<WithCallbackMethod_Cancel<WithCallbackMethod_GetProof<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetStatus() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* /*context*/, const ::zkprover::NoParams* /*request*/, ::zkprover::State* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GenProof : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GenProof() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GenProof() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenProof(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::zkprover::Proof, ::zkprover::InputProver>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Cancel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Cancel() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Cancel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Cancel(::grpc::ServerContext* /*context*/, const ::zkprover::NoParams* /*request*/, ::zkprover::State* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetProof : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetProof() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetProof() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProof(::grpc::ServerContext* /*context*/, const ::zkprover::NoParams* /*request*/, ::zkprover::Proof* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetStatus() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* /*context*/, const ::zkprover::NoParams* /*request*/, ::zkprover::State* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GenProof : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GenProof() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GenProof() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenProof(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::zkprover::Proof, ::zkprover::InputProver>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGenProof(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Cancel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Cancel() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Cancel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Cancel(::grpc::ServerContext* /*context*/, const ::zkprover::NoParams* /*request*/, ::zkprover::State* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCancel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetProof : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetProof() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetProof() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProof(::grpc::ServerContext* /*context*/, const ::zkprover::NoParams* /*request*/, ::zkprover::Proof* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetProof(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetStatus() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetStatus(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* /*context*/, const ::zkprover::NoParams* /*request*/, ::zkprover::State* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GenProof : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GenProof() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->GenProof(context); }));
    }
    ~WithRawCallbackMethod_GenProof() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenProof(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::zkprover::Proof, ::zkprover::InputProver>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* GenProof(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Cancel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Cancel() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Cancel(context, request, response); }));
    }
    ~WithRawCallbackMethod_Cancel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Cancel(::grpc::ServerContext* /*context*/, const ::zkprover::NoParams* /*request*/, ::zkprover::State* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Cancel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetProof : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetProof() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetProof(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetProof() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProof(::grpc::ServerContext* /*context*/, const ::zkprover::NoParams* /*request*/, ::zkprover::Proof* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetProof(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetStatus() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zkprover::NoParams, ::zkprover::State>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zkprover::NoParams, ::zkprover::State>* streamer) {
                       return this->StreamedGetStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* /*context*/, const ::zkprover::NoParams* /*request*/, ::zkprover::State* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zkprover::NoParams,::zkprover::State>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Cancel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Cancel() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zkprover::NoParams, ::zkprover::State>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zkprover::NoParams, ::zkprover::State>* streamer) {
                       return this->StreamedCancel(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Cancel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Cancel(::grpc::ServerContext* /*context*/, const ::zkprover::NoParams* /*request*/, ::zkprover::State* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCancel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zkprover::NoParams,::zkprover::State>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetProof : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetProof() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zkprover::NoParams, ::zkprover::Proof>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zkprover::NoParams, ::zkprover::Proof>* streamer) {
                       return this->StreamedGetProof(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetProof() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetProof(::grpc::ServerContext* /*context*/, const ::zkprover::NoParams* /*request*/, ::zkprover::Proof* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetProof(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zkprover::NoParams,::zkprover::Proof>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetStatus<WithStreamedUnaryMethod_Cancel<WithStreamedUnaryMethod_GetProof<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetStatus<WithStreamedUnaryMethod_Cancel<WithStreamedUnaryMethod_GetProof<Service > > > StreamedService;
};

}  // namespace zkprover


#endif  // GRPC_zk_2dprover_2eproto__INCLUDED
