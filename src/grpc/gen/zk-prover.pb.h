// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zk-prover.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_zk_2dprover_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_zk_2dprover_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_zk_2dprover_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_zk_2dprover_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[17]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_zk_2dprover_2eproto;
namespace zkprover {
class InputProver;
class InputProverDefaultTypeInternal;
extern InputProverDefaultTypeInternal _InputProver_default_instance_;
class InputProverExecute;
class InputProverExecuteDefaultTypeInternal;
extern InputProverExecuteDefaultTypeInternal _InputProverExecute_default_instance_;
class InputProver_DbEntry_DoNotUse;
class InputProver_DbEntry_DoNotUseDefaultTypeInternal;
extern InputProver_DbEntry_DoNotUseDefaultTypeInternal _InputProver_DbEntry_DoNotUse_default_instance_;
class NoParams;
class NoParamsDefaultTypeInternal;
extern NoParamsDefaultTypeInternal _NoParams_default_instance_;
class Proof;
class ProofDefaultTypeInternal;
extern ProofDefaultTypeInternal _Proof_default_instance_;
class ProofB;
class ProofBDefaultTypeInternal;
extern ProofBDefaultTypeInternal _ProofB_default_instance_;
class PublicInputs;
class PublicInputsDefaultTypeInternal;
extern PublicInputsDefaultTypeInternal _PublicInputs_default_instance_;
class PublicInputsExtended;
class PublicInputsExtendedDefaultTypeInternal;
extern PublicInputsExtendedDefaultTypeInternal _PublicInputsExtended_default_instance_;
class RequestId;
class RequestIdDefaultTypeInternal;
extern RequestIdDefaultTypeInternal _RequestId_default_instance_;
class ResCancel;
class ResCancelDefaultTypeInternal;
extern ResCancelDefaultTypeInternal _ResCancel_default_instance_;
class ResExecute;
class ResExecuteDefaultTypeInternal;
extern ResExecuteDefaultTypeInternal _ResExecute_default_instance_;
class ResExecute_DiffKeysValuesEntry_DoNotUse;
class ResExecute_DiffKeysValuesEntry_DoNotUseDefaultTypeInternal;
extern ResExecute_DiffKeysValuesEntry_DoNotUseDefaultTypeInternal _ResExecute_DiffKeysValuesEntry_DoNotUse_default_instance_;
class ResGenProof;
class ResGenProofDefaultTypeInternal;
extern ResGenProofDefaultTypeInternal _ResGenProof_default_instance_;
class ResGetProof;
class ResGetProofDefaultTypeInternal;
extern ResGetProofDefaultTypeInternal _ResGetProof_default_instance_;
class ResGetStatus;
class ResGetStatusDefaultTypeInternal;
extern ResGetStatusDefaultTypeInternal _ResGetStatus_default_instance_;
class Version;
class VersionDefaultTypeInternal;
extern VersionDefaultTypeInternal _Version_default_instance_;
class ZkCounters;
class ZkCountersDefaultTypeInternal;
extern ZkCountersDefaultTypeInternal _ZkCounters_default_instance_;
}  // namespace zkprover
PROTOBUF_NAMESPACE_OPEN
template<> ::zkprover::InputProver* Arena::CreateMaybeMessage<::zkprover::InputProver>(Arena*);
template<> ::zkprover::InputProverExecute* Arena::CreateMaybeMessage<::zkprover::InputProverExecute>(Arena*);
template<> ::zkprover::InputProver_DbEntry_DoNotUse* Arena::CreateMaybeMessage<::zkprover::InputProver_DbEntry_DoNotUse>(Arena*);
template<> ::zkprover::NoParams* Arena::CreateMaybeMessage<::zkprover::NoParams>(Arena*);
template<> ::zkprover::Proof* Arena::CreateMaybeMessage<::zkprover::Proof>(Arena*);
template<> ::zkprover::ProofB* Arena::CreateMaybeMessage<::zkprover::ProofB>(Arena*);
template<> ::zkprover::PublicInputs* Arena::CreateMaybeMessage<::zkprover::PublicInputs>(Arena*);
template<> ::zkprover::PublicInputsExtended* Arena::CreateMaybeMessage<::zkprover::PublicInputsExtended>(Arena*);
template<> ::zkprover::RequestId* Arena::CreateMaybeMessage<::zkprover::RequestId>(Arena*);
template<> ::zkprover::ResCancel* Arena::CreateMaybeMessage<::zkprover::ResCancel>(Arena*);
template<> ::zkprover::ResExecute* Arena::CreateMaybeMessage<::zkprover::ResExecute>(Arena*);
template<> ::zkprover::ResExecute_DiffKeysValuesEntry_DoNotUse* Arena::CreateMaybeMessage<::zkprover::ResExecute_DiffKeysValuesEntry_DoNotUse>(Arena*);
template<> ::zkprover::ResGenProof* Arena::CreateMaybeMessage<::zkprover::ResGenProof>(Arena*);
template<> ::zkprover::ResGetProof* Arena::CreateMaybeMessage<::zkprover::ResGetProof>(Arena*);
template<> ::zkprover::ResGetStatus* Arena::CreateMaybeMessage<::zkprover::ResGetStatus>(Arena*);
template<> ::zkprover::Version* Arena::CreateMaybeMessage<::zkprover::Version>(Arena*);
template<> ::zkprover::ZkCounters* Arena::CreateMaybeMessage<::zkprover::ZkCounters>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zkprover {

enum ResGetStatus_StatusProver : int {
  ResGetStatus_StatusProver_BOOTING = 0,
  ResGetStatus_StatusProver_COMPUTING = 1,
  ResGetStatus_StatusProver_IDLE = 2,
  ResGetStatus_StatusProver_HALT = 3,
  ResGetStatus_StatusProver_ResGetStatus_StatusProver_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ResGetStatus_StatusProver_ResGetStatus_StatusProver_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ResGetStatus_StatusProver_IsValid(int value);
constexpr ResGetStatus_StatusProver ResGetStatus_StatusProver_StatusProver_MIN = ResGetStatus_StatusProver_BOOTING;
constexpr ResGetStatus_StatusProver ResGetStatus_StatusProver_StatusProver_MAX = ResGetStatus_StatusProver_HALT;
constexpr int ResGetStatus_StatusProver_StatusProver_ARRAYSIZE = ResGetStatus_StatusProver_StatusProver_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResGetStatus_StatusProver_descriptor();
template<typename T>
inline const std::string& ResGetStatus_StatusProver_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ResGetStatus_StatusProver>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ResGetStatus_StatusProver_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ResGetStatus_StatusProver_descriptor(), enum_t_value);
}
inline bool ResGetStatus_StatusProver_Parse(
    const std::string& name, ResGetStatus_StatusProver* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ResGetStatus_StatusProver>(
    ResGetStatus_StatusProver_descriptor(), name, value);
}
enum ResGenProof_ResultGenProof : int {
  ResGenProof_ResultGenProof_OK = 0,
  ResGenProof_ResultGenProof_ERROR = 1,
  ResGenProof_ResultGenProof_INTERNAL_ERROR = 2,
  ResGenProof_ResultGenProof_ResGenProof_ResultGenProof_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ResGenProof_ResultGenProof_ResGenProof_ResultGenProof_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ResGenProof_ResultGenProof_IsValid(int value);
constexpr ResGenProof_ResultGenProof ResGenProof_ResultGenProof_ResultGenProof_MIN = ResGenProof_ResultGenProof_OK;
constexpr ResGenProof_ResultGenProof ResGenProof_ResultGenProof_ResultGenProof_MAX = ResGenProof_ResultGenProof_INTERNAL_ERROR;
constexpr int ResGenProof_ResultGenProof_ResultGenProof_ARRAYSIZE = ResGenProof_ResultGenProof_ResultGenProof_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResGenProof_ResultGenProof_descriptor();
template<typename T>
inline const std::string& ResGenProof_ResultGenProof_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ResGenProof_ResultGenProof>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ResGenProof_ResultGenProof_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ResGenProof_ResultGenProof_descriptor(), enum_t_value);
}
inline bool ResGenProof_ResultGenProof_Parse(
    const std::string& name, ResGenProof_ResultGenProof* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ResGenProof_ResultGenProof>(
    ResGenProof_ResultGenProof_descriptor(), name, value);
}
enum ResCancel_ResultCancel : int {
  ResCancel_ResultCancel_OK = 0,
  ResCancel_ResultCancel_ERROR = 1,
  ResCancel_ResultCancel_ResCancel_ResultCancel_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ResCancel_ResultCancel_ResCancel_ResultCancel_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ResCancel_ResultCancel_IsValid(int value);
constexpr ResCancel_ResultCancel ResCancel_ResultCancel_ResultCancel_MIN = ResCancel_ResultCancel_OK;
constexpr ResCancel_ResultCancel ResCancel_ResultCancel_ResultCancel_MAX = ResCancel_ResultCancel_ERROR;
constexpr int ResCancel_ResultCancel_ResultCancel_ARRAYSIZE = ResCancel_ResultCancel_ResultCancel_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResCancel_ResultCancel_descriptor();
template<typename T>
inline const std::string& ResCancel_ResultCancel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ResCancel_ResultCancel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ResCancel_ResultCancel_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ResCancel_ResultCancel_descriptor(), enum_t_value);
}
inline bool ResCancel_ResultCancel_Parse(
    const std::string& name, ResCancel_ResultCancel* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ResCancel_ResultCancel>(
    ResCancel_ResultCancel_descriptor(), name, value);
}
enum ResGetProof_ResultGetProof : int {
  ResGetProof_ResultGetProof_COMPLETED_OK = 0,
  ResGetProof_ResultGetProof_ERROR = 1,
  ResGetProof_ResultGetProof_COMPLETED_ERR = 2,
  ResGetProof_ResultGetProof_PENDING = 3,
  ResGetProof_ResultGetProof_INTERNAL_ERROR = 4,
  ResGetProof_ResultGetProof_CANCEL = 5,
  ResGetProof_ResultGetProof_ResGetProof_ResultGetProof_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ResGetProof_ResultGetProof_ResGetProof_ResultGetProof_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ResGetProof_ResultGetProof_IsValid(int value);
constexpr ResGetProof_ResultGetProof ResGetProof_ResultGetProof_ResultGetProof_MIN = ResGetProof_ResultGetProof_COMPLETED_OK;
constexpr ResGetProof_ResultGetProof ResGetProof_ResultGetProof_ResultGetProof_MAX = ResGetProof_ResultGetProof_CANCEL;
constexpr int ResGetProof_ResultGetProof_ResultGetProof_ARRAYSIZE = ResGetProof_ResultGetProof_ResultGetProof_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResGetProof_ResultGetProof_descriptor();
template<typename T>
inline const std::string& ResGetProof_ResultGetProof_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ResGetProof_ResultGetProof>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ResGetProof_ResultGetProof_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ResGetProof_ResultGetProof_descriptor(), enum_t_value);
}
inline bool ResGetProof_ResultGetProof_Parse(
    const std::string& name, ResGetProof_ResultGetProof* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ResGetProof_ResultGetProof>(
    ResGetProof_ResultGetProof_descriptor(), name, value);
}
// ===================================================================

class Version PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zkprover.Version) */ {
 public:
  inline Version() : Version(nullptr) {};
  virtual ~Version();

  Version(const Version& from);
  Version(Version&& from) noexcept
    : Version() {
    *this = ::std::move(from);
  }

  inline Version& operator=(const Version& from) {
    CopyFrom(from);
    return *this;
  }
  inline Version& operator=(Version&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Version& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Version* internal_default_instance() {
    return reinterpret_cast<const Version*>(
               &_Version_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Version& a, Version& b) {
    a.Swap(&b);
  }
  inline void Swap(Version* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Version* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Version* New() const final {
    return CreateMaybeMessage<Version>(nullptr);
  }

  Version* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Version>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Version& from);
  void MergeFrom(const Version& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Version* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zkprover.Version";
  }
  protected:
  explicit Version(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zk_2dprover_2eproto);
    return ::descriptor_table_zk_2dprover_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kV001FieldNumber = 1,
  };
  // string v0_0_1 = 1;
  void clear_v0_0_1();
  const std::string& v0_0_1() const;
  void set_v0_0_1(const std::string& value);
  void set_v0_0_1(std::string&& value);
  void set_v0_0_1(const char* value);
  void set_v0_0_1(const char* value, size_t size);
  std::string* mutable_v0_0_1();
  std::string* release_v0_0_1();
  void set_allocated_v0_0_1(std::string* v0_0_1);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_v0_0_1();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_v0_0_1(
      std::string* v0_0_1);
  private:
  const std::string& _internal_v0_0_1() const;
  void _internal_set_v0_0_1(const std::string& value);
  std::string* _internal_mutable_v0_0_1();
  public:

  // @@protoc_insertion_point(class_scope:zkprover.Version)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr v0_0_1_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zk_2dprover_2eproto;
};
// -------------------------------------------------------------------

class NoParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zkprover.NoParams) */ {
 public:
  inline NoParams() : NoParams(nullptr) {};
  virtual ~NoParams();

  NoParams(const NoParams& from);
  NoParams(NoParams&& from) noexcept
    : NoParams() {
    *this = ::std::move(from);
  }

  inline NoParams& operator=(const NoParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline NoParams& operator=(NoParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NoParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NoParams* internal_default_instance() {
    return reinterpret_cast<const NoParams*>(
               &_NoParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NoParams& a, NoParams& b) {
    a.Swap(&b);
  }
  inline void Swap(NoParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NoParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NoParams* New() const final {
    return CreateMaybeMessage<NoParams>(nullptr);
  }

  NoParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NoParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NoParams& from);
  void MergeFrom(const NoParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NoParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zkprover.NoParams";
  }
  protected:
  explicit NoParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zk_2dprover_2eproto);
    return ::descriptor_table_zk_2dprover_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:zkprover.NoParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zk_2dprover_2eproto;
};
// -------------------------------------------------------------------

class RequestId PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zkprover.RequestId) */ {
 public:
  inline RequestId() : RequestId(nullptr) {};
  virtual ~RequestId();

  RequestId(const RequestId& from);
  RequestId(RequestId&& from) noexcept
    : RequestId() {
    *this = ::std::move(from);
  }

  inline RequestId& operator=(const RequestId& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestId& operator=(RequestId&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestId* internal_default_instance() {
    return reinterpret_cast<const RequestId*>(
               &_RequestId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RequestId& a, RequestId& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestId* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestId* New() const final {
    return CreateMaybeMessage<RequestId>(nullptr);
  }

  RequestId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestId& from);
  void MergeFrom(const RequestId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zkprover.RequestId";
  }
  protected:
  explicit RequestId(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zk_2dprover_2eproto);
    return ::descriptor_table_zk_2dprover_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:zkprover.RequestId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zk_2dprover_2eproto;
};
// -------------------------------------------------------------------

class ResGetStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zkprover.ResGetStatus) */ {
 public:
  inline ResGetStatus() : ResGetStatus(nullptr) {};
  virtual ~ResGetStatus();

  ResGetStatus(const ResGetStatus& from);
  ResGetStatus(ResGetStatus&& from) noexcept
    : ResGetStatus() {
    *this = ::std::move(from);
  }

  inline ResGetStatus& operator=(const ResGetStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResGetStatus& operator=(ResGetStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResGetStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResGetStatus* internal_default_instance() {
    return reinterpret_cast<const ResGetStatus*>(
               &_ResGetStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ResGetStatus& a, ResGetStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ResGetStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResGetStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResGetStatus* New() const final {
    return CreateMaybeMessage<ResGetStatus>(nullptr);
  }

  ResGetStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResGetStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResGetStatus& from);
  void MergeFrom(const ResGetStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResGetStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zkprover.ResGetStatus";
  }
  protected:
  explicit ResGetStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zk_2dprover_2eproto);
    return ::descriptor_table_zk_2dprover_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ResGetStatus_StatusProver StatusProver;
  static constexpr StatusProver BOOTING =
    ResGetStatus_StatusProver_BOOTING;
  static constexpr StatusProver COMPUTING =
    ResGetStatus_StatusProver_COMPUTING;
  static constexpr StatusProver IDLE =
    ResGetStatus_StatusProver_IDLE;
  static constexpr StatusProver HALT =
    ResGetStatus_StatusProver_HALT;
  static inline bool StatusProver_IsValid(int value) {
    return ResGetStatus_StatusProver_IsValid(value);
  }
  static constexpr StatusProver StatusProver_MIN =
    ResGetStatus_StatusProver_StatusProver_MIN;
  static constexpr StatusProver StatusProver_MAX =
    ResGetStatus_StatusProver_StatusProver_MAX;
  static constexpr int StatusProver_ARRAYSIZE =
    ResGetStatus_StatusProver_StatusProver_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  StatusProver_descriptor() {
    return ResGetStatus_StatusProver_descriptor();
  }
  template<typename T>
  static inline const std::string& StatusProver_Name(T enum_t_value) {
    static_assert(::std::is_same<T, StatusProver>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function StatusProver_Name.");
    return ResGetStatus_StatusProver_Name(enum_t_value);
  }
  static inline bool StatusProver_Parse(const std::string& name,
      StatusProver* value) {
    return ResGetStatus_StatusProver_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPendingRequestQueueIdsFieldNumber = 8,
    kLastComputedRequestIdFieldNumber = 2,
    kCurrentComputingRequestIdFieldNumber = 4,
    kVersionProtoFieldNumber = 6,
    kVersionServerFieldNumber = 7,
    kLastComputedEndTimeFieldNumber = 3,
    kCurrentComputingStartTimeFieldNumber = 5,
    kStateFieldNumber = 1,
  };
  // repeated string pending_request_queue_ids = 8;
  int pending_request_queue_ids_size() const;
  private:
  int _internal_pending_request_queue_ids_size() const;
  public:
  void clear_pending_request_queue_ids();
  const std::string& pending_request_queue_ids(int index) const;
  std::string* mutable_pending_request_queue_ids(int index);
  void set_pending_request_queue_ids(int index, const std::string& value);
  void set_pending_request_queue_ids(int index, std::string&& value);
  void set_pending_request_queue_ids(int index, const char* value);
  void set_pending_request_queue_ids(int index, const char* value, size_t size);
  std::string* add_pending_request_queue_ids();
  void add_pending_request_queue_ids(const std::string& value);
  void add_pending_request_queue_ids(std::string&& value);
  void add_pending_request_queue_ids(const char* value);
  void add_pending_request_queue_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& pending_request_queue_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_pending_request_queue_ids();
  private:
  const std::string& _internal_pending_request_queue_ids(int index) const;
  std::string* _internal_add_pending_request_queue_ids();
  public:

  // string last_computed_request_id = 2;
  void clear_last_computed_request_id();
  const std::string& last_computed_request_id() const;
  void set_last_computed_request_id(const std::string& value);
  void set_last_computed_request_id(std::string&& value);
  void set_last_computed_request_id(const char* value);
  void set_last_computed_request_id(const char* value, size_t size);
  std::string* mutable_last_computed_request_id();
  std::string* release_last_computed_request_id();
  void set_allocated_last_computed_request_id(std::string* last_computed_request_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_last_computed_request_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_last_computed_request_id(
      std::string* last_computed_request_id);
  private:
  const std::string& _internal_last_computed_request_id() const;
  void _internal_set_last_computed_request_id(const std::string& value);
  std::string* _internal_mutable_last_computed_request_id();
  public:

  // string current_computing_request_id = 4;
  void clear_current_computing_request_id();
  const std::string& current_computing_request_id() const;
  void set_current_computing_request_id(const std::string& value);
  void set_current_computing_request_id(std::string&& value);
  void set_current_computing_request_id(const char* value);
  void set_current_computing_request_id(const char* value, size_t size);
  std::string* mutable_current_computing_request_id();
  std::string* release_current_computing_request_id();
  void set_allocated_current_computing_request_id(std::string* current_computing_request_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_current_computing_request_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_current_computing_request_id(
      std::string* current_computing_request_id);
  private:
  const std::string& _internal_current_computing_request_id() const;
  void _internal_set_current_computing_request_id(const std::string& value);
  std::string* _internal_mutable_current_computing_request_id();
  public:

  // string version_proto = 6;
  void clear_version_proto();
  const std::string& version_proto() const;
  void set_version_proto(const std::string& value);
  void set_version_proto(std::string&& value);
  void set_version_proto(const char* value);
  void set_version_proto(const char* value, size_t size);
  std::string* mutable_version_proto();
  std::string* release_version_proto();
  void set_allocated_version_proto(std::string* version_proto);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_version_proto();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_version_proto(
      std::string* version_proto);
  private:
  const std::string& _internal_version_proto() const;
  void _internal_set_version_proto(const std::string& value);
  std::string* _internal_mutable_version_proto();
  public:

  // string version_server = 7;
  void clear_version_server();
  const std::string& version_server() const;
  void set_version_server(const std::string& value);
  void set_version_server(std::string&& value);
  void set_version_server(const char* value);
  void set_version_server(const char* value, size_t size);
  std::string* mutable_version_server();
  std::string* release_version_server();
  void set_allocated_version_server(std::string* version_server);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_version_server();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_version_server(
      std::string* version_server);
  private:
  const std::string& _internal_version_server() const;
  void _internal_set_version_server(const std::string& value);
  std::string* _internal_mutable_version_server();
  public:

  // uint64 last_computed_end_time = 3;
  void clear_last_computed_end_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 last_computed_end_time() const;
  void set_last_computed_end_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_last_computed_end_time() const;
  void _internal_set_last_computed_end_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 current_computing_start_time = 5;
  void clear_current_computing_start_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 current_computing_start_time() const;
  void set_current_computing_start_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_current_computing_start_time() const;
  void _internal_set_current_computing_start_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .zkprover.ResGetStatus.StatusProver state = 1;
  void clear_state();
  ::zkprover::ResGetStatus_StatusProver state() const;
  void set_state(::zkprover::ResGetStatus_StatusProver value);
  private:
  ::zkprover::ResGetStatus_StatusProver _internal_state() const;
  void _internal_set_state(::zkprover::ResGetStatus_StatusProver value);
  public:

  // @@protoc_insertion_point(class_scope:zkprover.ResGetStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> pending_request_queue_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_computed_request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr current_computing_request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_proto_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_server_;
  ::PROTOBUF_NAMESPACE_ID::uint64 last_computed_end_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 current_computing_start_time_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zk_2dprover_2eproto;
};
// -------------------------------------------------------------------

class ResGenProof PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zkprover.ResGenProof) */ {
 public:
  inline ResGenProof() : ResGenProof(nullptr) {};
  virtual ~ResGenProof();

  ResGenProof(const ResGenProof& from);
  ResGenProof(ResGenProof&& from) noexcept
    : ResGenProof() {
    *this = ::std::move(from);
  }

  inline ResGenProof& operator=(const ResGenProof& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResGenProof& operator=(ResGenProof&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResGenProof& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResGenProof* internal_default_instance() {
    return reinterpret_cast<const ResGenProof*>(
               &_ResGenProof_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ResGenProof& a, ResGenProof& b) {
    a.Swap(&b);
  }
  inline void Swap(ResGenProof* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResGenProof* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResGenProof* New() const final {
    return CreateMaybeMessage<ResGenProof>(nullptr);
  }

  ResGenProof* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResGenProof>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResGenProof& from);
  void MergeFrom(const ResGenProof& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResGenProof* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zkprover.ResGenProof";
  }
  protected:
  explicit ResGenProof(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zk_2dprover_2eproto);
    return ::descriptor_table_zk_2dprover_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ResGenProof_ResultGenProof ResultGenProof;
  static constexpr ResultGenProof OK =
    ResGenProof_ResultGenProof_OK;
  static constexpr ResultGenProof ERROR =
    ResGenProof_ResultGenProof_ERROR;
  static constexpr ResultGenProof INTERNAL_ERROR =
    ResGenProof_ResultGenProof_INTERNAL_ERROR;
  static inline bool ResultGenProof_IsValid(int value) {
    return ResGenProof_ResultGenProof_IsValid(value);
  }
  static constexpr ResultGenProof ResultGenProof_MIN =
    ResGenProof_ResultGenProof_ResultGenProof_MIN;
  static constexpr ResultGenProof ResultGenProof_MAX =
    ResGenProof_ResultGenProof_ResultGenProof_MAX;
  static constexpr int ResultGenProof_ARRAYSIZE =
    ResGenProof_ResultGenProof_ResultGenProof_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ResultGenProof_descriptor() {
    return ResGenProof_ResultGenProof_descriptor();
  }
  template<typename T>
  static inline const std::string& ResultGenProof_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ResultGenProof>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ResultGenProof_Name.");
    return ResGenProof_ResultGenProof_Name(enum_t_value);
  }
  static inline bool ResultGenProof_Parse(const std::string& name,
      ResultGenProof* value) {
    return ResGenProof_ResultGenProof_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kResultFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .zkprover.ResGenProof.ResultGenProof result = 2;
  void clear_result();
  ::zkprover::ResGenProof_ResultGenProof result() const;
  void set_result(::zkprover::ResGenProof_ResultGenProof value);
  private:
  ::zkprover::ResGenProof_ResultGenProof _internal_result() const;
  void _internal_set_result(::zkprover::ResGenProof_ResultGenProof value);
  public:

  // @@protoc_insertion_point(class_scope:zkprover.ResGenProof)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zk_2dprover_2eproto;
};
// -------------------------------------------------------------------

class ResCancel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zkprover.ResCancel) */ {
 public:
  inline ResCancel() : ResCancel(nullptr) {};
  virtual ~ResCancel();

  ResCancel(const ResCancel& from);
  ResCancel(ResCancel&& from) noexcept
    : ResCancel() {
    *this = ::std::move(from);
  }

  inline ResCancel& operator=(const ResCancel& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResCancel& operator=(ResCancel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResCancel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResCancel* internal_default_instance() {
    return reinterpret_cast<const ResCancel*>(
               &_ResCancel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ResCancel& a, ResCancel& b) {
    a.Swap(&b);
  }
  inline void Swap(ResCancel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResCancel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResCancel* New() const final {
    return CreateMaybeMessage<ResCancel>(nullptr);
  }

  ResCancel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResCancel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResCancel& from);
  void MergeFrom(const ResCancel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResCancel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zkprover.ResCancel";
  }
  protected:
  explicit ResCancel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zk_2dprover_2eproto);
    return ::descriptor_table_zk_2dprover_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ResCancel_ResultCancel ResultCancel;
  static constexpr ResultCancel OK =
    ResCancel_ResultCancel_OK;
  static constexpr ResultCancel ERROR =
    ResCancel_ResultCancel_ERROR;
  static inline bool ResultCancel_IsValid(int value) {
    return ResCancel_ResultCancel_IsValid(value);
  }
  static constexpr ResultCancel ResultCancel_MIN =
    ResCancel_ResultCancel_ResultCancel_MIN;
  static constexpr ResultCancel ResultCancel_MAX =
    ResCancel_ResultCancel_ResultCancel_MAX;
  static constexpr int ResultCancel_ARRAYSIZE =
    ResCancel_ResultCancel_ResultCancel_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ResultCancel_descriptor() {
    return ResCancel_ResultCancel_descriptor();
  }
  template<typename T>
  static inline const std::string& ResultCancel_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ResultCancel>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ResultCancel_Name.");
    return ResCancel_ResultCancel_Name(enum_t_value);
  }
  static inline bool ResultCancel_Parse(const std::string& name,
      ResultCancel* value) {
    return ResCancel_ResultCancel_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // .zkprover.ResCancel.ResultCancel result = 1;
  void clear_result();
  ::zkprover::ResCancel_ResultCancel result() const;
  void set_result(::zkprover::ResCancel_ResultCancel value);
  private:
  ::zkprover::ResCancel_ResultCancel _internal_result() const;
  void _internal_set_result(::zkprover::ResCancel_ResultCancel value);
  public:

  // @@protoc_insertion_point(class_scope:zkprover.ResCancel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zk_2dprover_2eproto;
};
// -------------------------------------------------------------------

class ResGetProof PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zkprover.ResGetProof) */ {
 public:
  inline ResGetProof() : ResGetProof(nullptr) {};
  virtual ~ResGetProof();

  ResGetProof(const ResGetProof& from);
  ResGetProof(ResGetProof&& from) noexcept
    : ResGetProof() {
    *this = ::std::move(from);
  }

  inline ResGetProof& operator=(const ResGetProof& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResGetProof& operator=(ResGetProof&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResGetProof& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResGetProof* internal_default_instance() {
    return reinterpret_cast<const ResGetProof*>(
               &_ResGetProof_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ResGetProof& a, ResGetProof& b) {
    a.Swap(&b);
  }
  inline void Swap(ResGetProof* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResGetProof* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResGetProof* New() const final {
    return CreateMaybeMessage<ResGetProof>(nullptr);
  }

  ResGetProof* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResGetProof>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResGetProof& from);
  void MergeFrom(const ResGetProof& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResGetProof* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zkprover.ResGetProof";
  }
  protected:
  explicit ResGetProof(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zk_2dprover_2eproto);
    return ::descriptor_table_zk_2dprover_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ResGetProof_ResultGetProof ResultGetProof;
  static constexpr ResultGetProof COMPLETED_OK =
    ResGetProof_ResultGetProof_COMPLETED_OK;
  static constexpr ResultGetProof ERROR =
    ResGetProof_ResultGetProof_ERROR;
  static constexpr ResultGetProof COMPLETED_ERR =
    ResGetProof_ResultGetProof_COMPLETED_ERR;
  static constexpr ResultGetProof PENDING =
    ResGetProof_ResultGetProof_PENDING;
  static constexpr ResultGetProof INTERNAL_ERROR =
    ResGetProof_ResultGetProof_INTERNAL_ERROR;
  static constexpr ResultGetProof CANCEL =
    ResGetProof_ResultGetProof_CANCEL;
  static inline bool ResultGetProof_IsValid(int value) {
    return ResGetProof_ResultGetProof_IsValid(value);
  }
  static constexpr ResultGetProof ResultGetProof_MIN =
    ResGetProof_ResultGetProof_ResultGetProof_MIN;
  static constexpr ResultGetProof ResultGetProof_MAX =
    ResGetProof_ResultGetProof_ResultGetProof_MAX;
  static constexpr int ResultGetProof_ARRAYSIZE =
    ResGetProof_ResultGetProof_ResultGetProof_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ResultGetProof_descriptor() {
    return ResGetProof_ResultGetProof_descriptor();
  }
  template<typename T>
  static inline const std::string& ResultGetProof_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ResultGetProof>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ResultGetProof_Name.");
    return ResGetProof_ResultGetProof_Name(enum_t_value);
  }
  static inline bool ResultGetProof_Parse(const std::string& name,
      ResultGetProof* value) {
    return ResGetProof_ResultGetProof_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kResultStringFieldNumber = 5,
    kProofFieldNumber = 2,
    kPublicFieldNumber = 3,
    kResultFieldNumber = 4,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string result_string = 5;
  void clear_result_string();
  const std::string& result_string() const;
  void set_result_string(const std::string& value);
  void set_result_string(std::string&& value);
  void set_result_string(const char* value);
  void set_result_string(const char* value, size_t size);
  std::string* mutable_result_string();
  std::string* release_result_string();
  void set_allocated_result_string(std::string* result_string);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_result_string();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_result_string(
      std::string* result_string);
  private:
  const std::string& _internal_result_string() const;
  void _internal_set_result_string(const std::string& value);
  std::string* _internal_mutable_result_string();
  public:

  // .zkprover.Proof proof = 2;
  bool has_proof() const;
  private:
  bool _internal_has_proof() const;
  public:
  void clear_proof();
  const ::zkprover::Proof& proof() const;
  ::zkprover::Proof* release_proof();
  ::zkprover::Proof* mutable_proof();
  void set_allocated_proof(::zkprover::Proof* proof);
  private:
  const ::zkprover::Proof& _internal_proof() const;
  ::zkprover::Proof* _internal_mutable_proof();
  public:
  void unsafe_arena_set_allocated_proof(
      ::zkprover::Proof* proof);
  ::zkprover::Proof* unsafe_arena_release_proof();

  // .zkprover.PublicInputsExtended public = 3;
  bool has_public_() const;
  private:
  bool _internal_has_public_() const;
  public:
  void clear_public_();
  const ::zkprover::PublicInputsExtended& public_() const;
  ::zkprover::PublicInputsExtended* release_public_();
  ::zkprover::PublicInputsExtended* mutable_public_();
  void set_allocated_public_(::zkprover::PublicInputsExtended* public_);
  private:
  const ::zkprover::PublicInputsExtended& _internal_public_() const;
  ::zkprover::PublicInputsExtended* _internal_mutable_public_();
  public:
  void unsafe_arena_set_allocated_public_(
      ::zkprover::PublicInputsExtended* public_);
  ::zkprover::PublicInputsExtended* unsafe_arena_release_public_();

  // .zkprover.ResGetProof.ResultGetProof result = 4;
  void clear_result();
  ::zkprover::ResGetProof_ResultGetProof result() const;
  void set_result(::zkprover::ResGetProof_ResultGetProof value);
  private:
  ::zkprover::ResGetProof_ResultGetProof _internal_result() const;
  void _internal_set_result(::zkprover::ResGetProof_ResultGetProof value);
  public:

  // @@protoc_insertion_point(class_scope:zkprover.ResGetProof)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_string_;
  ::zkprover::Proof* proof_;
  ::zkprover::PublicInputsExtended* public__;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zk_2dprover_2eproto;
};
// -------------------------------------------------------------------

class ResExecute_DiffKeysValuesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ResExecute_DiffKeysValuesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ResExecute_DiffKeysValuesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  ResExecute_DiffKeysValuesEntry_DoNotUse();
  ResExecute_DiffKeysValuesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ResExecute_DiffKeysValuesEntry_DoNotUse& other);
  static const ResExecute_DiffKeysValuesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ResExecute_DiffKeysValuesEntry_DoNotUse*>(&_ResExecute_DiffKeysValuesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "zkprover.ResExecute.DiffKeysValuesEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "zkprover.ResExecute.DiffKeysValuesEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zk_2dprover_2eproto);
    return ::descriptor_table_zk_2dprover_2eproto.file_level_metadata[7];
  }

  public:
};

// -------------------------------------------------------------------

class ResExecute PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zkprover.ResExecute) */ {
 public:
  inline ResExecute() : ResExecute(nullptr) {};
  virtual ~ResExecute();

  ResExecute(const ResExecute& from);
  ResExecute(ResExecute&& from) noexcept
    : ResExecute() {
    *this = ::std::move(from);
  }

  inline ResExecute& operator=(const ResExecute& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResExecute& operator=(ResExecute&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResExecute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResExecute* internal_default_instance() {
    return reinterpret_cast<const ResExecute*>(
               &_ResExecute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ResExecute& a, ResExecute& b) {
    a.Swap(&b);
  }
  inline void Swap(ResExecute* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResExecute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResExecute* New() const final {
    return CreateMaybeMessage<ResExecute>(nullptr);
  }

  ResExecute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResExecute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResExecute& from);
  void MergeFrom(const ResExecute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResExecute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zkprover.ResExecute";
  }
  protected:
  explicit ResExecute(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zk_2dprover_2eproto);
    return ::descriptor_table_zk_2dprover_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kDiffKeysValuesFieldNumber = 1,
    kReceiptsFieldNumber = 4,
    kLogsFieldNumber = 5,
    kNewStateRootFieldNumber = 2,
    kCountersFieldNumber = 3,
  };
  // map<string, string> diff_keys_values = 1;
  int diff_keys_values_size() const;
  private:
  int _internal_diff_keys_values_size() const;
  public:
  void clear_diff_keys_values();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_diff_keys_values() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_diff_keys_values();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      diff_keys_values() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_diff_keys_values();

  // repeated string receipts = 4;
  int receipts_size() const;
  private:
  int _internal_receipts_size() const;
  public:
  void clear_receipts();
  const std::string& receipts(int index) const;
  std::string* mutable_receipts(int index);
  void set_receipts(int index, const std::string& value);
  void set_receipts(int index, std::string&& value);
  void set_receipts(int index, const char* value);
  void set_receipts(int index, const char* value, size_t size);
  std::string* add_receipts();
  void add_receipts(const std::string& value);
  void add_receipts(std::string&& value);
  void add_receipts(const char* value);
  void add_receipts(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& receipts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_receipts();
  private:
  const std::string& _internal_receipts(int index) const;
  std::string* _internal_add_receipts();
  public:

  // repeated string logs = 5;
  int logs_size() const;
  private:
  int _internal_logs_size() const;
  public:
  void clear_logs();
  const std::string& logs(int index) const;
  std::string* mutable_logs(int index);
  void set_logs(int index, const std::string& value);
  void set_logs(int index, std::string&& value);
  void set_logs(int index, const char* value);
  void set_logs(int index, const char* value, size_t size);
  std::string* add_logs();
  void add_logs(const std::string& value);
  void add_logs(std::string&& value);
  void add_logs(const char* value);
  void add_logs(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& logs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_logs();
  private:
  const std::string& _internal_logs(int index) const;
  std::string* _internal_add_logs();
  public:

  // string new_state_root = 2;
  void clear_new_state_root();
  const std::string& new_state_root() const;
  void set_new_state_root(const std::string& value);
  void set_new_state_root(std::string&& value);
  void set_new_state_root(const char* value);
  void set_new_state_root(const char* value, size_t size);
  std::string* mutable_new_state_root();
  std::string* release_new_state_root();
  void set_allocated_new_state_root(std::string* new_state_root);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_new_state_root();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_new_state_root(
      std::string* new_state_root);
  private:
  const std::string& _internal_new_state_root() const;
  void _internal_set_new_state_root(const std::string& value);
  std::string* _internal_mutable_new_state_root();
  public:

  // .zkprover.ZkCounters counters = 3;
  bool has_counters() const;
  private:
  bool _internal_has_counters() const;
  public:
  void clear_counters();
  const ::zkprover::ZkCounters& counters() const;
  ::zkprover::ZkCounters* release_counters();
  ::zkprover::ZkCounters* mutable_counters();
  void set_allocated_counters(::zkprover::ZkCounters* counters);
  private:
  const ::zkprover::ZkCounters& _internal_counters() const;
  ::zkprover::ZkCounters* _internal_mutable_counters();
  public:
  void unsafe_arena_set_allocated_counters(
      ::zkprover::ZkCounters* counters);
  ::zkprover::ZkCounters* unsafe_arena_release_counters();

  // @@protoc_insertion_point(class_scope:zkprover.ResExecute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ResExecute_DiffKeysValuesEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > diff_keys_values_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> receipts_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> logs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr new_state_root_;
  ::zkprover::ZkCounters* counters_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zk_2dprover_2eproto;
};
// -------------------------------------------------------------------

class ZkCounters PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zkprover.ZkCounters) */ {
 public:
  inline ZkCounters() : ZkCounters(nullptr) {};
  virtual ~ZkCounters();

  ZkCounters(const ZkCounters& from);
  ZkCounters(ZkCounters&& from) noexcept
    : ZkCounters() {
    *this = ::std::move(from);
  }

  inline ZkCounters& operator=(const ZkCounters& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZkCounters& operator=(ZkCounters&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ZkCounters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ZkCounters* internal_default_instance() {
    return reinterpret_cast<const ZkCounters*>(
               &_ZkCounters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ZkCounters& a, ZkCounters& b) {
    a.Swap(&b);
  }
  inline void Swap(ZkCounters* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ZkCounters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ZkCounters* New() const final {
    return CreateMaybeMessage<ZkCounters>(nullptr);
  }

  ZkCounters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ZkCounters>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ZkCounters& from);
  void MergeFrom(const ZkCounters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ZkCounters* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zkprover.ZkCounters";
  }
  protected:
  explicit ZkCounters(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zk_2dprover_2eproto);
    return ::descriptor_table_zk_2dprover_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEcrecoverFieldNumber = 1,
    kHashPoseidonFieldNumber = 2,
    kHashKeccakFieldNumber = 3,
    kArithFieldNumber = 4,
  };
  // uint32 ecrecover = 1;
  void clear_ecrecover();
  ::PROTOBUF_NAMESPACE_ID::uint32 ecrecover() const;
  void set_ecrecover(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ecrecover() const;
  void _internal_set_ecrecover(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 hash_poseidon = 2;
  void clear_hash_poseidon();
  ::PROTOBUF_NAMESPACE_ID::uint32 hash_poseidon() const;
  void set_hash_poseidon(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hash_poseidon() const;
  void _internal_set_hash_poseidon(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 hash_keccak = 3;
  void clear_hash_keccak();
  ::PROTOBUF_NAMESPACE_ID::uint32 hash_keccak() const;
  void set_hash_keccak(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hash_keccak() const;
  void _internal_set_hash_keccak(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 arith = 4;
  void clear_arith();
  ::PROTOBUF_NAMESPACE_ID::uint32 arith() const;
  void set_arith(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_arith() const;
  void _internal_set_arith(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:zkprover.ZkCounters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ecrecover_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hash_poseidon_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hash_keccak_;
  ::PROTOBUF_NAMESPACE_ID::uint32 arith_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zk_2dprover_2eproto;
};
// -------------------------------------------------------------------

class PublicInputs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zkprover.PublicInputs) */ {
 public:
  inline PublicInputs() : PublicInputs(nullptr) {};
  virtual ~PublicInputs();

  PublicInputs(const PublicInputs& from);
  PublicInputs(PublicInputs&& from) noexcept
    : PublicInputs() {
    *this = ::std::move(from);
  }

  inline PublicInputs& operator=(const PublicInputs& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublicInputs& operator=(PublicInputs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PublicInputs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PublicInputs* internal_default_instance() {
    return reinterpret_cast<const PublicInputs*>(
               &_PublicInputs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PublicInputs& a, PublicInputs& b) {
    a.Swap(&b);
  }
  inline void Swap(PublicInputs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublicInputs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PublicInputs* New() const final {
    return CreateMaybeMessage<PublicInputs>(nullptr);
  }

  PublicInputs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PublicInputs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PublicInputs& from);
  void MergeFrom(const PublicInputs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublicInputs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zkprover.PublicInputs";
  }
  protected:
  explicit PublicInputs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zk_2dprover_2eproto);
    return ::descriptor_table_zk_2dprover_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOldStateRootFieldNumber = 1,
    kOldLocalExitRootFieldNumber = 2,
    kNewStateRootFieldNumber = 3,
    kNewLocalExitRootFieldNumber = 4,
    kSequencerAddrFieldNumber = 5,
    kBatchHashDataFieldNumber = 6,
    kChainIdFieldNumber = 7,
    kBatchNumFieldNumber = 8,
    kEthTimestampFieldNumber = 10,
    kBlockNumFieldNumber = 9,
  };
  // string old_state_root = 1;
  void clear_old_state_root();
  const std::string& old_state_root() const;
  void set_old_state_root(const std::string& value);
  void set_old_state_root(std::string&& value);
  void set_old_state_root(const char* value);
  void set_old_state_root(const char* value, size_t size);
  std::string* mutable_old_state_root();
  std::string* release_old_state_root();
  void set_allocated_old_state_root(std::string* old_state_root);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_old_state_root();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_old_state_root(
      std::string* old_state_root);
  private:
  const std::string& _internal_old_state_root() const;
  void _internal_set_old_state_root(const std::string& value);
  std::string* _internal_mutable_old_state_root();
  public:

  // string old_local_exit_root = 2;
  void clear_old_local_exit_root();
  const std::string& old_local_exit_root() const;
  void set_old_local_exit_root(const std::string& value);
  void set_old_local_exit_root(std::string&& value);
  void set_old_local_exit_root(const char* value);
  void set_old_local_exit_root(const char* value, size_t size);
  std::string* mutable_old_local_exit_root();
  std::string* release_old_local_exit_root();
  void set_allocated_old_local_exit_root(std::string* old_local_exit_root);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_old_local_exit_root();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_old_local_exit_root(
      std::string* old_local_exit_root);
  private:
  const std::string& _internal_old_local_exit_root() const;
  void _internal_set_old_local_exit_root(const std::string& value);
  std::string* _internal_mutable_old_local_exit_root();
  public:

  // string new_state_root = 3;
  void clear_new_state_root();
  const std::string& new_state_root() const;
  void set_new_state_root(const std::string& value);
  void set_new_state_root(std::string&& value);
  void set_new_state_root(const char* value);
  void set_new_state_root(const char* value, size_t size);
  std::string* mutable_new_state_root();
  std::string* release_new_state_root();
  void set_allocated_new_state_root(std::string* new_state_root);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_new_state_root();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_new_state_root(
      std::string* new_state_root);
  private:
  const std::string& _internal_new_state_root() const;
  void _internal_set_new_state_root(const std::string& value);
  std::string* _internal_mutable_new_state_root();
  public:

  // string new_local_exit_root = 4;
  void clear_new_local_exit_root();
  const std::string& new_local_exit_root() const;
  void set_new_local_exit_root(const std::string& value);
  void set_new_local_exit_root(std::string&& value);
  void set_new_local_exit_root(const char* value);
  void set_new_local_exit_root(const char* value, size_t size);
  std::string* mutable_new_local_exit_root();
  std::string* release_new_local_exit_root();
  void set_allocated_new_local_exit_root(std::string* new_local_exit_root);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_new_local_exit_root();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_new_local_exit_root(
      std::string* new_local_exit_root);
  private:
  const std::string& _internal_new_local_exit_root() const;
  void _internal_set_new_local_exit_root(const std::string& value);
  std::string* _internal_mutable_new_local_exit_root();
  public:

  // string sequencer_addr = 5;
  void clear_sequencer_addr();
  const std::string& sequencer_addr() const;
  void set_sequencer_addr(const std::string& value);
  void set_sequencer_addr(std::string&& value);
  void set_sequencer_addr(const char* value);
  void set_sequencer_addr(const char* value, size_t size);
  std::string* mutable_sequencer_addr();
  std::string* release_sequencer_addr();
  void set_allocated_sequencer_addr(std::string* sequencer_addr);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sequencer_addr();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sequencer_addr(
      std::string* sequencer_addr);
  private:
  const std::string& _internal_sequencer_addr() const;
  void _internal_set_sequencer_addr(const std::string& value);
  std::string* _internal_mutable_sequencer_addr();
  public:

  // string batch_hash_data = 6;
  void clear_batch_hash_data();
  const std::string& batch_hash_data() const;
  void set_batch_hash_data(const std::string& value);
  void set_batch_hash_data(std::string&& value);
  void set_batch_hash_data(const char* value);
  void set_batch_hash_data(const char* value, size_t size);
  std::string* mutable_batch_hash_data();
  std::string* release_batch_hash_data();
  void set_allocated_batch_hash_data(std::string* batch_hash_data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_batch_hash_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_batch_hash_data(
      std::string* batch_hash_data);
  private:
  const std::string& _internal_batch_hash_data() const;
  void _internal_set_batch_hash_data(const std::string& value);
  std::string* _internal_mutable_batch_hash_data();
  public:

  // uint32 chain_id = 7;
  void clear_chain_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 chain_id() const;
  void set_chain_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_chain_id() const;
  void _internal_set_chain_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 batch_num = 8;
  void clear_batch_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 batch_num() const;
  void set_batch_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_batch_num() const;
  void _internal_set_batch_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 eth_timestamp = 10;
  void clear_eth_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 eth_timestamp() const;
  void set_eth_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_eth_timestamp() const;
  void _internal_set_eth_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 block_num = 9;
  void clear_block_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 block_num() const;
  void set_block_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_block_num() const;
  void _internal_set_block_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:zkprover.PublicInputs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr old_state_root_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr old_local_exit_root_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr new_state_root_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr new_local_exit_root_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sequencer_addr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr batch_hash_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 chain_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 batch_num_;
  ::PROTOBUF_NAMESPACE_ID::uint64 eth_timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 block_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zk_2dprover_2eproto;
};
// -------------------------------------------------------------------

class ProofB PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zkprover.ProofB) */ {
 public:
  inline ProofB() : ProofB(nullptr) {};
  virtual ~ProofB();

  ProofB(const ProofB& from);
  ProofB(ProofB&& from) noexcept
    : ProofB() {
    *this = ::std::move(from);
  }

  inline ProofB& operator=(const ProofB& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProofB& operator=(ProofB&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProofB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProofB* internal_default_instance() {
    return reinterpret_cast<const ProofB*>(
               &_ProofB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ProofB& a, ProofB& b) {
    a.Swap(&b);
  }
  inline void Swap(ProofB* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProofB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProofB* New() const final {
    return CreateMaybeMessage<ProofB>(nullptr);
  }

  ProofB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProofB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProofB& from);
  void MergeFrom(const ProofB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProofB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zkprover.ProofB";
  }
  protected:
  explicit ProofB(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zk_2dprover_2eproto);
    return ::descriptor_table_zk_2dprover_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProofsFieldNumber = 1,
  };
  // repeated string proofs = 1;
  int proofs_size() const;
  private:
  int _internal_proofs_size() const;
  public:
  void clear_proofs();
  const std::string& proofs(int index) const;
  std::string* mutable_proofs(int index);
  void set_proofs(int index, const std::string& value);
  void set_proofs(int index, std::string&& value);
  void set_proofs(int index, const char* value);
  void set_proofs(int index, const char* value, size_t size);
  std::string* add_proofs();
  void add_proofs(const std::string& value);
  void add_proofs(std::string&& value);
  void add_proofs(const char* value);
  void add_proofs(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& proofs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_proofs();
  private:
  const std::string& _internal_proofs(int index) const;
  std::string* _internal_add_proofs();
  public:

  // @@protoc_insertion_point(class_scope:zkprover.ProofB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> proofs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zk_2dprover_2eproto;
};
// -------------------------------------------------------------------

class Proof PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zkprover.Proof) */ {
 public:
  inline Proof() : Proof(nullptr) {};
  virtual ~Proof();

  Proof(const Proof& from);
  Proof(Proof&& from) noexcept
    : Proof() {
    *this = ::std::move(from);
  }

  inline Proof& operator=(const Proof& from) {
    CopyFrom(from);
    return *this;
  }
  inline Proof& operator=(Proof&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Proof& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Proof* internal_default_instance() {
    return reinterpret_cast<const Proof*>(
               &_Proof_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Proof& a, Proof& b) {
    a.Swap(&b);
  }
  inline void Swap(Proof* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Proof* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Proof* New() const final {
    return CreateMaybeMessage<Proof>(nullptr);
  }

  Proof* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Proof>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Proof& from);
  void MergeFrom(const Proof& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Proof* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zkprover.Proof";
  }
  protected:
  explicit Proof(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zk_2dprover_2eproto);
    return ::descriptor_table_zk_2dprover_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProofAFieldNumber = 1,
    kProofBFieldNumber = 2,
    kProofCFieldNumber = 3,
  };
  // repeated string proofA = 1;
  int proofa_size() const;
  private:
  int _internal_proofa_size() const;
  public:
  void clear_proofa();
  const std::string& proofa(int index) const;
  std::string* mutable_proofa(int index);
  void set_proofa(int index, const std::string& value);
  void set_proofa(int index, std::string&& value);
  void set_proofa(int index, const char* value);
  void set_proofa(int index, const char* value, size_t size);
  std::string* add_proofa();
  void add_proofa(const std::string& value);
  void add_proofa(std::string&& value);
  void add_proofa(const char* value);
  void add_proofa(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& proofa() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_proofa();
  private:
  const std::string& _internal_proofa(int index) const;
  std::string* _internal_add_proofa();
  public:

  // repeated .zkprover.ProofB proofB = 2;
  int proofb_size() const;
  private:
  int _internal_proofb_size() const;
  public:
  void clear_proofb();
  ::zkprover::ProofB* mutable_proofb(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zkprover::ProofB >*
      mutable_proofb();
  private:
  const ::zkprover::ProofB& _internal_proofb(int index) const;
  ::zkprover::ProofB* _internal_add_proofb();
  public:
  const ::zkprover::ProofB& proofb(int index) const;
  ::zkprover::ProofB* add_proofb();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zkprover::ProofB >&
      proofb() const;

  // repeated string proofC = 3;
  int proofc_size() const;
  private:
  int _internal_proofc_size() const;
  public:
  void clear_proofc();
  const std::string& proofc(int index) const;
  std::string* mutable_proofc(int index);
  void set_proofc(int index, const std::string& value);
  void set_proofc(int index, std::string&& value);
  void set_proofc(int index, const char* value);
  void set_proofc(int index, const char* value, size_t size);
  std::string* add_proofc();
  void add_proofc(const std::string& value);
  void add_proofc(std::string&& value);
  void add_proofc(const char* value);
  void add_proofc(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& proofc() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_proofc();
  private:
  const std::string& _internal_proofc(int index) const;
  std::string* _internal_add_proofc();
  public:

  // @@protoc_insertion_point(class_scope:zkprover.Proof)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> proofa_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zkprover::ProofB > proofb_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> proofc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zk_2dprover_2eproto;
};
// -------------------------------------------------------------------

class InputProver_DbEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<InputProver_DbEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<InputProver_DbEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  InputProver_DbEntry_DoNotUse();
  InputProver_DbEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const InputProver_DbEntry_DoNotUse& other);
  static const InputProver_DbEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const InputProver_DbEntry_DoNotUse*>(&_InputProver_DbEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "zkprover.InputProver.DbEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "zkprover.InputProver.DbEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zk_2dprover_2eproto);
    return ::descriptor_table_zk_2dprover_2eproto.file_level_metadata[13];
  }

  public:
};

// -------------------------------------------------------------------

class InputProver PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zkprover.InputProver) */ {
 public:
  inline InputProver() : InputProver(nullptr) {};
  virtual ~InputProver();

  InputProver(const InputProver& from);
  InputProver(InputProver&& from) noexcept
    : InputProver() {
    *this = ::std::move(from);
  }

  inline InputProver& operator=(const InputProver& from) {
    CopyFrom(from);
    return *this;
  }
  inline InputProver& operator=(InputProver&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InputProver& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InputProver* internal_default_instance() {
    return reinterpret_cast<const InputProver*>(
               &_InputProver_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(InputProver& a, InputProver& b) {
    a.Swap(&b);
  }
  inline void Swap(InputProver* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InputProver* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InputProver* New() const final {
    return CreateMaybeMessage<InputProver>(nullptr);
  }

  InputProver* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InputProver>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InputProver& from);
  void MergeFrom(const InputProver& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InputProver* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zkprover.InputProver";
  }
  protected:
  explicit InputProver(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zk_2dprover_2eproto);
    return ::descriptor_table_zk_2dprover_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kTxsFieldNumber = 3,
    kDbFieldNumber = 4,
    kGlobalExitRootFieldNumber = 2,
    kPublicInputsFieldNumber = 1,
  };
  // repeated string txs = 3;
  int txs_size() const;
  private:
  int _internal_txs_size() const;
  public:
  void clear_txs();
  const std::string& txs(int index) const;
  std::string* mutable_txs(int index);
  void set_txs(int index, const std::string& value);
  void set_txs(int index, std::string&& value);
  void set_txs(int index, const char* value);
  void set_txs(int index, const char* value, size_t size);
  std::string* add_txs();
  void add_txs(const std::string& value);
  void add_txs(std::string&& value);
  void add_txs(const char* value);
  void add_txs(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& txs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_txs();
  private:
  const std::string& _internal_txs(int index) const;
  std::string* _internal_add_txs();
  public:

  // map<string, string> db = 4;
  int db_size() const;
  private:
  int _internal_db_size() const;
  public:
  void clear_db();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_db() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_db();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      db() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_db();

  // string global_exit_root = 2;
  void clear_global_exit_root();
  const std::string& global_exit_root() const;
  void set_global_exit_root(const std::string& value);
  void set_global_exit_root(std::string&& value);
  void set_global_exit_root(const char* value);
  void set_global_exit_root(const char* value, size_t size);
  std::string* mutable_global_exit_root();
  std::string* release_global_exit_root();
  void set_allocated_global_exit_root(std::string* global_exit_root);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_global_exit_root();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_global_exit_root(
      std::string* global_exit_root);
  private:
  const std::string& _internal_global_exit_root() const;
  void _internal_set_global_exit_root(const std::string& value);
  std::string* _internal_mutable_global_exit_root();
  public:

  // .zkprover.PublicInputs public_inputs = 1;
  bool has_public_inputs() const;
  private:
  bool _internal_has_public_inputs() const;
  public:
  void clear_public_inputs();
  const ::zkprover::PublicInputs& public_inputs() const;
  ::zkprover::PublicInputs* release_public_inputs();
  ::zkprover::PublicInputs* mutable_public_inputs();
  void set_allocated_public_inputs(::zkprover::PublicInputs* public_inputs);
  private:
  const ::zkprover::PublicInputs& _internal_public_inputs() const;
  ::zkprover::PublicInputs* _internal_mutable_public_inputs();
  public:
  void unsafe_arena_set_allocated_public_inputs(
      ::zkprover::PublicInputs* public_inputs);
  ::zkprover::PublicInputs* unsafe_arena_release_public_inputs();

  // @@protoc_insertion_point(class_scope:zkprover.InputProver)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> txs_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      InputProver_DbEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > db_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr global_exit_root_;
  ::zkprover::PublicInputs* public_inputs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zk_2dprover_2eproto;
};
// -------------------------------------------------------------------

class InputProverExecute PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zkprover.InputProverExecute) */ {
 public:
  inline InputProverExecute() : InputProverExecute(nullptr) {};
  virtual ~InputProverExecute();

  InputProverExecute(const InputProverExecute& from);
  InputProverExecute(InputProverExecute&& from) noexcept
    : InputProverExecute() {
    *this = ::std::move(from);
  }

  inline InputProverExecute& operator=(const InputProverExecute& from) {
    CopyFrom(from);
    return *this;
  }
  inline InputProverExecute& operator=(InputProverExecute&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InputProverExecute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InputProverExecute* internal_default_instance() {
    return reinterpret_cast<const InputProverExecute*>(
               &_InputProverExecute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(InputProverExecute& a, InputProverExecute& b) {
    a.Swap(&b);
  }
  inline void Swap(InputProverExecute* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InputProverExecute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InputProverExecute* New() const final {
    return CreateMaybeMessage<InputProverExecute>(nullptr);
  }

  InputProverExecute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InputProverExecute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InputProverExecute& from);
  void MergeFrom(const InputProverExecute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InputProverExecute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zkprover.InputProverExecute";
  }
  protected:
  explicit InputProverExecute(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zk_2dprover_2eproto);
    return ::descriptor_table_zk_2dprover_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxsFieldNumber = 3,
    kGlobalExitRootFieldNumber = 2,
    kPublicInputsFieldNumber = 1,
  };
  // repeated string txs = 3;
  int txs_size() const;
  private:
  int _internal_txs_size() const;
  public:
  void clear_txs();
  const std::string& txs(int index) const;
  std::string* mutable_txs(int index);
  void set_txs(int index, const std::string& value);
  void set_txs(int index, std::string&& value);
  void set_txs(int index, const char* value);
  void set_txs(int index, const char* value, size_t size);
  std::string* add_txs();
  void add_txs(const std::string& value);
  void add_txs(std::string&& value);
  void add_txs(const char* value);
  void add_txs(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& txs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_txs();
  private:
  const std::string& _internal_txs(int index) const;
  std::string* _internal_add_txs();
  public:

  // string global_exit_root = 2;
  void clear_global_exit_root();
  const std::string& global_exit_root() const;
  void set_global_exit_root(const std::string& value);
  void set_global_exit_root(std::string&& value);
  void set_global_exit_root(const char* value);
  void set_global_exit_root(const char* value, size_t size);
  std::string* mutable_global_exit_root();
  std::string* release_global_exit_root();
  void set_allocated_global_exit_root(std::string* global_exit_root);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_global_exit_root();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_global_exit_root(
      std::string* global_exit_root);
  private:
  const std::string& _internal_global_exit_root() const;
  void _internal_set_global_exit_root(const std::string& value);
  std::string* _internal_mutable_global_exit_root();
  public:

  // .zkprover.PublicInputs public_inputs = 1;
  bool has_public_inputs() const;
  private:
  bool _internal_has_public_inputs() const;
  public:
  void clear_public_inputs();
  const ::zkprover::PublicInputs& public_inputs() const;
  ::zkprover::PublicInputs* release_public_inputs();
  ::zkprover::PublicInputs* mutable_public_inputs();
  void set_allocated_public_inputs(::zkprover::PublicInputs* public_inputs);
  private:
  const ::zkprover::PublicInputs& _internal_public_inputs() const;
  ::zkprover::PublicInputs* _internal_mutable_public_inputs();
  public:
  void unsafe_arena_set_allocated_public_inputs(
      ::zkprover::PublicInputs* public_inputs);
  ::zkprover::PublicInputs* unsafe_arena_release_public_inputs();

  // @@protoc_insertion_point(class_scope:zkprover.InputProverExecute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> txs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr global_exit_root_;
  ::zkprover::PublicInputs* public_inputs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zk_2dprover_2eproto;
};
// -------------------------------------------------------------------

class PublicInputsExtended PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zkprover.PublicInputsExtended) */ {
 public:
  inline PublicInputsExtended() : PublicInputsExtended(nullptr) {};
  virtual ~PublicInputsExtended();

  PublicInputsExtended(const PublicInputsExtended& from);
  PublicInputsExtended(PublicInputsExtended&& from) noexcept
    : PublicInputsExtended() {
    *this = ::std::move(from);
  }

  inline PublicInputsExtended& operator=(const PublicInputsExtended& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublicInputsExtended& operator=(PublicInputsExtended&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PublicInputsExtended& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PublicInputsExtended* internal_default_instance() {
    return reinterpret_cast<const PublicInputsExtended*>(
               &_PublicInputsExtended_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(PublicInputsExtended& a, PublicInputsExtended& b) {
    a.Swap(&b);
  }
  inline void Swap(PublicInputsExtended* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublicInputsExtended* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PublicInputsExtended* New() const final {
    return CreateMaybeMessage<PublicInputsExtended>(nullptr);
  }

  PublicInputsExtended* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PublicInputsExtended>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PublicInputsExtended& from);
  void MergeFrom(const PublicInputsExtended& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublicInputsExtended* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zkprover.PublicInputsExtended";
  }
  protected:
  explicit PublicInputsExtended(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zk_2dprover_2eproto);
    return ::descriptor_table_zk_2dprover_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputHashFieldNumber = 2,
    kPublicInputsFieldNumber = 1,
  };
  // string input_hash = 2;
  void clear_input_hash();
  const std::string& input_hash() const;
  void set_input_hash(const std::string& value);
  void set_input_hash(std::string&& value);
  void set_input_hash(const char* value);
  void set_input_hash(const char* value, size_t size);
  std::string* mutable_input_hash();
  std::string* release_input_hash();
  void set_allocated_input_hash(std::string* input_hash);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_input_hash();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_input_hash(
      std::string* input_hash);
  private:
  const std::string& _internal_input_hash() const;
  void _internal_set_input_hash(const std::string& value);
  std::string* _internal_mutable_input_hash();
  public:

  // .zkprover.PublicInputs public_inputs = 1;
  bool has_public_inputs() const;
  private:
  bool _internal_has_public_inputs() const;
  public:
  void clear_public_inputs();
  const ::zkprover::PublicInputs& public_inputs() const;
  ::zkprover::PublicInputs* release_public_inputs();
  ::zkprover::PublicInputs* mutable_public_inputs();
  void set_allocated_public_inputs(::zkprover::PublicInputs* public_inputs);
  private:
  const ::zkprover::PublicInputs& _internal_public_inputs() const;
  ::zkprover::PublicInputs* _internal_mutable_public_inputs();
  public:
  void unsafe_arena_set_allocated_public_inputs(
      ::zkprover::PublicInputs* public_inputs);
  ::zkprover::PublicInputs* unsafe_arena_release_public_inputs();

  // @@protoc_insertion_point(class_scope:zkprover.PublicInputsExtended)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_hash_;
  ::zkprover::PublicInputs* public_inputs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zk_2dprover_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Version

// string v0_0_1 = 1;
inline void Version::clear_v0_0_1() {
  v0_0_1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Version::v0_0_1() const {
  // @@protoc_insertion_point(field_get:zkprover.Version.v0_0_1)
  return _internal_v0_0_1();
}
inline void Version::set_v0_0_1(const std::string& value) {
  _internal_set_v0_0_1(value);
  // @@protoc_insertion_point(field_set:zkprover.Version.v0_0_1)
}
inline std::string* Version::mutable_v0_0_1() {
  // @@protoc_insertion_point(field_mutable:zkprover.Version.v0_0_1)
  return _internal_mutable_v0_0_1();
}
inline const std::string& Version::_internal_v0_0_1() const {
  return v0_0_1_.Get();
}
inline void Version::_internal_set_v0_0_1(const std::string& value) {
  
  v0_0_1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Version::set_v0_0_1(std::string&& value) {
  
  v0_0_1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkprover.Version.v0_0_1)
}
inline void Version::set_v0_0_1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  v0_0_1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkprover.Version.v0_0_1)
}
inline void Version::set_v0_0_1(const char* value,
    size_t size) {
  
  v0_0_1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkprover.Version.v0_0_1)
}
inline std::string* Version::_internal_mutable_v0_0_1() {
  
  return v0_0_1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Version::release_v0_0_1() {
  // @@protoc_insertion_point(field_release:zkprover.Version.v0_0_1)
  return v0_0_1_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Version::set_allocated_v0_0_1(std::string* v0_0_1) {
  if (v0_0_1 != nullptr) {
    
  } else {
    
  }
  v0_0_1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), v0_0_1,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkprover.Version.v0_0_1)
}
inline std::string* Version::unsafe_arena_release_v0_0_1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkprover.Version.v0_0_1)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return v0_0_1_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Version::unsafe_arena_set_allocated_v0_0_1(
    std::string* v0_0_1) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (v0_0_1 != nullptr) {
    
  } else {
    
  }
  v0_0_1_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      v0_0_1, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkprover.Version.v0_0_1)
}

// -------------------------------------------------------------------

// NoParams

// -------------------------------------------------------------------

// RequestId

// string id = 1;
inline void RequestId::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RequestId::id() const {
  // @@protoc_insertion_point(field_get:zkprover.RequestId.id)
  return _internal_id();
}
inline void RequestId::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:zkprover.RequestId.id)
}
inline std::string* RequestId::mutable_id() {
  // @@protoc_insertion_point(field_mutable:zkprover.RequestId.id)
  return _internal_mutable_id();
}
inline const std::string& RequestId::_internal_id() const {
  return id_.Get();
}
inline void RequestId::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RequestId::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkprover.RequestId.id)
}
inline void RequestId::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkprover.RequestId.id)
}
inline void RequestId::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkprover.RequestId.id)
}
inline std::string* RequestId::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RequestId::release_id() {
  // @@protoc_insertion_point(field_release:zkprover.RequestId.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RequestId::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkprover.RequestId.id)
}
inline std::string* RequestId::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkprover.RequestId.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RequestId::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkprover.RequestId.id)
}

// -------------------------------------------------------------------

// ResGetStatus

// .zkprover.ResGetStatus.StatusProver state = 1;
inline void ResGetStatus::clear_state() {
  state_ = 0;
}
inline ::zkprover::ResGetStatus_StatusProver ResGetStatus::_internal_state() const {
  return static_cast< ::zkprover::ResGetStatus_StatusProver >(state_);
}
inline ::zkprover::ResGetStatus_StatusProver ResGetStatus::state() const {
  // @@protoc_insertion_point(field_get:zkprover.ResGetStatus.state)
  return _internal_state();
}
inline void ResGetStatus::_internal_set_state(::zkprover::ResGetStatus_StatusProver value) {
  
  state_ = value;
}
inline void ResGetStatus::set_state(::zkprover::ResGetStatus_StatusProver value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:zkprover.ResGetStatus.state)
}

// string last_computed_request_id = 2;
inline void ResGetStatus::clear_last_computed_request_id() {
  last_computed_request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ResGetStatus::last_computed_request_id() const {
  // @@protoc_insertion_point(field_get:zkprover.ResGetStatus.last_computed_request_id)
  return _internal_last_computed_request_id();
}
inline void ResGetStatus::set_last_computed_request_id(const std::string& value) {
  _internal_set_last_computed_request_id(value);
  // @@protoc_insertion_point(field_set:zkprover.ResGetStatus.last_computed_request_id)
}
inline std::string* ResGetStatus::mutable_last_computed_request_id() {
  // @@protoc_insertion_point(field_mutable:zkprover.ResGetStatus.last_computed_request_id)
  return _internal_mutable_last_computed_request_id();
}
inline const std::string& ResGetStatus::_internal_last_computed_request_id() const {
  return last_computed_request_id_.Get();
}
inline void ResGetStatus::_internal_set_last_computed_request_id(const std::string& value) {
  
  last_computed_request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResGetStatus::set_last_computed_request_id(std::string&& value) {
  
  last_computed_request_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkprover.ResGetStatus.last_computed_request_id)
}
inline void ResGetStatus::set_last_computed_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  last_computed_request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkprover.ResGetStatus.last_computed_request_id)
}
inline void ResGetStatus::set_last_computed_request_id(const char* value,
    size_t size) {
  
  last_computed_request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkprover.ResGetStatus.last_computed_request_id)
}
inline std::string* ResGetStatus::_internal_mutable_last_computed_request_id() {
  
  return last_computed_request_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResGetStatus::release_last_computed_request_id() {
  // @@protoc_insertion_point(field_release:zkprover.ResGetStatus.last_computed_request_id)
  return last_computed_request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResGetStatus::set_allocated_last_computed_request_id(std::string* last_computed_request_id) {
  if (last_computed_request_id != nullptr) {
    
  } else {
    
  }
  last_computed_request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_computed_request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkprover.ResGetStatus.last_computed_request_id)
}
inline std::string* ResGetStatus::unsafe_arena_release_last_computed_request_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkprover.ResGetStatus.last_computed_request_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return last_computed_request_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ResGetStatus::unsafe_arena_set_allocated_last_computed_request_id(
    std::string* last_computed_request_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (last_computed_request_id != nullptr) {
    
  } else {
    
  }
  last_computed_request_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      last_computed_request_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkprover.ResGetStatus.last_computed_request_id)
}

// uint64 last_computed_end_time = 3;
inline void ResGetStatus::clear_last_computed_end_time() {
  last_computed_end_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ResGetStatus::_internal_last_computed_end_time() const {
  return last_computed_end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ResGetStatus::last_computed_end_time() const {
  // @@protoc_insertion_point(field_get:zkprover.ResGetStatus.last_computed_end_time)
  return _internal_last_computed_end_time();
}
inline void ResGetStatus::_internal_set_last_computed_end_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  last_computed_end_time_ = value;
}
inline void ResGetStatus::set_last_computed_end_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_last_computed_end_time(value);
  // @@protoc_insertion_point(field_set:zkprover.ResGetStatus.last_computed_end_time)
}

// string current_computing_request_id = 4;
inline void ResGetStatus::clear_current_computing_request_id() {
  current_computing_request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ResGetStatus::current_computing_request_id() const {
  // @@protoc_insertion_point(field_get:zkprover.ResGetStatus.current_computing_request_id)
  return _internal_current_computing_request_id();
}
inline void ResGetStatus::set_current_computing_request_id(const std::string& value) {
  _internal_set_current_computing_request_id(value);
  // @@protoc_insertion_point(field_set:zkprover.ResGetStatus.current_computing_request_id)
}
inline std::string* ResGetStatus::mutable_current_computing_request_id() {
  // @@protoc_insertion_point(field_mutable:zkprover.ResGetStatus.current_computing_request_id)
  return _internal_mutable_current_computing_request_id();
}
inline const std::string& ResGetStatus::_internal_current_computing_request_id() const {
  return current_computing_request_id_.Get();
}
inline void ResGetStatus::_internal_set_current_computing_request_id(const std::string& value) {
  
  current_computing_request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResGetStatus::set_current_computing_request_id(std::string&& value) {
  
  current_computing_request_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkprover.ResGetStatus.current_computing_request_id)
}
inline void ResGetStatus::set_current_computing_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  current_computing_request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkprover.ResGetStatus.current_computing_request_id)
}
inline void ResGetStatus::set_current_computing_request_id(const char* value,
    size_t size) {
  
  current_computing_request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkprover.ResGetStatus.current_computing_request_id)
}
inline std::string* ResGetStatus::_internal_mutable_current_computing_request_id() {
  
  return current_computing_request_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResGetStatus::release_current_computing_request_id() {
  // @@protoc_insertion_point(field_release:zkprover.ResGetStatus.current_computing_request_id)
  return current_computing_request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResGetStatus::set_allocated_current_computing_request_id(std::string* current_computing_request_id) {
  if (current_computing_request_id != nullptr) {
    
  } else {
    
  }
  current_computing_request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), current_computing_request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkprover.ResGetStatus.current_computing_request_id)
}
inline std::string* ResGetStatus::unsafe_arena_release_current_computing_request_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkprover.ResGetStatus.current_computing_request_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return current_computing_request_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ResGetStatus::unsafe_arena_set_allocated_current_computing_request_id(
    std::string* current_computing_request_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (current_computing_request_id != nullptr) {
    
  } else {
    
  }
  current_computing_request_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      current_computing_request_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkprover.ResGetStatus.current_computing_request_id)
}

// uint64 current_computing_start_time = 5;
inline void ResGetStatus::clear_current_computing_start_time() {
  current_computing_start_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ResGetStatus::_internal_current_computing_start_time() const {
  return current_computing_start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ResGetStatus::current_computing_start_time() const {
  // @@protoc_insertion_point(field_get:zkprover.ResGetStatus.current_computing_start_time)
  return _internal_current_computing_start_time();
}
inline void ResGetStatus::_internal_set_current_computing_start_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  current_computing_start_time_ = value;
}
inline void ResGetStatus::set_current_computing_start_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_current_computing_start_time(value);
  // @@protoc_insertion_point(field_set:zkprover.ResGetStatus.current_computing_start_time)
}

// string version_proto = 6;
inline void ResGetStatus::clear_version_proto() {
  version_proto_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ResGetStatus::version_proto() const {
  // @@protoc_insertion_point(field_get:zkprover.ResGetStatus.version_proto)
  return _internal_version_proto();
}
inline void ResGetStatus::set_version_proto(const std::string& value) {
  _internal_set_version_proto(value);
  // @@protoc_insertion_point(field_set:zkprover.ResGetStatus.version_proto)
}
inline std::string* ResGetStatus::mutable_version_proto() {
  // @@protoc_insertion_point(field_mutable:zkprover.ResGetStatus.version_proto)
  return _internal_mutable_version_proto();
}
inline const std::string& ResGetStatus::_internal_version_proto() const {
  return version_proto_.Get();
}
inline void ResGetStatus::_internal_set_version_proto(const std::string& value) {
  
  version_proto_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResGetStatus::set_version_proto(std::string&& value) {
  
  version_proto_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkprover.ResGetStatus.version_proto)
}
inline void ResGetStatus::set_version_proto(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_proto_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkprover.ResGetStatus.version_proto)
}
inline void ResGetStatus::set_version_proto(const char* value,
    size_t size) {
  
  version_proto_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkprover.ResGetStatus.version_proto)
}
inline std::string* ResGetStatus::_internal_mutable_version_proto() {
  
  return version_proto_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResGetStatus::release_version_proto() {
  // @@protoc_insertion_point(field_release:zkprover.ResGetStatus.version_proto)
  return version_proto_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResGetStatus::set_allocated_version_proto(std::string* version_proto) {
  if (version_proto != nullptr) {
    
  } else {
    
  }
  version_proto_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version_proto,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkprover.ResGetStatus.version_proto)
}
inline std::string* ResGetStatus::unsafe_arena_release_version_proto() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkprover.ResGetStatus.version_proto)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return version_proto_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ResGetStatus::unsafe_arena_set_allocated_version_proto(
    std::string* version_proto) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (version_proto != nullptr) {
    
  } else {
    
  }
  version_proto_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      version_proto, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkprover.ResGetStatus.version_proto)
}

// string version_server = 7;
inline void ResGetStatus::clear_version_server() {
  version_server_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ResGetStatus::version_server() const {
  // @@protoc_insertion_point(field_get:zkprover.ResGetStatus.version_server)
  return _internal_version_server();
}
inline void ResGetStatus::set_version_server(const std::string& value) {
  _internal_set_version_server(value);
  // @@protoc_insertion_point(field_set:zkprover.ResGetStatus.version_server)
}
inline std::string* ResGetStatus::mutable_version_server() {
  // @@protoc_insertion_point(field_mutable:zkprover.ResGetStatus.version_server)
  return _internal_mutable_version_server();
}
inline const std::string& ResGetStatus::_internal_version_server() const {
  return version_server_.Get();
}
inline void ResGetStatus::_internal_set_version_server(const std::string& value) {
  
  version_server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResGetStatus::set_version_server(std::string&& value) {
  
  version_server_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkprover.ResGetStatus.version_server)
}
inline void ResGetStatus::set_version_server(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkprover.ResGetStatus.version_server)
}
inline void ResGetStatus::set_version_server(const char* value,
    size_t size) {
  
  version_server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkprover.ResGetStatus.version_server)
}
inline std::string* ResGetStatus::_internal_mutable_version_server() {
  
  return version_server_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResGetStatus::release_version_server() {
  // @@protoc_insertion_point(field_release:zkprover.ResGetStatus.version_server)
  return version_server_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResGetStatus::set_allocated_version_server(std::string* version_server) {
  if (version_server != nullptr) {
    
  } else {
    
  }
  version_server_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version_server,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkprover.ResGetStatus.version_server)
}
inline std::string* ResGetStatus::unsafe_arena_release_version_server() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkprover.ResGetStatus.version_server)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return version_server_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ResGetStatus::unsafe_arena_set_allocated_version_server(
    std::string* version_server) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (version_server != nullptr) {
    
  } else {
    
  }
  version_server_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      version_server, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkprover.ResGetStatus.version_server)
}

// repeated string pending_request_queue_ids = 8;
inline int ResGetStatus::_internal_pending_request_queue_ids_size() const {
  return pending_request_queue_ids_.size();
}
inline int ResGetStatus::pending_request_queue_ids_size() const {
  return _internal_pending_request_queue_ids_size();
}
inline void ResGetStatus::clear_pending_request_queue_ids() {
  pending_request_queue_ids_.Clear();
}
inline std::string* ResGetStatus::add_pending_request_queue_ids() {
  // @@protoc_insertion_point(field_add_mutable:zkprover.ResGetStatus.pending_request_queue_ids)
  return _internal_add_pending_request_queue_ids();
}
inline const std::string& ResGetStatus::_internal_pending_request_queue_ids(int index) const {
  return pending_request_queue_ids_.Get(index);
}
inline const std::string& ResGetStatus::pending_request_queue_ids(int index) const {
  // @@protoc_insertion_point(field_get:zkprover.ResGetStatus.pending_request_queue_ids)
  return _internal_pending_request_queue_ids(index);
}
inline std::string* ResGetStatus::mutable_pending_request_queue_ids(int index) {
  // @@protoc_insertion_point(field_mutable:zkprover.ResGetStatus.pending_request_queue_ids)
  return pending_request_queue_ids_.Mutable(index);
}
inline void ResGetStatus::set_pending_request_queue_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:zkprover.ResGetStatus.pending_request_queue_ids)
  pending_request_queue_ids_.Mutable(index)->assign(value);
}
inline void ResGetStatus::set_pending_request_queue_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:zkprover.ResGetStatus.pending_request_queue_ids)
  pending_request_queue_ids_.Mutable(index)->assign(std::move(value));
}
inline void ResGetStatus::set_pending_request_queue_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  pending_request_queue_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zkprover.ResGetStatus.pending_request_queue_ids)
}
inline void ResGetStatus::set_pending_request_queue_ids(int index, const char* value, size_t size) {
  pending_request_queue_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zkprover.ResGetStatus.pending_request_queue_ids)
}
inline std::string* ResGetStatus::_internal_add_pending_request_queue_ids() {
  return pending_request_queue_ids_.Add();
}
inline void ResGetStatus::add_pending_request_queue_ids(const std::string& value) {
  pending_request_queue_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zkprover.ResGetStatus.pending_request_queue_ids)
}
inline void ResGetStatus::add_pending_request_queue_ids(std::string&& value) {
  pending_request_queue_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zkprover.ResGetStatus.pending_request_queue_ids)
}
inline void ResGetStatus::add_pending_request_queue_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  pending_request_queue_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zkprover.ResGetStatus.pending_request_queue_ids)
}
inline void ResGetStatus::add_pending_request_queue_ids(const char* value, size_t size) {
  pending_request_queue_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zkprover.ResGetStatus.pending_request_queue_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ResGetStatus::pending_request_queue_ids() const {
  // @@protoc_insertion_point(field_list:zkprover.ResGetStatus.pending_request_queue_ids)
  return pending_request_queue_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ResGetStatus::mutable_pending_request_queue_ids() {
  // @@protoc_insertion_point(field_mutable_list:zkprover.ResGetStatus.pending_request_queue_ids)
  return &pending_request_queue_ids_;
}

// -------------------------------------------------------------------

// ResGenProof

// string id = 1;
inline void ResGenProof::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ResGenProof::id() const {
  // @@protoc_insertion_point(field_get:zkprover.ResGenProof.id)
  return _internal_id();
}
inline void ResGenProof::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:zkprover.ResGenProof.id)
}
inline std::string* ResGenProof::mutable_id() {
  // @@protoc_insertion_point(field_mutable:zkprover.ResGenProof.id)
  return _internal_mutable_id();
}
inline const std::string& ResGenProof::_internal_id() const {
  return id_.Get();
}
inline void ResGenProof::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResGenProof::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkprover.ResGenProof.id)
}
inline void ResGenProof::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkprover.ResGenProof.id)
}
inline void ResGenProof::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkprover.ResGenProof.id)
}
inline std::string* ResGenProof::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResGenProof::release_id() {
  // @@protoc_insertion_point(field_release:zkprover.ResGenProof.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResGenProof::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkprover.ResGenProof.id)
}
inline std::string* ResGenProof::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkprover.ResGenProof.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ResGenProof::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkprover.ResGenProof.id)
}

// .zkprover.ResGenProof.ResultGenProof result = 2;
inline void ResGenProof::clear_result() {
  result_ = 0;
}
inline ::zkprover::ResGenProof_ResultGenProof ResGenProof::_internal_result() const {
  return static_cast< ::zkprover::ResGenProof_ResultGenProof >(result_);
}
inline ::zkprover::ResGenProof_ResultGenProof ResGenProof::result() const {
  // @@protoc_insertion_point(field_get:zkprover.ResGenProof.result)
  return _internal_result();
}
inline void ResGenProof::_internal_set_result(::zkprover::ResGenProof_ResultGenProof value) {
  
  result_ = value;
}
inline void ResGenProof::set_result(::zkprover::ResGenProof_ResultGenProof value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:zkprover.ResGenProof.result)
}

// -------------------------------------------------------------------

// ResCancel

// .zkprover.ResCancel.ResultCancel result = 1;
inline void ResCancel::clear_result() {
  result_ = 0;
}
inline ::zkprover::ResCancel_ResultCancel ResCancel::_internal_result() const {
  return static_cast< ::zkprover::ResCancel_ResultCancel >(result_);
}
inline ::zkprover::ResCancel_ResultCancel ResCancel::result() const {
  // @@protoc_insertion_point(field_get:zkprover.ResCancel.result)
  return _internal_result();
}
inline void ResCancel::_internal_set_result(::zkprover::ResCancel_ResultCancel value) {
  
  result_ = value;
}
inline void ResCancel::set_result(::zkprover::ResCancel_ResultCancel value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:zkprover.ResCancel.result)
}

// -------------------------------------------------------------------

// ResGetProof

// string id = 1;
inline void ResGetProof::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ResGetProof::id() const {
  // @@protoc_insertion_point(field_get:zkprover.ResGetProof.id)
  return _internal_id();
}
inline void ResGetProof::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:zkprover.ResGetProof.id)
}
inline std::string* ResGetProof::mutable_id() {
  // @@protoc_insertion_point(field_mutable:zkprover.ResGetProof.id)
  return _internal_mutable_id();
}
inline const std::string& ResGetProof::_internal_id() const {
  return id_.Get();
}
inline void ResGetProof::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResGetProof::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkprover.ResGetProof.id)
}
inline void ResGetProof::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkprover.ResGetProof.id)
}
inline void ResGetProof::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkprover.ResGetProof.id)
}
inline std::string* ResGetProof::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResGetProof::release_id() {
  // @@protoc_insertion_point(field_release:zkprover.ResGetProof.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResGetProof::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkprover.ResGetProof.id)
}
inline std::string* ResGetProof::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkprover.ResGetProof.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ResGetProof::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkprover.ResGetProof.id)
}

// .zkprover.Proof proof = 2;
inline bool ResGetProof::_internal_has_proof() const {
  return this != internal_default_instance() && proof_ != nullptr;
}
inline bool ResGetProof::has_proof() const {
  return _internal_has_proof();
}
inline void ResGetProof::clear_proof() {
  if (GetArena() == nullptr && proof_ != nullptr) {
    delete proof_;
  }
  proof_ = nullptr;
}
inline const ::zkprover::Proof& ResGetProof::_internal_proof() const {
  const ::zkprover::Proof* p = proof_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zkprover::Proof*>(
      &::zkprover::_Proof_default_instance_);
}
inline const ::zkprover::Proof& ResGetProof::proof() const {
  // @@protoc_insertion_point(field_get:zkprover.ResGetProof.proof)
  return _internal_proof();
}
inline void ResGetProof::unsafe_arena_set_allocated_proof(
    ::zkprover::Proof* proof) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proof_);
  }
  proof_ = proof;
  if (proof) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkprover.ResGetProof.proof)
}
inline ::zkprover::Proof* ResGetProof::release_proof() {
  auto temp = unsafe_arena_release_proof();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zkprover::Proof* ResGetProof::unsafe_arena_release_proof() {
  // @@protoc_insertion_point(field_release:zkprover.ResGetProof.proof)
  
  ::zkprover::Proof* temp = proof_;
  proof_ = nullptr;
  return temp;
}
inline ::zkprover::Proof* ResGetProof::_internal_mutable_proof() {
  
  if (proof_ == nullptr) {
    auto* p = CreateMaybeMessage<::zkprover::Proof>(GetArena());
    proof_ = p;
  }
  return proof_;
}
inline ::zkprover::Proof* ResGetProof::mutable_proof() {
  // @@protoc_insertion_point(field_mutable:zkprover.ResGetProof.proof)
  return _internal_mutable_proof();
}
inline void ResGetProof::set_allocated_proof(::zkprover::Proof* proof) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete proof_;
  }
  if (proof) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(proof);
    if (message_arena != submessage_arena) {
      proof = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proof, submessage_arena);
    }
    
  } else {
    
  }
  proof_ = proof;
  // @@protoc_insertion_point(field_set_allocated:zkprover.ResGetProof.proof)
}

// .zkprover.PublicInputsExtended public = 3;
inline bool ResGetProof::_internal_has_public_() const {
  return this != internal_default_instance() && public__ != nullptr;
}
inline bool ResGetProof::has_public_() const {
  return _internal_has_public_();
}
inline void ResGetProof::clear_public_() {
  if (GetArena() == nullptr && public__ != nullptr) {
    delete public__;
  }
  public__ = nullptr;
}
inline const ::zkprover::PublicInputsExtended& ResGetProof::_internal_public_() const {
  const ::zkprover::PublicInputsExtended* p = public__;
  return p != nullptr ? *p : *reinterpret_cast<const ::zkprover::PublicInputsExtended*>(
      &::zkprover::_PublicInputsExtended_default_instance_);
}
inline const ::zkprover::PublicInputsExtended& ResGetProof::public_() const {
  // @@protoc_insertion_point(field_get:zkprover.ResGetProof.public)
  return _internal_public_();
}
inline void ResGetProof::unsafe_arena_set_allocated_public_(
    ::zkprover::PublicInputsExtended* public_) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(public__);
  }
  public__ = public_;
  if (public_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkprover.ResGetProof.public)
}
inline ::zkprover::PublicInputsExtended* ResGetProof::release_public_() {
  auto temp = unsafe_arena_release_public_();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zkprover::PublicInputsExtended* ResGetProof::unsafe_arena_release_public_() {
  // @@protoc_insertion_point(field_release:zkprover.ResGetProof.public)
  
  ::zkprover::PublicInputsExtended* temp = public__;
  public__ = nullptr;
  return temp;
}
inline ::zkprover::PublicInputsExtended* ResGetProof::_internal_mutable_public_() {
  
  if (public__ == nullptr) {
    auto* p = CreateMaybeMessage<::zkprover::PublicInputsExtended>(GetArena());
    public__ = p;
  }
  return public__;
}
inline ::zkprover::PublicInputsExtended* ResGetProof::mutable_public_() {
  // @@protoc_insertion_point(field_mutable:zkprover.ResGetProof.public)
  return _internal_mutable_public_();
}
inline void ResGetProof::set_allocated_public_(::zkprover::PublicInputsExtended* public_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete public__;
  }
  if (public_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(public_);
    if (message_arena != submessage_arena) {
      public_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, public_, submessage_arena);
    }
    
  } else {
    
  }
  public__ = public_;
  // @@protoc_insertion_point(field_set_allocated:zkprover.ResGetProof.public)
}

// .zkprover.ResGetProof.ResultGetProof result = 4;
inline void ResGetProof::clear_result() {
  result_ = 0;
}
inline ::zkprover::ResGetProof_ResultGetProof ResGetProof::_internal_result() const {
  return static_cast< ::zkprover::ResGetProof_ResultGetProof >(result_);
}
inline ::zkprover::ResGetProof_ResultGetProof ResGetProof::result() const {
  // @@protoc_insertion_point(field_get:zkprover.ResGetProof.result)
  return _internal_result();
}
inline void ResGetProof::_internal_set_result(::zkprover::ResGetProof_ResultGetProof value) {
  
  result_ = value;
}
inline void ResGetProof::set_result(::zkprover::ResGetProof_ResultGetProof value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:zkprover.ResGetProof.result)
}

// string result_string = 5;
inline void ResGetProof::clear_result_string() {
  result_string_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ResGetProof::result_string() const {
  // @@protoc_insertion_point(field_get:zkprover.ResGetProof.result_string)
  return _internal_result_string();
}
inline void ResGetProof::set_result_string(const std::string& value) {
  _internal_set_result_string(value);
  // @@protoc_insertion_point(field_set:zkprover.ResGetProof.result_string)
}
inline std::string* ResGetProof::mutable_result_string() {
  // @@protoc_insertion_point(field_mutable:zkprover.ResGetProof.result_string)
  return _internal_mutable_result_string();
}
inline const std::string& ResGetProof::_internal_result_string() const {
  return result_string_.Get();
}
inline void ResGetProof::_internal_set_result_string(const std::string& value) {
  
  result_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResGetProof::set_result_string(std::string&& value) {
  
  result_string_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkprover.ResGetProof.result_string)
}
inline void ResGetProof::set_result_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkprover.ResGetProof.result_string)
}
inline void ResGetProof::set_result_string(const char* value,
    size_t size) {
  
  result_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkprover.ResGetProof.result_string)
}
inline std::string* ResGetProof::_internal_mutable_result_string() {
  
  return result_string_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResGetProof::release_result_string() {
  // @@protoc_insertion_point(field_release:zkprover.ResGetProof.result_string)
  return result_string_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResGetProof::set_allocated_result_string(std::string* result_string) {
  if (result_string != nullptr) {
    
  } else {
    
  }
  result_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result_string,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkprover.ResGetProof.result_string)
}
inline std::string* ResGetProof::unsafe_arena_release_result_string() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkprover.ResGetProof.result_string)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return result_string_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ResGetProof::unsafe_arena_set_allocated_result_string(
    std::string* result_string) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (result_string != nullptr) {
    
  } else {
    
  }
  result_string_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      result_string, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkprover.ResGetProof.result_string)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ResExecute

// map<string, string> diff_keys_values = 1;
inline int ResExecute::_internal_diff_keys_values_size() const {
  return diff_keys_values_.size();
}
inline int ResExecute::diff_keys_values_size() const {
  return _internal_diff_keys_values_size();
}
inline void ResExecute::clear_diff_keys_values() {
  diff_keys_values_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ResExecute::_internal_diff_keys_values() const {
  return diff_keys_values_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ResExecute::diff_keys_values() const {
  // @@protoc_insertion_point(field_map:zkprover.ResExecute.diff_keys_values)
  return _internal_diff_keys_values();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ResExecute::_internal_mutable_diff_keys_values() {
  return diff_keys_values_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ResExecute::mutable_diff_keys_values() {
  // @@protoc_insertion_point(field_mutable_map:zkprover.ResExecute.diff_keys_values)
  return _internal_mutable_diff_keys_values();
}

// string new_state_root = 2;
inline void ResExecute::clear_new_state_root() {
  new_state_root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ResExecute::new_state_root() const {
  // @@protoc_insertion_point(field_get:zkprover.ResExecute.new_state_root)
  return _internal_new_state_root();
}
inline void ResExecute::set_new_state_root(const std::string& value) {
  _internal_set_new_state_root(value);
  // @@protoc_insertion_point(field_set:zkprover.ResExecute.new_state_root)
}
inline std::string* ResExecute::mutable_new_state_root() {
  // @@protoc_insertion_point(field_mutable:zkprover.ResExecute.new_state_root)
  return _internal_mutable_new_state_root();
}
inline const std::string& ResExecute::_internal_new_state_root() const {
  return new_state_root_.Get();
}
inline void ResExecute::_internal_set_new_state_root(const std::string& value) {
  
  new_state_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResExecute::set_new_state_root(std::string&& value) {
  
  new_state_root_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkprover.ResExecute.new_state_root)
}
inline void ResExecute::set_new_state_root(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  new_state_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkprover.ResExecute.new_state_root)
}
inline void ResExecute::set_new_state_root(const char* value,
    size_t size) {
  
  new_state_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkprover.ResExecute.new_state_root)
}
inline std::string* ResExecute::_internal_mutable_new_state_root() {
  
  return new_state_root_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResExecute::release_new_state_root() {
  // @@protoc_insertion_point(field_release:zkprover.ResExecute.new_state_root)
  return new_state_root_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResExecute::set_allocated_new_state_root(std::string* new_state_root) {
  if (new_state_root != nullptr) {
    
  } else {
    
  }
  new_state_root_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), new_state_root,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkprover.ResExecute.new_state_root)
}
inline std::string* ResExecute::unsafe_arena_release_new_state_root() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkprover.ResExecute.new_state_root)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return new_state_root_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ResExecute::unsafe_arena_set_allocated_new_state_root(
    std::string* new_state_root) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (new_state_root != nullptr) {
    
  } else {
    
  }
  new_state_root_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      new_state_root, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkprover.ResExecute.new_state_root)
}

// .zkprover.ZkCounters counters = 3;
inline bool ResExecute::_internal_has_counters() const {
  return this != internal_default_instance() && counters_ != nullptr;
}
inline bool ResExecute::has_counters() const {
  return _internal_has_counters();
}
inline void ResExecute::clear_counters() {
  if (GetArena() == nullptr && counters_ != nullptr) {
    delete counters_;
  }
  counters_ = nullptr;
}
inline const ::zkprover::ZkCounters& ResExecute::_internal_counters() const {
  const ::zkprover::ZkCounters* p = counters_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zkprover::ZkCounters*>(
      &::zkprover::_ZkCounters_default_instance_);
}
inline const ::zkprover::ZkCounters& ResExecute::counters() const {
  // @@protoc_insertion_point(field_get:zkprover.ResExecute.counters)
  return _internal_counters();
}
inline void ResExecute::unsafe_arena_set_allocated_counters(
    ::zkprover::ZkCounters* counters) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(counters_);
  }
  counters_ = counters;
  if (counters) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkprover.ResExecute.counters)
}
inline ::zkprover::ZkCounters* ResExecute::release_counters() {
  auto temp = unsafe_arena_release_counters();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zkprover::ZkCounters* ResExecute::unsafe_arena_release_counters() {
  // @@protoc_insertion_point(field_release:zkprover.ResExecute.counters)
  
  ::zkprover::ZkCounters* temp = counters_;
  counters_ = nullptr;
  return temp;
}
inline ::zkprover::ZkCounters* ResExecute::_internal_mutable_counters() {
  
  if (counters_ == nullptr) {
    auto* p = CreateMaybeMessage<::zkprover::ZkCounters>(GetArena());
    counters_ = p;
  }
  return counters_;
}
inline ::zkprover::ZkCounters* ResExecute::mutable_counters() {
  // @@protoc_insertion_point(field_mutable:zkprover.ResExecute.counters)
  return _internal_mutable_counters();
}
inline void ResExecute::set_allocated_counters(::zkprover::ZkCounters* counters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete counters_;
  }
  if (counters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(counters);
    if (message_arena != submessage_arena) {
      counters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, counters, submessage_arena);
    }
    
  } else {
    
  }
  counters_ = counters;
  // @@protoc_insertion_point(field_set_allocated:zkprover.ResExecute.counters)
}

// repeated string receipts = 4;
inline int ResExecute::_internal_receipts_size() const {
  return receipts_.size();
}
inline int ResExecute::receipts_size() const {
  return _internal_receipts_size();
}
inline void ResExecute::clear_receipts() {
  receipts_.Clear();
}
inline std::string* ResExecute::add_receipts() {
  // @@protoc_insertion_point(field_add_mutable:zkprover.ResExecute.receipts)
  return _internal_add_receipts();
}
inline const std::string& ResExecute::_internal_receipts(int index) const {
  return receipts_.Get(index);
}
inline const std::string& ResExecute::receipts(int index) const {
  // @@protoc_insertion_point(field_get:zkprover.ResExecute.receipts)
  return _internal_receipts(index);
}
inline std::string* ResExecute::mutable_receipts(int index) {
  // @@protoc_insertion_point(field_mutable:zkprover.ResExecute.receipts)
  return receipts_.Mutable(index);
}
inline void ResExecute::set_receipts(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:zkprover.ResExecute.receipts)
  receipts_.Mutable(index)->assign(value);
}
inline void ResExecute::set_receipts(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:zkprover.ResExecute.receipts)
  receipts_.Mutable(index)->assign(std::move(value));
}
inline void ResExecute::set_receipts(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  receipts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zkprover.ResExecute.receipts)
}
inline void ResExecute::set_receipts(int index, const char* value, size_t size) {
  receipts_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zkprover.ResExecute.receipts)
}
inline std::string* ResExecute::_internal_add_receipts() {
  return receipts_.Add();
}
inline void ResExecute::add_receipts(const std::string& value) {
  receipts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zkprover.ResExecute.receipts)
}
inline void ResExecute::add_receipts(std::string&& value) {
  receipts_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zkprover.ResExecute.receipts)
}
inline void ResExecute::add_receipts(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  receipts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zkprover.ResExecute.receipts)
}
inline void ResExecute::add_receipts(const char* value, size_t size) {
  receipts_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zkprover.ResExecute.receipts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ResExecute::receipts() const {
  // @@protoc_insertion_point(field_list:zkprover.ResExecute.receipts)
  return receipts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ResExecute::mutable_receipts() {
  // @@protoc_insertion_point(field_mutable_list:zkprover.ResExecute.receipts)
  return &receipts_;
}

// repeated string logs = 5;
inline int ResExecute::_internal_logs_size() const {
  return logs_.size();
}
inline int ResExecute::logs_size() const {
  return _internal_logs_size();
}
inline void ResExecute::clear_logs() {
  logs_.Clear();
}
inline std::string* ResExecute::add_logs() {
  // @@protoc_insertion_point(field_add_mutable:zkprover.ResExecute.logs)
  return _internal_add_logs();
}
inline const std::string& ResExecute::_internal_logs(int index) const {
  return logs_.Get(index);
}
inline const std::string& ResExecute::logs(int index) const {
  // @@protoc_insertion_point(field_get:zkprover.ResExecute.logs)
  return _internal_logs(index);
}
inline std::string* ResExecute::mutable_logs(int index) {
  // @@protoc_insertion_point(field_mutable:zkprover.ResExecute.logs)
  return logs_.Mutable(index);
}
inline void ResExecute::set_logs(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:zkprover.ResExecute.logs)
  logs_.Mutable(index)->assign(value);
}
inline void ResExecute::set_logs(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:zkprover.ResExecute.logs)
  logs_.Mutable(index)->assign(std::move(value));
}
inline void ResExecute::set_logs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  logs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zkprover.ResExecute.logs)
}
inline void ResExecute::set_logs(int index, const char* value, size_t size) {
  logs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zkprover.ResExecute.logs)
}
inline std::string* ResExecute::_internal_add_logs() {
  return logs_.Add();
}
inline void ResExecute::add_logs(const std::string& value) {
  logs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zkprover.ResExecute.logs)
}
inline void ResExecute::add_logs(std::string&& value) {
  logs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zkprover.ResExecute.logs)
}
inline void ResExecute::add_logs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  logs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zkprover.ResExecute.logs)
}
inline void ResExecute::add_logs(const char* value, size_t size) {
  logs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zkprover.ResExecute.logs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ResExecute::logs() const {
  // @@protoc_insertion_point(field_list:zkprover.ResExecute.logs)
  return logs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ResExecute::mutable_logs() {
  // @@protoc_insertion_point(field_mutable_list:zkprover.ResExecute.logs)
  return &logs_;
}

// -------------------------------------------------------------------

// ZkCounters

// uint32 ecrecover = 1;
inline void ZkCounters::clear_ecrecover() {
  ecrecover_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ZkCounters::_internal_ecrecover() const {
  return ecrecover_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ZkCounters::ecrecover() const {
  // @@protoc_insertion_point(field_get:zkprover.ZkCounters.ecrecover)
  return _internal_ecrecover();
}
inline void ZkCounters::_internal_set_ecrecover(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ecrecover_ = value;
}
inline void ZkCounters::set_ecrecover(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ecrecover(value);
  // @@protoc_insertion_point(field_set:zkprover.ZkCounters.ecrecover)
}

// uint32 hash_poseidon = 2;
inline void ZkCounters::clear_hash_poseidon() {
  hash_poseidon_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ZkCounters::_internal_hash_poseidon() const {
  return hash_poseidon_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ZkCounters::hash_poseidon() const {
  // @@protoc_insertion_point(field_get:zkprover.ZkCounters.hash_poseidon)
  return _internal_hash_poseidon();
}
inline void ZkCounters::_internal_set_hash_poseidon(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  hash_poseidon_ = value;
}
inline void ZkCounters::set_hash_poseidon(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hash_poseidon(value);
  // @@protoc_insertion_point(field_set:zkprover.ZkCounters.hash_poseidon)
}

// uint32 hash_keccak = 3;
inline void ZkCounters::clear_hash_keccak() {
  hash_keccak_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ZkCounters::_internal_hash_keccak() const {
  return hash_keccak_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ZkCounters::hash_keccak() const {
  // @@protoc_insertion_point(field_get:zkprover.ZkCounters.hash_keccak)
  return _internal_hash_keccak();
}
inline void ZkCounters::_internal_set_hash_keccak(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  hash_keccak_ = value;
}
inline void ZkCounters::set_hash_keccak(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hash_keccak(value);
  // @@protoc_insertion_point(field_set:zkprover.ZkCounters.hash_keccak)
}

// uint32 arith = 4;
inline void ZkCounters::clear_arith() {
  arith_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ZkCounters::_internal_arith() const {
  return arith_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ZkCounters::arith() const {
  // @@protoc_insertion_point(field_get:zkprover.ZkCounters.arith)
  return _internal_arith();
}
inline void ZkCounters::_internal_set_arith(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  arith_ = value;
}
inline void ZkCounters::set_arith(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_arith(value);
  // @@protoc_insertion_point(field_set:zkprover.ZkCounters.arith)
}

// -------------------------------------------------------------------

// PublicInputs

// string old_state_root = 1;
inline void PublicInputs::clear_old_state_root() {
  old_state_root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PublicInputs::old_state_root() const {
  // @@protoc_insertion_point(field_get:zkprover.PublicInputs.old_state_root)
  return _internal_old_state_root();
}
inline void PublicInputs::set_old_state_root(const std::string& value) {
  _internal_set_old_state_root(value);
  // @@protoc_insertion_point(field_set:zkprover.PublicInputs.old_state_root)
}
inline std::string* PublicInputs::mutable_old_state_root() {
  // @@protoc_insertion_point(field_mutable:zkprover.PublicInputs.old_state_root)
  return _internal_mutable_old_state_root();
}
inline const std::string& PublicInputs::_internal_old_state_root() const {
  return old_state_root_.Get();
}
inline void PublicInputs::_internal_set_old_state_root(const std::string& value) {
  
  old_state_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PublicInputs::set_old_state_root(std::string&& value) {
  
  old_state_root_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkprover.PublicInputs.old_state_root)
}
inline void PublicInputs::set_old_state_root(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  old_state_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkprover.PublicInputs.old_state_root)
}
inline void PublicInputs::set_old_state_root(const char* value,
    size_t size) {
  
  old_state_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkprover.PublicInputs.old_state_root)
}
inline std::string* PublicInputs::_internal_mutable_old_state_root() {
  
  return old_state_root_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PublicInputs::release_old_state_root() {
  // @@protoc_insertion_point(field_release:zkprover.PublicInputs.old_state_root)
  return old_state_root_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PublicInputs::set_allocated_old_state_root(std::string* old_state_root) {
  if (old_state_root != nullptr) {
    
  } else {
    
  }
  old_state_root_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), old_state_root,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkprover.PublicInputs.old_state_root)
}
inline std::string* PublicInputs::unsafe_arena_release_old_state_root() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkprover.PublicInputs.old_state_root)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return old_state_root_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PublicInputs::unsafe_arena_set_allocated_old_state_root(
    std::string* old_state_root) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (old_state_root != nullptr) {
    
  } else {
    
  }
  old_state_root_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      old_state_root, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkprover.PublicInputs.old_state_root)
}

// string old_local_exit_root = 2;
inline void PublicInputs::clear_old_local_exit_root() {
  old_local_exit_root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PublicInputs::old_local_exit_root() const {
  // @@protoc_insertion_point(field_get:zkprover.PublicInputs.old_local_exit_root)
  return _internal_old_local_exit_root();
}
inline void PublicInputs::set_old_local_exit_root(const std::string& value) {
  _internal_set_old_local_exit_root(value);
  // @@protoc_insertion_point(field_set:zkprover.PublicInputs.old_local_exit_root)
}
inline std::string* PublicInputs::mutable_old_local_exit_root() {
  // @@protoc_insertion_point(field_mutable:zkprover.PublicInputs.old_local_exit_root)
  return _internal_mutable_old_local_exit_root();
}
inline const std::string& PublicInputs::_internal_old_local_exit_root() const {
  return old_local_exit_root_.Get();
}
inline void PublicInputs::_internal_set_old_local_exit_root(const std::string& value) {
  
  old_local_exit_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PublicInputs::set_old_local_exit_root(std::string&& value) {
  
  old_local_exit_root_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkprover.PublicInputs.old_local_exit_root)
}
inline void PublicInputs::set_old_local_exit_root(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  old_local_exit_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkprover.PublicInputs.old_local_exit_root)
}
inline void PublicInputs::set_old_local_exit_root(const char* value,
    size_t size) {
  
  old_local_exit_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkprover.PublicInputs.old_local_exit_root)
}
inline std::string* PublicInputs::_internal_mutable_old_local_exit_root() {
  
  return old_local_exit_root_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PublicInputs::release_old_local_exit_root() {
  // @@protoc_insertion_point(field_release:zkprover.PublicInputs.old_local_exit_root)
  return old_local_exit_root_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PublicInputs::set_allocated_old_local_exit_root(std::string* old_local_exit_root) {
  if (old_local_exit_root != nullptr) {
    
  } else {
    
  }
  old_local_exit_root_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), old_local_exit_root,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkprover.PublicInputs.old_local_exit_root)
}
inline std::string* PublicInputs::unsafe_arena_release_old_local_exit_root() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkprover.PublicInputs.old_local_exit_root)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return old_local_exit_root_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PublicInputs::unsafe_arena_set_allocated_old_local_exit_root(
    std::string* old_local_exit_root) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (old_local_exit_root != nullptr) {
    
  } else {
    
  }
  old_local_exit_root_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      old_local_exit_root, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkprover.PublicInputs.old_local_exit_root)
}

// string new_state_root = 3;
inline void PublicInputs::clear_new_state_root() {
  new_state_root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PublicInputs::new_state_root() const {
  // @@protoc_insertion_point(field_get:zkprover.PublicInputs.new_state_root)
  return _internal_new_state_root();
}
inline void PublicInputs::set_new_state_root(const std::string& value) {
  _internal_set_new_state_root(value);
  // @@protoc_insertion_point(field_set:zkprover.PublicInputs.new_state_root)
}
inline std::string* PublicInputs::mutable_new_state_root() {
  // @@protoc_insertion_point(field_mutable:zkprover.PublicInputs.new_state_root)
  return _internal_mutable_new_state_root();
}
inline const std::string& PublicInputs::_internal_new_state_root() const {
  return new_state_root_.Get();
}
inline void PublicInputs::_internal_set_new_state_root(const std::string& value) {
  
  new_state_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PublicInputs::set_new_state_root(std::string&& value) {
  
  new_state_root_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkprover.PublicInputs.new_state_root)
}
inline void PublicInputs::set_new_state_root(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  new_state_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkprover.PublicInputs.new_state_root)
}
inline void PublicInputs::set_new_state_root(const char* value,
    size_t size) {
  
  new_state_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkprover.PublicInputs.new_state_root)
}
inline std::string* PublicInputs::_internal_mutable_new_state_root() {
  
  return new_state_root_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PublicInputs::release_new_state_root() {
  // @@protoc_insertion_point(field_release:zkprover.PublicInputs.new_state_root)
  return new_state_root_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PublicInputs::set_allocated_new_state_root(std::string* new_state_root) {
  if (new_state_root != nullptr) {
    
  } else {
    
  }
  new_state_root_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), new_state_root,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkprover.PublicInputs.new_state_root)
}
inline std::string* PublicInputs::unsafe_arena_release_new_state_root() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkprover.PublicInputs.new_state_root)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return new_state_root_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PublicInputs::unsafe_arena_set_allocated_new_state_root(
    std::string* new_state_root) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (new_state_root != nullptr) {
    
  } else {
    
  }
  new_state_root_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      new_state_root, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkprover.PublicInputs.new_state_root)
}

// string new_local_exit_root = 4;
inline void PublicInputs::clear_new_local_exit_root() {
  new_local_exit_root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PublicInputs::new_local_exit_root() const {
  // @@protoc_insertion_point(field_get:zkprover.PublicInputs.new_local_exit_root)
  return _internal_new_local_exit_root();
}
inline void PublicInputs::set_new_local_exit_root(const std::string& value) {
  _internal_set_new_local_exit_root(value);
  // @@protoc_insertion_point(field_set:zkprover.PublicInputs.new_local_exit_root)
}
inline std::string* PublicInputs::mutable_new_local_exit_root() {
  // @@protoc_insertion_point(field_mutable:zkprover.PublicInputs.new_local_exit_root)
  return _internal_mutable_new_local_exit_root();
}
inline const std::string& PublicInputs::_internal_new_local_exit_root() const {
  return new_local_exit_root_.Get();
}
inline void PublicInputs::_internal_set_new_local_exit_root(const std::string& value) {
  
  new_local_exit_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PublicInputs::set_new_local_exit_root(std::string&& value) {
  
  new_local_exit_root_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkprover.PublicInputs.new_local_exit_root)
}
inline void PublicInputs::set_new_local_exit_root(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  new_local_exit_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkprover.PublicInputs.new_local_exit_root)
}
inline void PublicInputs::set_new_local_exit_root(const char* value,
    size_t size) {
  
  new_local_exit_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkprover.PublicInputs.new_local_exit_root)
}
inline std::string* PublicInputs::_internal_mutable_new_local_exit_root() {
  
  return new_local_exit_root_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PublicInputs::release_new_local_exit_root() {
  // @@protoc_insertion_point(field_release:zkprover.PublicInputs.new_local_exit_root)
  return new_local_exit_root_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PublicInputs::set_allocated_new_local_exit_root(std::string* new_local_exit_root) {
  if (new_local_exit_root != nullptr) {
    
  } else {
    
  }
  new_local_exit_root_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), new_local_exit_root,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkprover.PublicInputs.new_local_exit_root)
}
inline std::string* PublicInputs::unsafe_arena_release_new_local_exit_root() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkprover.PublicInputs.new_local_exit_root)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return new_local_exit_root_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PublicInputs::unsafe_arena_set_allocated_new_local_exit_root(
    std::string* new_local_exit_root) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (new_local_exit_root != nullptr) {
    
  } else {
    
  }
  new_local_exit_root_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      new_local_exit_root, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkprover.PublicInputs.new_local_exit_root)
}

// string sequencer_addr = 5;
inline void PublicInputs::clear_sequencer_addr() {
  sequencer_addr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PublicInputs::sequencer_addr() const {
  // @@protoc_insertion_point(field_get:zkprover.PublicInputs.sequencer_addr)
  return _internal_sequencer_addr();
}
inline void PublicInputs::set_sequencer_addr(const std::string& value) {
  _internal_set_sequencer_addr(value);
  // @@protoc_insertion_point(field_set:zkprover.PublicInputs.sequencer_addr)
}
inline std::string* PublicInputs::mutable_sequencer_addr() {
  // @@protoc_insertion_point(field_mutable:zkprover.PublicInputs.sequencer_addr)
  return _internal_mutable_sequencer_addr();
}
inline const std::string& PublicInputs::_internal_sequencer_addr() const {
  return sequencer_addr_.Get();
}
inline void PublicInputs::_internal_set_sequencer_addr(const std::string& value) {
  
  sequencer_addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PublicInputs::set_sequencer_addr(std::string&& value) {
  
  sequencer_addr_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkprover.PublicInputs.sequencer_addr)
}
inline void PublicInputs::set_sequencer_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sequencer_addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkprover.PublicInputs.sequencer_addr)
}
inline void PublicInputs::set_sequencer_addr(const char* value,
    size_t size) {
  
  sequencer_addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkprover.PublicInputs.sequencer_addr)
}
inline std::string* PublicInputs::_internal_mutable_sequencer_addr() {
  
  return sequencer_addr_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PublicInputs::release_sequencer_addr() {
  // @@protoc_insertion_point(field_release:zkprover.PublicInputs.sequencer_addr)
  return sequencer_addr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PublicInputs::set_allocated_sequencer_addr(std::string* sequencer_addr) {
  if (sequencer_addr != nullptr) {
    
  } else {
    
  }
  sequencer_addr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sequencer_addr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkprover.PublicInputs.sequencer_addr)
}
inline std::string* PublicInputs::unsafe_arena_release_sequencer_addr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkprover.PublicInputs.sequencer_addr)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return sequencer_addr_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PublicInputs::unsafe_arena_set_allocated_sequencer_addr(
    std::string* sequencer_addr) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sequencer_addr != nullptr) {
    
  } else {
    
  }
  sequencer_addr_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sequencer_addr, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkprover.PublicInputs.sequencer_addr)
}

// string batch_hash_data = 6;
inline void PublicInputs::clear_batch_hash_data() {
  batch_hash_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PublicInputs::batch_hash_data() const {
  // @@protoc_insertion_point(field_get:zkprover.PublicInputs.batch_hash_data)
  return _internal_batch_hash_data();
}
inline void PublicInputs::set_batch_hash_data(const std::string& value) {
  _internal_set_batch_hash_data(value);
  // @@protoc_insertion_point(field_set:zkprover.PublicInputs.batch_hash_data)
}
inline std::string* PublicInputs::mutable_batch_hash_data() {
  // @@protoc_insertion_point(field_mutable:zkprover.PublicInputs.batch_hash_data)
  return _internal_mutable_batch_hash_data();
}
inline const std::string& PublicInputs::_internal_batch_hash_data() const {
  return batch_hash_data_.Get();
}
inline void PublicInputs::_internal_set_batch_hash_data(const std::string& value) {
  
  batch_hash_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PublicInputs::set_batch_hash_data(std::string&& value) {
  
  batch_hash_data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkprover.PublicInputs.batch_hash_data)
}
inline void PublicInputs::set_batch_hash_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  batch_hash_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkprover.PublicInputs.batch_hash_data)
}
inline void PublicInputs::set_batch_hash_data(const char* value,
    size_t size) {
  
  batch_hash_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkprover.PublicInputs.batch_hash_data)
}
inline std::string* PublicInputs::_internal_mutable_batch_hash_data() {
  
  return batch_hash_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PublicInputs::release_batch_hash_data() {
  // @@protoc_insertion_point(field_release:zkprover.PublicInputs.batch_hash_data)
  return batch_hash_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PublicInputs::set_allocated_batch_hash_data(std::string* batch_hash_data) {
  if (batch_hash_data != nullptr) {
    
  } else {
    
  }
  batch_hash_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), batch_hash_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkprover.PublicInputs.batch_hash_data)
}
inline std::string* PublicInputs::unsafe_arena_release_batch_hash_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkprover.PublicInputs.batch_hash_data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return batch_hash_data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PublicInputs::unsafe_arena_set_allocated_batch_hash_data(
    std::string* batch_hash_data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (batch_hash_data != nullptr) {
    
  } else {
    
  }
  batch_hash_data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      batch_hash_data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkprover.PublicInputs.batch_hash_data)
}

// uint32 chain_id = 7;
inline void PublicInputs::clear_chain_id() {
  chain_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublicInputs::_internal_chain_id() const {
  return chain_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublicInputs::chain_id() const {
  // @@protoc_insertion_point(field_get:zkprover.PublicInputs.chain_id)
  return _internal_chain_id();
}
inline void PublicInputs::_internal_set_chain_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  chain_id_ = value;
}
inline void PublicInputs::set_chain_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_chain_id(value);
  // @@protoc_insertion_point(field_set:zkprover.PublicInputs.chain_id)
}

// uint32 batch_num = 8;
inline void PublicInputs::clear_batch_num() {
  batch_num_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublicInputs::_internal_batch_num() const {
  return batch_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublicInputs::batch_num() const {
  // @@protoc_insertion_point(field_get:zkprover.PublicInputs.batch_num)
  return _internal_batch_num();
}
inline void PublicInputs::_internal_set_batch_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  batch_num_ = value;
}
inline void PublicInputs::set_batch_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_batch_num(value);
  // @@protoc_insertion_point(field_set:zkprover.PublicInputs.batch_num)
}

// uint32 block_num = 9;
inline void PublicInputs::clear_block_num() {
  block_num_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublicInputs::_internal_block_num() const {
  return block_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublicInputs::block_num() const {
  // @@protoc_insertion_point(field_get:zkprover.PublicInputs.block_num)
  return _internal_block_num();
}
inline void PublicInputs::_internal_set_block_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  block_num_ = value;
}
inline void PublicInputs::set_block_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_block_num(value);
  // @@protoc_insertion_point(field_set:zkprover.PublicInputs.block_num)
}

// uint64 eth_timestamp = 10;
inline void PublicInputs::clear_eth_timestamp() {
  eth_timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PublicInputs::_internal_eth_timestamp() const {
  return eth_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PublicInputs::eth_timestamp() const {
  // @@protoc_insertion_point(field_get:zkprover.PublicInputs.eth_timestamp)
  return _internal_eth_timestamp();
}
inline void PublicInputs::_internal_set_eth_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  eth_timestamp_ = value;
}
inline void PublicInputs::set_eth_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_eth_timestamp(value);
  // @@protoc_insertion_point(field_set:zkprover.PublicInputs.eth_timestamp)
}

// -------------------------------------------------------------------

// ProofB

// repeated string proofs = 1;
inline int ProofB::_internal_proofs_size() const {
  return proofs_.size();
}
inline int ProofB::proofs_size() const {
  return _internal_proofs_size();
}
inline void ProofB::clear_proofs() {
  proofs_.Clear();
}
inline std::string* ProofB::add_proofs() {
  // @@protoc_insertion_point(field_add_mutable:zkprover.ProofB.proofs)
  return _internal_add_proofs();
}
inline const std::string& ProofB::_internal_proofs(int index) const {
  return proofs_.Get(index);
}
inline const std::string& ProofB::proofs(int index) const {
  // @@protoc_insertion_point(field_get:zkprover.ProofB.proofs)
  return _internal_proofs(index);
}
inline std::string* ProofB::mutable_proofs(int index) {
  // @@protoc_insertion_point(field_mutable:zkprover.ProofB.proofs)
  return proofs_.Mutable(index);
}
inline void ProofB::set_proofs(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:zkprover.ProofB.proofs)
  proofs_.Mutable(index)->assign(value);
}
inline void ProofB::set_proofs(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:zkprover.ProofB.proofs)
  proofs_.Mutable(index)->assign(std::move(value));
}
inline void ProofB::set_proofs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  proofs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zkprover.ProofB.proofs)
}
inline void ProofB::set_proofs(int index, const char* value, size_t size) {
  proofs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zkprover.ProofB.proofs)
}
inline std::string* ProofB::_internal_add_proofs() {
  return proofs_.Add();
}
inline void ProofB::add_proofs(const std::string& value) {
  proofs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zkprover.ProofB.proofs)
}
inline void ProofB::add_proofs(std::string&& value) {
  proofs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zkprover.ProofB.proofs)
}
inline void ProofB::add_proofs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  proofs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zkprover.ProofB.proofs)
}
inline void ProofB::add_proofs(const char* value, size_t size) {
  proofs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zkprover.ProofB.proofs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ProofB::proofs() const {
  // @@protoc_insertion_point(field_list:zkprover.ProofB.proofs)
  return proofs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ProofB::mutable_proofs() {
  // @@protoc_insertion_point(field_mutable_list:zkprover.ProofB.proofs)
  return &proofs_;
}

// -------------------------------------------------------------------

// Proof

// repeated string proofA = 1;
inline int Proof::_internal_proofa_size() const {
  return proofa_.size();
}
inline int Proof::proofa_size() const {
  return _internal_proofa_size();
}
inline void Proof::clear_proofa() {
  proofa_.Clear();
}
inline std::string* Proof::add_proofa() {
  // @@protoc_insertion_point(field_add_mutable:zkprover.Proof.proofA)
  return _internal_add_proofa();
}
inline const std::string& Proof::_internal_proofa(int index) const {
  return proofa_.Get(index);
}
inline const std::string& Proof::proofa(int index) const {
  // @@protoc_insertion_point(field_get:zkprover.Proof.proofA)
  return _internal_proofa(index);
}
inline std::string* Proof::mutable_proofa(int index) {
  // @@protoc_insertion_point(field_mutable:zkprover.Proof.proofA)
  return proofa_.Mutable(index);
}
inline void Proof::set_proofa(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:zkprover.Proof.proofA)
  proofa_.Mutable(index)->assign(value);
}
inline void Proof::set_proofa(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:zkprover.Proof.proofA)
  proofa_.Mutable(index)->assign(std::move(value));
}
inline void Proof::set_proofa(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  proofa_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zkprover.Proof.proofA)
}
inline void Proof::set_proofa(int index, const char* value, size_t size) {
  proofa_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zkprover.Proof.proofA)
}
inline std::string* Proof::_internal_add_proofa() {
  return proofa_.Add();
}
inline void Proof::add_proofa(const std::string& value) {
  proofa_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zkprover.Proof.proofA)
}
inline void Proof::add_proofa(std::string&& value) {
  proofa_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zkprover.Proof.proofA)
}
inline void Proof::add_proofa(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  proofa_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zkprover.Proof.proofA)
}
inline void Proof::add_proofa(const char* value, size_t size) {
  proofa_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zkprover.Proof.proofA)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Proof::proofa() const {
  // @@protoc_insertion_point(field_list:zkprover.Proof.proofA)
  return proofa_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Proof::mutable_proofa() {
  // @@protoc_insertion_point(field_mutable_list:zkprover.Proof.proofA)
  return &proofa_;
}

// repeated .zkprover.ProofB proofB = 2;
inline int Proof::_internal_proofb_size() const {
  return proofb_.size();
}
inline int Proof::proofb_size() const {
  return _internal_proofb_size();
}
inline void Proof::clear_proofb() {
  proofb_.Clear();
}
inline ::zkprover::ProofB* Proof::mutable_proofb(int index) {
  // @@protoc_insertion_point(field_mutable:zkprover.Proof.proofB)
  return proofb_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zkprover::ProofB >*
Proof::mutable_proofb() {
  // @@protoc_insertion_point(field_mutable_list:zkprover.Proof.proofB)
  return &proofb_;
}
inline const ::zkprover::ProofB& Proof::_internal_proofb(int index) const {
  return proofb_.Get(index);
}
inline const ::zkprover::ProofB& Proof::proofb(int index) const {
  // @@protoc_insertion_point(field_get:zkprover.Proof.proofB)
  return _internal_proofb(index);
}
inline ::zkprover::ProofB* Proof::_internal_add_proofb() {
  return proofb_.Add();
}
inline ::zkprover::ProofB* Proof::add_proofb() {
  // @@protoc_insertion_point(field_add:zkprover.Proof.proofB)
  return _internal_add_proofb();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zkprover::ProofB >&
Proof::proofb() const {
  // @@protoc_insertion_point(field_list:zkprover.Proof.proofB)
  return proofb_;
}

// repeated string proofC = 3;
inline int Proof::_internal_proofc_size() const {
  return proofc_.size();
}
inline int Proof::proofc_size() const {
  return _internal_proofc_size();
}
inline void Proof::clear_proofc() {
  proofc_.Clear();
}
inline std::string* Proof::add_proofc() {
  // @@protoc_insertion_point(field_add_mutable:zkprover.Proof.proofC)
  return _internal_add_proofc();
}
inline const std::string& Proof::_internal_proofc(int index) const {
  return proofc_.Get(index);
}
inline const std::string& Proof::proofc(int index) const {
  // @@protoc_insertion_point(field_get:zkprover.Proof.proofC)
  return _internal_proofc(index);
}
inline std::string* Proof::mutable_proofc(int index) {
  // @@protoc_insertion_point(field_mutable:zkprover.Proof.proofC)
  return proofc_.Mutable(index);
}
inline void Proof::set_proofc(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:zkprover.Proof.proofC)
  proofc_.Mutable(index)->assign(value);
}
inline void Proof::set_proofc(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:zkprover.Proof.proofC)
  proofc_.Mutable(index)->assign(std::move(value));
}
inline void Proof::set_proofc(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  proofc_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zkprover.Proof.proofC)
}
inline void Proof::set_proofc(int index, const char* value, size_t size) {
  proofc_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zkprover.Proof.proofC)
}
inline std::string* Proof::_internal_add_proofc() {
  return proofc_.Add();
}
inline void Proof::add_proofc(const std::string& value) {
  proofc_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zkprover.Proof.proofC)
}
inline void Proof::add_proofc(std::string&& value) {
  proofc_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zkprover.Proof.proofC)
}
inline void Proof::add_proofc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  proofc_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zkprover.Proof.proofC)
}
inline void Proof::add_proofc(const char* value, size_t size) {
  proofc_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zkprover.Proof.proofC)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Proof::proofc() const {
  // @@protoc_insertion_point(field_list:zkprover.Proof.proofC)
  return proofc_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Proof::mutable_proofc() {
  // @@protoc_insertion_point(field_mutable_list:zkprover.Proof.proofC)
  return &proofc_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// InputProver

// .zkprover.PublicInputs public_inputs = 1;
inline bool InputProver::_internal_has_public_inputs() const {
  return this != internal_default_instance() && public_inputs_ != nullptr;
}
inline bool InputProver::has_public_inputs() const {
  return _internal_has_public_inputs();
}
inline void InputProver::clear_public_inputs() {
  if (GetArena() == nullptr && public_inputs_ != nullptr) {
    delete public_inputs_;
  }
  public_inputs_ = nullptr;
}
inline const ::zkprover::PublicInputs& InputProver::_internal_public_inputs() const {
  const ::zkprover::PublicInputs* p = public_inputs_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zkprover::PublicInputs*>(
      &::zkprover::_PublicInputs_default_instance_);
}
inline const ::zkprover::PublicInputs& InputProver::public_inputs() const {
  // @@protoc_insertion_point(field_get:zkprover.InputProver.public_inputs)
  return _internal_public_inputs();
}
inline void InputProver::unsafe_arena_set_allocated_public_inputs(
    ::zkprover::PublicInputs* public_inputs) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(public_inputs_);
  }
  public_inputs_ = public_inputs;
  if (public_inputs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkprover.InputProver.public_inputs)
}
inline ::zkprover::PublicInputs* InputProver::release_public_inputs() {
  auto temp = unsafe_arena_release_public_inputs();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zkprover::PublicInputs* InputProver::unsafe_arena_release_public_inputs() {
  // @@protoc_insertion_point(field_release:zkprover.InputProver.public_inputs)
  
  ::zkprover::PublicInputs* temp = public_inputs_;
  public_inputs_ = nullptr;
  return temp;
}
inline ::zkprover::PublicInputs* InputProver::_internal_mutable_public_inputs() {
  
  if (public_inputs_ == nullptr) {
    auto* p = CreateMaybeMessage<::zkprover::PublicInputs>(GetArena());
    public_inputs_ = p;
  }
  return public_inputs_;
}
inline ::zkprover::PublicInputs* InputProver::mutable_public_inputs() {
  // @@protoc_insertion_point(field_mutable:zkprover.InputProver.public_inputs)
  return _internal_mutable_public_inputs();
}
inline void InputProver::set_allocated_public_inputs(::zkprover::PublicInputs* public_inputs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete public_inputs_;
  }
  if (public_inputs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(public_inputs);
    if (message_arena != submessage_arena) {
      public_inputs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, public_inputs, submessage_arena);
    }
    
  } else {
    
  }
  public_inputs_ = public_inputs;
  // @@protoc_insertion_point(field_set_allocated:zkprover.InputProver.public_inputs)
}

// string global_exit_root = 2;
inline void InputProver::clear_global_exit_root() {
  global_exit_root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InputProver::global_exit_root() const {
  // @@protoc_insertion_point(field_get:zkprover.InputProver.global_exit_root)
  return _internal_global_exit_root();
}
inline void InputProver::set_global_exit_root(const std::string& value) {
  _internal_set_global_exit_root(value);
  // @@protoc_insertion_point(field_set:zkprover.InputProver.global_exit_root)
}
inline std::string* InputProver::mutable_global_exit_root() {
  // @@protoc_insertion_point(field_mutable:zkprover.InputProver.global_exit_root)
  return _internal_mutable_global_exit_root();
}
inline const std::string& InputProver::_internal_global_exit_root() const {
  return global_exit_root_.Get();
}
inline void InputProver::_internal_set_global_exit_root(const std::string& value) {
  
  global_exit_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InputProver::set_global_exit_root(std::string&& value) {
  
  global_exit_root_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkprover.InputProver.global_exit_root)
}
inline void InputProver::set_global_exit_root(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  global_exit_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkprover.InputProver.global_exit_root)
}
inline void InputProver::set_global_exit_root(const char* value,
    size_t size) {
  
  global_exit_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkprover.InputProver.global_exit_root)
}
inline std::string* InputProver::_internal_mutable_global_exit_root() {
  
  return global_exit_root_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InputProver::release_global_exit_root() {
  // @@protoc_insertion_point(field_release:zkprover.InputProver.global_exit_root)
  return global_exit_root_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InputProver::set_allocated_global_exit_root(std::string* global_exit_root) {
  if (global_exit_root != nullptr) {
    
  } else {
    
  }
  global_exit_root_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), global_exit_root,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkprover.InputProver.global_exit_root)
}
inline std::string* InputProver::unsafe_arena_release_global_exit_root() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkprover.InputProver.global_exit_root)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return global_exit_root_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InputProver::unsafe_arena_set_allocated_global_exit_root(
    std::string* global_exit_root) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (global_exit_root != nullptr) {
    
  } else {
    
  }
  global_exit_root_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      global_exit_root, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkprover.InputProver.global_exit_root)
}

// repeated string txs = 3;
inline int InputProver::_internal_txs_size() const {
  return txs_.size();
}
inline int InputProver::txs_size() const {
  return _internal_txs_size();
}
inline void InputProver::clear_txs() {
  txs_.Clear();
}
inline std::string* InputProver::add_txs() {
  // @@protoc_insertion_point(field_add_mutable:zkprover.InputProver.txs)
  return _internal_add_txs();
}
inline const std::string& InputProver::_internal_txs(int index) const {
  return txs_.Get(index);
}
inline const std::string& InputProver::txs(int index) const {
  // @@protoc_insertion_point(field_get:zkprover.InputProver.txs)
  return _internal_txs(index);
}
inline std::string* InputProver::mutable_txs(int index) {
  // @@protoc_insertion_point(field_mutable:zkprover.InputProver.txs)
  return txs_.Mutable(index);
}
inline void InputProver::set_txs(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:zkprover.InputProver.txs)
  txs_.Mutable(index)->assign(value);
}
inline void InputProver::set_txs(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:zkprover.InputProver.txs)
  txs_.Mutable(index)->assign(std::move(value));
}
inline void InputProver::set_txs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  txs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zkprover.InputProver.txs)
}
inline void InputProver::set_txs(int index, const char* value, size_t size) {
  txs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zkprover.InputProver.txs)
}
inline std::string* InputProver::_internal_add_txs() {
  return txs_.Add();
}
inline void InputProver::add_txs(const std::string& value) {
  txs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zkprover.InputProver.txs)
}
inline void InputProver::add_txs(std::string&& value) {
  txs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zkprover.InputProver.txs)
}
inline void InputProver::add_txs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  txs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zkprover.InputProver.txs)
}
inline void InputProver::add_txs(const char* value, size_t size) {
  txs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zkprover.InputProver.txs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
InputProver::txs() const {
  // @@protoc_insertion_point(field_list:zkprover.InputProver.txs)
  return txs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
InputProver::mutable_txs() {
  // @@protoc_insertion_point(field_mutable_list:zkprover.InputProver.txs)
  return &txs_;
}

// map<string, string> db = 4;
inline int InputProver::_internal_db_size() const {
  return db_.size();
}
inline int InputProver::db_size() const {
  return _internal_db_size();
}
inline void InputProver::clear_db() {
  db_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
InputProver::_internal_db() const {
  return db_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
InputProver::db() const {
  // @@protoc_insertion_point(field_map:zkprover.InputProver.db)
  return _internal_db();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
InputProver::_internal_mutable_db() {
  return db_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
InputProver::mutable_db() {
  // @@protoc_insertion_point(field_mutable_map:zkprover.InputProver.db)
  return _internal_mutable_db();
}

// -------------------------------------------------------------------

// InputProverExecute

// .zkprover.PublicInputs public_inputs = 1;
inline bool InputProverExecute::_internal_has_public_inputs() const {
  return this != internal_default_instance() && public_inputs_ != nullptr;
}
inline bool InputProverExecute::has_public_inputs() const {
  return _internal_has_public_inputs();
}
inline void InputProverExecute::clear_public_inputs() {
  if (GetArena() == nullptr && public_inputs_ != nullptr) {
    delete public_inputs_;
  }
  public_inputs_ = nullptr;
}
inline const ::zkprover::PublicInputs& InputProverExecute::_internal_public_inputs() const {
  const ::zkprover::PublicInputs* p = public_inputs_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zkprover::PublicInputs*>(
      &::zkprover::_PublicInputs_default_instance_);
}
inline const ::zkprover::PublicInputs& InputProverExecute::public_inputs() const {
  // @@protoc_insertion_point(field_get:zkprover.InputProverExecute.public_inputs)
  return _internal_public_inputs();
}
inline void InputProverExecute::unsafe_arena_set_allocated_public_inputs(
    ::zkprover::PublicInputs* public_inputs) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(public_inputs_);
  }
  public_inputs_ = public_inputs;
  if (public_inputs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkprover.InputProverExecute.public_inputs)
}
inline ::zkprover::PublicInputs* InputProverExecute::release_public_inputs() {
  auto temp = unsafe_arena_release_public_inputs();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zkprover::PublicInputs* InputProverExecute::unsafe_arena_release_public_inputs() {
  // @@protoc_insertion_point(field_release:zkprover.InputProverExecute.public_inputs)
  
  ::zkprover::PublicInputs* temp = public_inputs_;
  public_inputs_ = nullptr;
  return temp;
}
inline ::zkprover::PublicInputs* InputProverExecute::_internal_mutable_public_inputs() {
  
  if (public_inputs_ == nullptr) {
    auto* p = CreateMaybeMessage<::zkprover::PublicInputs>(GetArena());
    public_inputs_ = p;
  }
  return public_inputs_;
}
inline ::zkprover::PublicInputs* InputProverExecute::mutable_public_inputs() {
  // @@protoc_insertion_point(field_mutable:zkprover.InputProverExecute.public_inputs)
  return _internal_mutable_public_inputs();
}
inline void InputProverExecute::set_allocated_public_inputs(::zkprover::PublicInputs* public_inputs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete public_inputs_;
  }
  if (public_inputs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(public_inputs);
    if (message_arena != submessage_arena) {
      public_inputs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, public_inputs, submessage_arena);
    }
    
  } else {
    
  }
  public_inputs_ = public_inputs;
  // @@protoc_insertion_point(field_set_allocated:zkprover.InputProverExecute.public_inputs)
}

// string global_exit_root = 2;
inline void InputProverExecute::clear_global_exit_root() {
  global_exit_root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InputProverExecute::global_exit_root() const {
  // @@protoc_insertion_point(field_get:zkprover.InputProverExecute.global_exit_root)
  return _internal_global_exit_root();
}
inline void InputProverExecute::set_global_exit_root(const std::string& value) {
  _internal_set_global_exit_root(value);
  // @@protoc_insertion_point(field_set:zkprover.InputProverExecute.global_exit_root)
}
inline std::string* InputProverExecute::mutable_global_exit_root() {
  // @@protoc_insertion_point(field_mutable:zkprover.InputProverExecute.global_exit_root)
  return _internal_mutable_global_exit_root();
}
inline const std::string& InputProverExecute::_internal_global_exit_root() const {
  return global_exit_root_.Get();
}
inline void InputProverExecute::_internal_set_global_exit_root(const std::string& value) {
  
  global_exit_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InputProverExecute::set_global_exit_root(std::string&& value) {
  
  global_exit_root_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkprover.InputProverExecute.global_exit_root)
}
inline void InputProverExecute::set_global_exit_root(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  global_exit_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkprover.InputProverExecute.global_exit_root)
}
inline void InputProverExecute::set_global_exit_root(const char* value,
    size_t size) {
  
  global_exit_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkprover.InputProverExecute.global_exit_root)
}
inline std::string* InputProverExecute::_internal_mutable_global_exit_root() {
  
  return global_exit_root_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InputProverExecute::release_global_exit_root() {
  // @@protoc_insertion_point(field_release:zkprover.InputProverExecute.global_exit_root)
  return global_exit_root_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InputProverExecute::set_allocated_global_exit_root(std::string* global_exit_root) {
  if (global_exit_root != nullptr) {
    
  } else {
    
  }
  global_exit_root_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), global_exit_root,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkprover.InputProverExecute.global_exit_root)
}
inline std::string* InputProverExecute::unsafe_arena_release_global_exit_root() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkprover.InputProverExecute.global_exit_root)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return global_exit_root_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InputProverExecute::unsafe_arena_set_allocated_global_exit_root(
    std::string* global_exit_root) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (global_exit_root != nullptr) {
    
  } else {
    
  }
  global_exit_root_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      global_exit_root, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkprover.InputProverExecute.global_exit_root)
}

// repeated string txs = 3;
inline int InputProverExecute::_internal_txs_size() const {
  return txs_.size();
}
inline int InputProverExecute::txs_size() const {
  return _internal_txs_size();
}
inline void InputProverExecute::clear_txs() {
  txs_.Clear();
}
inline std::string* InputProverExecute::add_txs() {
  // @@protoc_insertion_point(field_add_mutable:zkprover.InputProverExecute.txs)
  return _internal_add_txs();
}
inline const std::string& InputProverExecute::_internal_txs(int index) const {
  return txs_.Get(index);
}
inline const std::string& InputProverExecute::txs(int index) const {
  // @@protoc_insertion_point(field_get:zkprover.InputProverExecute.txs)
  return _internal_txs(index);
}
inline std::string* InputProverExecute::mutable_txs(int index) {
  // @@protoc_insertion_point(field_mutable:zkprover.InputProverExecute.txs)
  return txs_.Mutable(index);
}
inline void InputProverExecute::set_txs(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:zkprover.InputProverExecute.txs)
  txs_.Mutable(index)->assign(value);
}
inline void InputProverExecute::set_txs(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:zkprover.InputProverExecute.txs)
  txs_.Mutable(index)->assign(std::move(value));
}
inline void InputProverExecute::set_txs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  txs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zkprover.InputProverExecute.txs)
}
inline void InputProverExecute::set_txs(int index, const char* value, size_t size) {
  txs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zkprover.InputProverExecute.txs)
}
inline std::string* InputProverExecute::_internal_add_txs() {
  return txs_.Add();
}
inline void InputProverExecute::add_txs(const std::string& value) {
  txs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zkprover.InputProverExecute.txs)
}
inline void InputProverExecute::add_txs(std::string&& value) {
  txs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zkprover.InputProverExecute.txs)
}
inline void InputProverExecute::add_txs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  txs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zkprover.InputProverExecute.txs)
}
inline void InputProverExecute::add_txs(const char* value, size_t size) {
  txs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zkprover.InputProverExecute.txs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
InputProverExecute::txs() const {
  // @@protoc_insertion_point(field_list:zkprover.InputProverExecute.txs)
  return txs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
InputProverExecute::mutable_txs() {
  // @@protoc_insertion_point(field_mutable_list:zkprover.InputProverExecute.txs)
  return &txs_;
}

// -------------------------------------------------------------------

// PublicInputsExtended

// .zkprover.PublicInputs public_inputs = 1;
inline bool PublicInputsExtended::_internal_has_public_inputs() const {
  return this != internal_default_instance() && public_inputs_ != nullptr;
}
inline bool PublicInputsExtended::has_public_inputs() const {
  return _internal_has_public_inputs();
}
inline void PublicInputsExtended::clear_public_inputs() {
  if (GetArena() == nullptr && public_inputs_ != nullptr) {
    delete public_inputs_;
  }
  public_inputs_ = nullptr;
}
inline const ::zkprover::PublicInputs& PublicInputsExtended::_internal_public_inputs() const {
  const ::zkprover::PublicInputs* p = public_inputs_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zkprover::PublicInputs*>(
      &::zkprover::_PublicInputs_default_instance_);
}
inline const ::zkprover::PublicInputs& PublicInputsExtended::public_inputs() const {
  // @@protoc_insertion_point(field_get:zkprover.PublicInputsExtended.public_inputs)
  return _internal_public_inputs();
}
inline void PublicInputsExtended::unsafe_arena_set_allocated_public_inputs(
    ::zkprover::PublicInputs* public_inputs) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(public_inputs_);
  }
  public_inputs_ = public_inputs;
  if (public_inputs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkprover.PublicInputsExtended.public_inputs)
}
inline ::zkprover::PublicInputs* PublicInputsExtended::release_public_inputs() {
  auto temp = unsafe_arena_release_public_inputs();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zkprover::PublicInputs* PublicInputsExtended::unsafe_arena_release_public_inputs() {
  // @@protoc_insertion_point(field_release:zkprover.PublicInputsExtended.public_inputs)
  
  ::zkprover::PublicInputs* temp = public_inputs_;
  public_inputs_ = nullptr;
  return temp;
}
inline ::zkprover::PublicInputs* PublicInputsExtended::_internal_mutable_public_inputs() {
  
  if (public_inputs_ == nullptr) {
    auto* p = CreateMaybeMessage<::zkprover::PublicInputs>(GetArena());
    public_inputs_ = p;
  }
  return public_inputs_;
}
inline ::zkprover::PublicInputs* PublicInputsExtended::mutable_public_inputs() {
  // @@protoc_insertion_point(field_mutable:zkprover.PublicInputsExtended.public_inputs)
  return _internal_mutable_public_inputs();
}
inline void PublicInputsExtended::set_allocated_public_inputs(::zkprover::PublicInputs* public_inputs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete public_inputs_;
  }
  if (public_inputs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(public_inputs);
    if (message_arena != submessage_arena) {
      public_inputs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, public_inputs, submessage_arena);
    }
    
  } else {
    
  }
  public_inputs_ = public_inputs;
  // @@protoc_insertion_point(field_set_allocated:zkprover.PublicInputsExtended.public_inputs)
}

// string input_hash = 2;
inline void PublicInputsExtended::clear_input_hash() {
  input_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PublicInputsExtended::input_hash() const {
  // @@protoc_insertion_point(field_get:zkprover.PublicInputsExtended.input_hash)
  return _internal_input_hash();
}
inline void PublicInputsExtended::set_input_hash(const std::string& value) {
  _internal_set_input_hash(value);
  // @@protoc_insertion_point(field_set:zkprover.PublicInputsExtended.input_hash)
}
inline std::string* PublicInputsExtended::mutable_input_hash() {
  // @@protoc_insertion_point(field_mutable:zkprover.PublicInputsExtended.input_hash)
  return _internal_mutable_input_hash();
}
inline const std::string& PublicInputsExtended::_internal_input_hash() const {
  return input_hash_.Get();
}
inline void PublicInputsExtended::_internal_set_input_hash(const std::string& value) {
  
  input_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PublicInputsExtended::set_input_hash(std::string&& value) {
  
  input_hash_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkprover.PublicInputsExtended.input_hash)
}
inline void PublicInputsExtended::set_input_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  input_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkprover.PublicInputsExtended.input_hash)
}
inline void PublicInputsExtended::set_input_hash(const char* value,
    size_t size) {
  
  input_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkprover.PublicInputsExtended.input_hash)
}
inline std::string* PublicInputsExtended::_internal_mutable_input_hash() {
  
  return input_hash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PublicInputsExtended::release_input_hash() {
  // @@protoc_insertion_point(field_release:zkprover.PublicInputsExtended.input_hash)
  return input_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PublicInputsExtended::set_allocated_input_hash(std::string* input_hash) {
  if (input_hash != nullptr) {
    
  } else {
    
  }
  input_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), input_hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkprover.PublicInputsExtended.input_hash)
}
inline std::string* PublicInputsExtended::unsafe_arena_release_input_hash() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkprover.PublicInputsExtended.input_hash)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return input_hash_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PublicInputsExtended::unsafe_arena_set_allocated_input_hash(
    std::string* input_hash) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (input_hash != nullptr) {
    
  } else {
    
  }
  input_hash_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      input_hash, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkprover.PublicInputsExtended.input_hash)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace zkprover

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::zkprover::ResGetStatus_StatusProver> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zkprover::ResGetStatus_StatusProver>() {
  return ::zkprover::ResGetStatus_StatusProver_descriptor();
}
template <> struct is_proto_enum< ::zkprover::ResGenProof_ResultGenProof> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zkprover::ResGenProof_ResultGenProof>() {
  return ::zkprover::ResGenProof_ResultGenProof_descriptor();
}
template <> struct is_proto_enum< ::zkprover::ResCancel_ResultCancel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zkprover::ResCancel_ResultCancel>() {
  return ::zkprover::ResCancel_ResultCancel_descriptor();
}
template <> struct is_proto_enum< ::zkprover::ResGetProof_ResultGetProof> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zkprover::ResGetProof_ResultGetProof>() {
  return ::zkprover::ResGetProof_ResultGetProof_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_zk_2dprover_2eproto
