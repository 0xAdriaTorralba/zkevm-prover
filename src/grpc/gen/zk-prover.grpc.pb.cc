// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: zk-prover.proto

#include "zk-prover.pb.h"
#include "zk-prover.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace zkprover {

static const char* ZKProver_method_names[] = {
  "/zkprover.ZKProver/GetStatus",
  "/zkprover.ZKProver/GenProof",
  "/zkprover.ZKProver/Cancel",
  "/zkprover.ZKProver/GetProof",
  "/zkprover.ZKProver/Execute",
};

std::unique_ptr< ZKProver::Stub> ZKProver::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ZKProver::Stub> stub(new ZKProver::Stub(channel));
  return stub;
}

ZKProver::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetStatus_(ZKProver_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GenProof_(ZKProver_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Cancel_(ZKProver_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetProof_(ZKProver_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Execute_(ZKProver_method_names[4], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status ZKProver::Stub::GetStatus(::grpc::ClientContext* context, const ::zkprover::NoParams& request, ::zkprover::ResGetStatus* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetStatus_, context, request, response);
}

void ZKProver::Stub::experimental_async::GetStatus(::grpc::ClientContext* context, const ::zkprover::NoParams* request, ::zkprover::ResGetStatus* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetStatus_, context, request, response, std::move(f));
}

void ZKProver::Stub::experimental_async::GetStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zkprover::ResGetStatus* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetStatus_, context, request, response, std::move(f));
}

void ZKProver::Stub::experimental_async::GetStatus(::grpc::ClientContext* context, const ::zkprover::NoParams* request, ::zkprover::ResGetStatus* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetStatus_, context, request, response, reactor);
}

void ZKProver::Stub::experimental_async::GetStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zkprover::ResGetStatus* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zkprover::ResGetStatus>* ZKProver::Stub::AsyncGetStatusRaw(::grpc::ClientContext* context, const ::zkprover::NoParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zkprover::ResGetStatus>::Create(channel_.get(), cq, rpcmethod_GetStatus_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::zkprover::ResGetStatus>* ZKProver::Stub::PrepareAsyncGetStatusRaw(::grpc::ClientContext* context, const ::zkprover::NoParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zkprover::ResGetStatus>::Create(channel_.get(), cq, rpcmethod_GetStatus_, context, request, false);
}

::grpc::Status ZKProver::Stub::GenProof(::grpc::ClientContext* context, const ::zkprover::InputProver& request, ::zkprover::ResGenProof* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GenProof_, context, request, response);
}

void ZKProver::Stub::experimental_async::GenProof(::grpc::ClientContext* context, const ::zkprover::InputProver* request, ::zkprover::ResGenProof* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GenProof_, context, request, response, std::move(f));
}

void ZKProver::Stub::experimental_async::GenProof(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zkprover::ResGenProof* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GenProof_, context, request, response, std::move(f));
}

void ZKProver::Stub::experimental_async::GenProof(::grpc::ClientContext* context, const ::zkprover::InputProver* request, ::zkprover::ResGenProof* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GenProof_, context, request, response, reactor);
}

void ZKProver::Stub::experimental_async::GenProof(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zkprover::ResGenProof* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GenProof_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zkprover::ResGenProof>* ZKProver::Stub::AsyncGenProofRaw(::grpc::ClientContext* context, const ::zkprover::InputProver& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zkprover::ResGenProof>::Create(channel_.get(), cq, rpcmethod_GenProof_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::zkprover::ResGenProof>* ZKProver::Stub::PrepareAsyncGenProofRaw(::grpc::ClientContext* context, const ::zkprover::InputProver& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zkprover::ResGenProof>::Create(channel_.get(), cq, rpcmethod_GenProof_, context, request, false);
}

::grpc::Status ZKProver::Stub::Cancel(::grpc::ClientContext* context, const ::zkprover::RequestId& request, ::zkprover::ResCancel* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Cancel_, context, request, response);
}

void ZKProver::Stub::experimental_async::Cancel(::grpc::ClientContext* context, const ::zkprover::RequestId* request, ::zkprover::ResCancel* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Cancel_, context, request, response, std::move(f));
}

void ZKProver::Stub::experimental_async::Cancel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zkprover::ResCancel* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Cancel_, context, request, response, std::move(f));
}

void ZKProver::Stub::experimental_async::Cancel(::grpc::ClientContext* context, const ::zkprover::RequestId* request, ::zkprover::ResCancel* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Cancel_, context, request, response, reactor);
}

void ZKProver::Stub::experimental_async::Cancel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zkprover::ResCancel* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Cancel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zkprover::ResCancel>* ZKProver::Stub::AsyncCancelRaw(::grpc::ClientContext* context, const ::zkprover::RequestId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zkprover::ResCancel>::Create(channel_.get(), cq, rpcmethod_Cancel_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::zkprover::ResCancel>* ZKProver::Stub::PrepareAsyncCancelRaw(::grpc::ClientContext* context, const ::zkprover::RequestId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zkprover::ResCancel>::Create(channel_.get(), cq, rpcmethod_Cancel_, context, request, false);
}

::grpc::Status ZKProver::Stub::GetProof(::grpc::ClientContext* context, const ::zkprover::RequestId& request, ::zkprover::ResGetProof* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetProof_, context, request, response);
}

void ZKProver::Stub::experimental_async::GetProof(::grpc::ClientContext* context, const ::zkprover::RequestId* request, ::zkprover::ResGetProof* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetProof_, context, request, response, std::move(f));
}

void ZKProver::Stub::experimental_async::GetProof(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zkprover::ResGetProof* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetProof_, context, request, response, std::move(f));
}

void ZKProver::Stub::experimental_async::GetProof(::grpc::ClientContext* context, const ::zkprover::RequestId* request, ::zkprover::ResGetProof* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetProof_, context, request, response, reactor);
}

void ZKProver::Stub::experimental_async::GetProof(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zkprover::ResGetProof* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetProof_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zkprover::ResGetProof>* ZKProver::Stub::AsyncGetProofRaw(::grpc::ClientContext* context, const ::zkprover::RequestId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zkprover::ResGetProof>::Create(channel_.get(), cq, rpcmethod_GetProof_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::zkprover::ResGetProof>* ZKProver::Stub::PrepareAsyncGetProofRaw(::grpc::ClientContext* context, const ::zkprover::RequestId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zkprover::ResGetProof>::Create(channel_.get(), cq, rpcmethod_GetProof_, context, request, false);
}

::grpc::ClientReaderWriter< ::zkprover::InputProver, ::zkprover::ResExecute>* ZKProver::Stub::ExecuteRaw(::grpc::ClientContext* context) {
  return ::grpc_impl::internal::ClientReaderWriterFactory< ::zkprover::InputProver, ::zkprover::ResExecute>::Create(channel_.get(), rpcmethod_Execute_, context);
}

void ZKProver::Stub::experimental_async::Execute(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::zkprover::InputProver,::zkprover::ResExecute>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderWriterFactory< ::zkprover::InputProver,::zkprover::ResExecute>::Create(stub_->channel_.get(), stub_->rpcmethod_Execute_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::zkprover::InputProver, ::zkprover::ResExecute>* ZKProver::Stub::AsyncExecuteRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::zkprover::InputProver, ::zkprover::ResExecute>::Create(channel_.get(), cq, rpcmethod_Execute_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::zkprover::InputProver, ::zkprover::ResExecute>* ZKProver::Stub::PrepareAsyncExecuteRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::zkprover::InputProver, ::zkprover::ResExecute>::Create(channel_.get(), cq, rpcmethod_Execute_, context, false, nullptr);
}

ZKProver::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZKProver_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ZKProver::Service, ::zkprover::NoParams, ::zkprover::ResGetStatus>(
          [](ZKProver::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::zkprover::NoParams* req,
             ::zkprover::ResGetStatus* resp) {
               return service->GetStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZKProver_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ZKProver::Service, ::zkprover::InputProver, ::zkprover::ResGenProof>(
          [](ZKProver::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::zkprover::InputProver* req,
             ::zkprover::ResGenProof* resp) {
               return service->GenProof(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZKProver_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ZKProver::Service, ::zkprover::RequestId, ::zkprover::ResCancel>(
          [](ZKProver::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::zkprover::RequestId* req,
             ::zkprover::ResCancel* resp) {
               return service->Cancel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZKProver_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ZKProver::Service, ::zkprover::RequestId, ::zkprover::ResGetProof>(
          [](ZKProver::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::zkprover::RequestId* req,
             ::zkprover::ResGetProof* resp) {
               return service->GetProof(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZKProver_method_names[4],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< ZKProver::Service, ::zkprover::InputProver, ::zkprover::ResExecute>(
          [](ZKProver::Service* service,
             ::grpc_impl::ServerContext* ctx,
             ::grpc_impl::ServerReaderWriter<::zkprover::ResExecute,
             ::zkprover::InputProver>* stream) {
               return service->Execute(ctx, stream);
             }, this)));
}

ZKProver::Service::~Service() {
}

::grpc::Status ZKProver::Service::GetStatus(::grpc::ServerContext* context, const ::zkprover::NoParams* request, ::zkprover::ResGetStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZKProver::Service::GenProof(::grpc::ServerContext* context, const ::zkprover::InputProver* request, ::zkprover::ResGenProof* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZKProver::Service::Cancel(::grpc::ServerContext* context, const ::zkprover::RequestId* request, ::zkprover::ResCancel* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZKProver::Service::GetProof(::grpc::ServerContext* context, const ::zkprover::RequestId* request, ::zkprover::ResGetProof* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZKProver::Service::Execute(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::zkprover::ResExecute, ::zkprover::InputProver>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace zkprover

