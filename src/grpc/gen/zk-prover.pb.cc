// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zk-prover.proto

#include "zk-prover.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_zk_2dprover_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InputProver_DbEntry_DoNotUse_zk_2dprover_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_zk_2dprover_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Proof_zk_2dprover_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_zk_2dprover_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProofB_zk_2dprover_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_zk_2dprover_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PublicInputs_zk_2dprover_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_zk_2dprover_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PublicInputsExtended_zk_2dprover_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_zk_2dprover_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResExecute_DiffKeysValuesEntry_DoNotUse_zk_2dprover_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_zk_2dprover_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ZkCounters_zk_2dprover_2eproto;
namespace zkprover {
class VersionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Version> _instance;
} _Version_default_instance_;
class NoParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NoParams> _instance;
} _NoParams_default_instance_;
class RequestIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestId> _instance;
} _RequestId_default_instance_;
class ResGetStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResGetStatus> _instance;
} _ResGetStatus_default_instance_;
class ResGenProofDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResGenProof> _instance;
} _ResGenProof_default_instance_;
class ResCancelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResCancel> _instance;
} _ResCancel_default_instance_;
class ResGetProofDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResGetProof> _instance;
} _ResGetProof_default_instance_;
class ResExecute_DiffKeysValuesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResExecute_DiffKeysValuesEntry_DoNotUse> _instance;
} _ResExecute_DiffKeysValuesEntry_DoNotUse_default_instance_;
class ResExecuteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResExecute> _instance;
} _ResExecute_default_instance_;
class ZkCountersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ZkCounters> _instance;
} _ZkCounters_default_instance_;
class PublicInputsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PublicInputs> _instance;
} _PublicInputs_default_instance_;
class ProofBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProofB> _instance;
} _ProofB_default_instance_;
class ProofDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Proof> _instance;
} _Proof_default_instance_;
class InputProver_DbEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InputProver_DbEntry_DoNotUse> _instance;
} _InputProver_DbEntry_DoNotUse_default_instance_;
class InputProverDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InputProver> _instance;
} _InputProver_default_instance_;
class InputProverExecuteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InputProverExecute> _instance;
} _InputProverExecute_default_instance_;
class PublicInputsExtendedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PublicInputsExtended> _instance;
} _PublicInputsExtended_default_instance_;
}  // namespace zkprover
static void InitDefaultsscc_info_InputProver_zk_2dprover_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zkprover::_InputProver_default_instance_;
    new (ptr) ::zkprover::InputProver();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zkprover::InputProver::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InputProver_zk_2dprover_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_InputProver_zk_2dprover_2eproto}, {
      &scc_info_PublicInputs_zk_2dprover_2eproto.base,
      &scc_info_InputProver_DbEntry_DoNotUse_zk_2dprover_2eproto.base,}};

static void InitDefaultsscc_info_InputProver_DbEntry_DoNotUse_zk_2dprover_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zkprover::_InputProver_DbEntry_DoNotUse_default_instance_;
    new (ptr) ::zkprover::InputProver_DbEntry_DoNotUse();
  }
  ::zkprover::InputProver_DbEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InputProver_DbEntry_DoNotUse_zk_2dprover_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InputProver_DbEntry_DoNotUse_zk_2dprover_2eproto}, {}};

static void InitDefaultsscc_info_InputProverExecute_zk_2dprover_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zkprover::_InputProverExecute_default_instance_;
    new (ptr) ::zkprover::InputProverExecute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zkprover::InputProverExecute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InputProverExecute_zk_2dprover_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InputProverExecute_zk_2dprover_2eproto}, {
      &scc_info_PublicInputs_zk_2dprover_2eproto.base,}};

static void InitDefaultsscc_info_NoParams_zk_2dprover_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zkprover::_NoParams_default_instance_;
    new (ptr) ::zkprover::NoParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zkprover::NoParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NoParams_zk_2dprover_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NoParams_zk_2dprover_2eproto}, {}};

static void InitDefaultsscc_info_Proof_zk_2dprover_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zkprover::_Proof_default_instance_;
    new (ptr) ::zkprover::Proof();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zkprover::Proof::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Proof_zk_2dprover_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Proof_zk_2dprover_2eproto}, {
      &scc_info_ProofB_zk_2dprover_2eproto.base,}};

static void InitDefaultsscc_info_ProofB_zk_2dprover_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zkprover::_ProofB_default_instance_;
    new (ptr) ::zkprover::ProofB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zkprover::ProofB::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProofB_zk_2dprover_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProofB_zk_2dprover_2eproto}, {}};

static void InitDefaultsscc_info_PublicInputs_zk_2dprover_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zkprover::_PublicInputs_default_instance_;
    new (ptr) ::zkprover::PublicInputs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zkprover::PublicInputs::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PublicInputs_zk_2dprover_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PublicInputs_zk_2dprover_2eproto}, {}};

static void InitDefaultsscc_info_PublicInputsExtended_zk_2dprover_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zkprover::_PublicInputsExtended_default_instance_;
    new (ptr) ::zkprover::PublicInputsExtended();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zkprover::PublicInputsExtended::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PublicInputsExtended_zk_2dprover_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PublicInputsExtended_zk_2dprover_2eproto}, {
      &scc_info_PublicInputs_zk_2dprover_2eproto.base,}};

static void InitDefaultsscc_info_RequestId_zk_2dprover_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zkprover::_RequestId_default_instance_;
    new (ptr) ::zkprover::RequestId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zkprover::RequestId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestId_zk_2dprover_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RequestId_zk_2dprover_2eproto}, {}};

static void InitDefaultsscc_info_ResCancel_zk_2dprover_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zkprover::_ResCancel_default_instance_;
    new (ptr) ::zkprover::ResCancel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zkprover::ResCancel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResCancel_zk_2dprover_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ResCancel_zk_2dprover_2eproto}, {}};

static void InitDefaultsscc_info_ResExecute_zk_2dprover_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zkprover::_ResExecute_default_instance_;
    new (ptr) ::zkprover::ResExecute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zkprover::ResExecute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ResExecute_zk_2dprover_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ResExecute_zk_2dprover_2eproto}, {
      &scc_info_ResExecute_DiffKeysValuesEntry_DoNotUse_zk_2dprover_2eproto.base,
      &scc_info_ZkCounters_zk_2dprover_2eproto.base,}};

static void InitDefaultsscc_info_ResExecute_DiffKeysValuesEntry_DoNotUse_zk_2dprover_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zkprover::_ResExecute_DiffKeysValuesEntry_DoNotUse_default_instance_;
    new (ptr) ::zkprover::ResExecute_DiffKeysValuesEntry_DoNotUse();
  }
  ::zkprover::ResExecute_DiffKeysValuesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResExecute_DiffKeysValuesEntry_DoNotUse_zk_2dprover_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ResExecute_DiffKeysValuesEntry_DoNotUse_zk_2dprover_2eproto}, {}};

static void InitDefaultsscc_info_ResGenProof_zk_2dprover_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zkprover::_ResGenProof_default_instance_;
    new (ptr) ::zkprover::ResGenProof();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zkprover::ResGenProof::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResGenProof_zk_2dprover_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ResGenProof_zk_2dprover_2eproto}, {}};

static void InitDefaultsscc_info_ResGetProof_zk_2dprover_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zkprover::_ResGetProof_default_instance_;
    new (ptr) ::zkprover::ResGetProof();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zkprover::ResGetProof::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ResGetProof_zk_2dprover_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ResGetProof_zk_2dprover_2eproto}, {
      &scc_info_Proof_zk_2dprover_2eproto.base,
      &scc_info_PublicInputsExtended_zk_2dprover_2eproto.base,}};

static void InitDefaultsscc_info_ResGetStatus_zk_2dprover_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zkprover::_ResGetStatus_default_instance_;
    new (ptr) ::zkprover::ResGetStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zkprover::ResGetStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResGetStatus_zk_2dprover_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ResGetStatus_zk_2dprover_2eproto}, {}};

static void InitDefaultsscc_info_Version_zk_2dprover_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zkprover::_Version_default_instance_;
    new (ptr) ::zkprover::Version();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zkprover::Version::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Version_zk_2dprover_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Version_zk_2dprover_2eproto}, {}};

static void InitDefaultsscc_info_ZkCounters_zk_2dprover_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zkprover::_ZkCounters_default_instance_;
    new (ptr) ::zkprover::ZkCounters();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zkprover::ZkCounters::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ZkCounters_zk_2dprover_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ZkCounters_zk_2dprover_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_zk_2dprover_2eproto[17];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_zk_2dprover_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_zk_2dprover_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_zk_2dprover_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zkprover::Version, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zkprover::Version, v0_0_1_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zkprover::NoParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zkprover::RequestId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zkprover::RequestId, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zkprover::ResGetStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zkprover::ResGetStatus, state_),
  PROTOBUF_FIELD_OFFSET(::zkprover::ResGetStatus, last_computed_request_id_),
  PROTOBUF_FIELD_OFFSET(::zkprover::ResGetStatus, last_computed_end_time_),
  PROTOBUF_FIELD_OFFSET(::zkprover::ResGetStatus, current_computing_request_id_),
  PROTOBUF_FIELD_OFFSET(::zkprover::ResGetStatus, current_computing_start_time_),
  PROTOBUF_FIELD_OFFSET(::zkprover::ResGetStatus, version_proto_),
  PROTOBUF_FIELD_OFFSET(::zkprover::ResGetStatus, version_server_),
  PROTOBUF_FIELD_OFFSET(::zkprover::ResGetStatus, pending_request_queue_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zkprover::ResGenProof, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zkprover::ResGenProof, id_),
  PROTOBUF_FIELD_OFFSET(::zkprover::ResGenProof, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zkprover::ResCancel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zkprover::ResCancel, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zkprover::ResGetProof, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zkprover::ResGetProof, id_),
  PROTOBUF_FIELD_OFFSET(::zkprover::ResGetProof, proof_),
  PROTOBUF_FIELD_OFFSET(::zkprover::ResGetProof, public__),
  PROTOBUF_FIELD_OFFSET(::zkprover::ResGetProof, result_),
  PROTOBUF_FIELD_OFFSET(::zkprover::ResGetProof, result_string_),
  PROTOBUF_FIELD_OFFSET(::zkprover::ResExecute_DiffKeysValuesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zkprover::ResExecute_DiffKeysValuesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zkprover::ResExecute_DiffKeysValuesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::zkprover::ResExecute_DiffKeysValuesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zkprover::ResExecute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zkprover::ResExecute, diff_keys_values_),
  PROTOBUF_FIELD_OFFSET(::zkprover::ResExecute, new_state_root_),
  PROTOBUF_FIELD_OFFSET(::zkprover::ResExecute, counters_),
  PROTOBUF_FIELD_OFFSET(::zkprover::ResExecute, receipts_),
  PROTOBUF_FIELD_OFFSET(::zkprover::ResExecute, logs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zkprover::ZkCounters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zkprover::ZkCounters, ecrecover_),
  PROTOBUF_FIELD_OFFSET(::zkprover::ZkCounters, hash_poseidon_),
  PROTOBUF_FIELD_OFFSET(::zkprover::ZkCounters, hash_keccak_),
  PROTOBUF_FIELD_OFFSET(::zkprover::ZkCounters, arith_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zkprover::PublicInputs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zkprover::PublicInputs, old_state_root_),
  PROTOBUF_FIELD_OFFSET(::zkprover::PublicInputs, old_local_exit_root_),
  PROTOBUF_FIELD_OFFSET(::zkprover::PublicInputs, new_state_root_),
  PROTOBUF_FIELD_OFFSET(::zkprover::PublicInputs, new_local_exit_root_),
  PROTOBUF_FIELD_OFFSET(::zkprover::PublicInputs, sequencer_addr_),
  PROTOBUF_FIELD_OFFSET(::zkprover::PublicInputs, batch_hash_data_),
  PROTOBUF_FIELD_OFFSET(::zkprover::PublicInputs, chain_id_),
  PROTOBUF_FIELD_OFFSET(::zkprover::PublicInputs, batch_num_),
  PROTOBUF_FIELD_OFFSET(::zkprover::PublicInputs, block_num_),
  PROTOBUF_FIELD_OFFSET(::zkprover::PublicInputs, eth_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zkprover::ProofB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zkprover::ProofB, proofs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zkprover::Proof, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zkprover::Proof, proofa_),
  PROTOBUF_FIELD_OFFSET(::zkprover::Proof, proofb_),
  PROTOBUF_FIELD_OFFSET(::zkprover::Proof, proofc_),
  PROTOBUF_FIELD_OFFSET(::zkprover::InputProver_DbEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zkprover::InputProver_DbEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zkprover::InputProver_DbEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::zkprover::InputProver_DbEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zkprover::InputProver, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zkprover::InputProver, public_inputs_),
  PROTOBUF_FIELD_OFFSET(::zkprover::InputProver, global_exit_root_),
  PROTOBUF_FIELD_OFFSET(::zkprover::InputProver, txs_),
  PROTOBUF_FIELD_OFFSET(::zkprover::InputProver, db_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zkprover::InputProverExecute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zkprover::InputProverExecute, public_inputs_),
  PROTOBUF_FIELD_OFFSET(::zkprover::InputProverExecute, global_exit_root_),
  PROTOBUF_FIELD_OFFSET(::zkprover::InputProverExecute, txs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zkprover::PublicInputsExtended, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zkprover::PublicInputsExtended, public_inputs_),
  PROTOBUF_FIELD_OFFSET(::zkprover::PublicInputsExtended, input_hash_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::zkprover::Version)},
  { 6, -1, sizeof(::zkprover::NoParams)},
  { 11, -1, sizeof(::zkprover::RequestId)},
  { 17, -1, sizeof(::zkprover::ResGetStatus)},
  { 30, -1, sizeof(::zkprover::ResGenProof)},
  { 37, -1, sizeof(::zkprover::ResCancel)},
  { 43, -1, sizeof(::zkprover::ResGetProof)},
  { 53, 60, sizeof(::zkprover::ResExecute_DiffKeysValuesEntry_DoNotUse)},
  { 62, -1, sizeof(::zkprover::ResExecute)},
  { 72, -1, sizeof(::zkprover::ZkCounters)},
  { 81, -1, sizeof(::zkprover::PublicInputs)},
  { 96, -1, sizeof(::zkprover::ProofB)},
  { 102, -1, sizeof(::zkprover::Proof)},
  { 110, 117, sizeof(::zkprover::InputProver_DbEntry_DoNotUse)},
  { 119, -1, sizeof(::zkprover::InputProver)},
  { 128, -1, sizeof(::zkprover::InputProverExecute)},
  { 136, -1, sizeof(::zkprover::PublicInputsExtended)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zkprover::_Version_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zkprover::_NoParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zkprover::_RequestId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zkprover::_ResGetStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zkprover::_ResGenProof_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zkprover::_ResCancel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zkprover::_ResGetProof_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zkprover::_ResExecute_DiffKeysValuesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zkprover::_ResExecute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zkprover::_ZkCounters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zkprover::_PublicInputs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zkprover::_ProofB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zkprover::_Proof_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zkprover::_InputProver_DbEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zkprover::_InputProver_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zkprover::_InputProverExecute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zkprover::_PublicInputsExtended_default_instance_),
};

const char descriptor_table_protodef_zk_2dprover_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017zk-prover.proto\022\010zkprover\"\031\n\007Version\022\016"
  "\n\006v0_0_1\030\001 \001(\t\"\n\n\010NoParams\"\027\n\tRequestId\022"
  "\n\n\002id\030\001 \001(\t\"\342\002\n\014ResGetStatus\0222\n\005state\030\001 "
  "\001(\0162#.zkprover.ResGetStatus.StatusProver"
  "\022 \n\030last_computed_request_id\030\002 \001(\t\022\036\n\026la"
  "st_computed_end_time\030\003 \001(\004\022$\n\034current_co"
  "mputing_request_id\030\004 \001(\t\022$\n\034current_comp"
  "uting_start_time\030\005 \001(\004\022\025\n\rversion_proto\030"
  "\006 \001(\t\022\026\n\016version_server\030\007 \001(\t\022!\n\031pending"
  "_request_queue_ids\030\010 \003(\t\">\n\014StatusProver"
  "\022\013\n\007BOOTING\020\000\022\r\n\tCOMPUTING\020\001\022\010\n\004IDLE\020\002\022\010"
  "\n\004HALT\020\003\"\210\001\n\013ResGenProof\022\n\n\002id\030\001 \001(\t\0224\n\006"
  "result\030\002 \001(\0162$.zkprover.ResGenProof.Resu"
  "ltGenProof\"7\n\016ResultGenProof\022\006\n\002OK\020\000\022\t\n\005"
  "ERROR\020\001\022\022\n\016INTERNAL_ERROR\020\002\"`\n\tResCancel"
  "\0220\n\006result\030\001 \001(\0162 .zkprover.ResCancel.Re"
  "sultCancel\"!\n\014ResultCancel\022\006\n\002OK\020\000\022\t\n\005ER"
  "ROR\020\001\"\245\002\n\013ResGetProof\022\n\n\002id\030\001 \001(\t\022\036\n\005pro"
  "of\030\002 \001(\0132\017.zkprover.Proof\022.\n\006public\030\003 \001("
  "\0132\036.zkprover.PublicInputsExtended\0224\n\006res"
  "ult\030\004 \001(\0162$.zkprover.ResGetProof.ResultG"
  "etProof\022\025\n\rresult_string\030\005 \001(\t\"m\n\016Result"
  "GetProof\022\020\n\014COMPLETED_OK\020\000\022\t\n\005ERROR\020\001\022\021\n"
  "\rCOMPLETED_ERR\020\002\022\013\n\007PENDING\020\003\022\022\n\016INTERNA"
  "L_ERROR\020\004\022\n\n\006CANCEL\020\005\"\347\001\n\nResExecute\022B\n\020"
  "diff_keys_values\030\001 \003(\0132(.zkprover.ResExe"
  "cute.DiffKeysValuesEntry\022\026\n\016new_state_ro"
  "ot\030\002 \001(\t\022&\n\010counters\030\003 \001(\0132\024.zkprover.Zk"
  "Counters\022\020\n\010receipts\030\004 \003(\t\022\014\n\004logs\030\005 \003(\t"
  "\0325\n\023DiffKeysValuesEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005"
  "value\030\002 \001(\t:\0028\001\"Z\n\nZkCounters\022\021\n\tecrecov"
  "er\030\001 \001(\r\022\025\n\rhash_poseidon\030\002 \001(\r\022\023\n\013hash_"
  "keccak\030\003 \001(\r\022\r\n\005arith\030\004 \001(\r\"\370\001\n\014PublicIn"
  "puts\022\026\n\016old_state_root\030\001 \001(\t\022\033\n\023old_loca"
  "l_exit_root\030\002 \001(\t\022\026\n\016new_state_root\030\003 \001("
  "\t\022\033\n\023new_local_exit_root\030\004 \001(\t\022\026\n\016sequen"
  "cer_addr\030\005 \001(\t\022\027\n\017batch_hash_data\030\006 \001(\t\022"
  "\020\n\010chain_id\030\007 \001(\r\022\021\n\tbatch_num\030\010 \001(\r\022\021\n\t"
  "block_num\030\t \001(\r\022\025\n\reth_timestamp\030\n \001(\004\"\030"
  "\n\006ProofB\022\016\n\006proofs\030\001 \003(\t\"I\n\005Proof\022\016\n\006pro"
  "ofA\030\001 \003(\t\022 \n\006proofB\030\002 \003(\0132\020.zkprover.Pro"
  "ofB\022\016\n\006proofC\030\003 \003(\t\"\271\001\n\013InputProver\022-\n\rp"
  "ublic_inputs\030\001 \001(\0132\026.zkprover.PublicInpu"
  "ts\022\030\n\020global_exit_root\030\002 \001(\t\022\013\n\003txs\030\003 \003("
  "\t\022)\n\002db\030\004 \003(\0132\035.zkprover.InputProver.DbE"
  "ntry\032)\n\007DbEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 "
  "\001(\t:\0028\001\"j\n\022InputProverExecute\022-\n\rpublic_"
  "inputs\030\001 \001(\0132\026.zkprover.PublicInputs\022\030\n\020"
  "global_exit_root\030\002 \001(\t\022\013\n\003txs\030\003 \003(\t\"Y\n\024P"
  "ublicInputsExtended\022-\n\rpublic_inputs\030\001 \001"
  "(\0132\026.zkprover.PublicInputs\022\022\n\ninput_hash"
  "\030\002 \001(\t2\257\002\n\010ZKProver\0229\n\tGetStatus\022\022.zkpro"
  "ver.NoParams\032\026.zkprover.ResGetStatus\"\000\022:"
  "\n\010GenProof\022\025.zkprover.InputProver\032\025.zkpr"
  "over.ResGenProof\"\000\0224\n\006Cancel\022\023.zkprover."
  "RequestId\032\023.zkprover.ResCancel\"\000\0228\n\010GetP"
  "roof\022\023.zkprover.RequestId\032\025.zkprover.Res"
  "GetProof\"\000\022<\n\007Execute\022\025.zkprover.InputPr"
  "over\032\024.zkprover.ResExecute\"\000(\0010\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_zk_2dprover_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_zk_2dprover_2eproto_sccs[17] = {
  &scc_info_InputProver_zk_2dprover_2eproto.base,
  &scc_info_InputProver_DbEntry_DoNotUse_zk_2dprover_2eproto.base,
  &scc_info_InputProverExecute_zk_2dprover_2eproto.base,
  &scc_info_NoParams_zk_2dprover_2eproto.base,
  &scc_info_Proof_zk_2dprover_2eproto.base,
  &scc_info_ProofB_zk_2dprover_2eproto.base,
  &scc_info_PublicInputs_zk_2dprover_2eproto.base,
  &scc_info_PublicInputsExtended_zk_2dprover_2eproto.base,
  &scc_info_RequestId_zk_2dprover_2eproto.base,
  &scc_info_ResCancel_zk_2dprover_2eproto.base,
  &scc_info_ResExecute_zk_2dprover_2eproto.base,
  &scc_info_ResExecute_DiffKeysValuesEntry_DoNotUse_zk_2dprover_2eproto.base,
  &scc_info_ResGenProof_zk_2dprover_2eproto.base,
  &scc_info_ResGetProof_zk_2dprover_2eproto.base,
  &scc_info_ResGetStatus_zk_2dprover_2eproto.base,
  &scc_info_Version_zk_2dprover_2eproto.base,
  &scc_info_ZkCounters_zk_2dprover_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_zk_2dprover_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_zk_2dprover_2eproto = {
  false, false, descriptor_table_protodef_zk_2dprover_2eproto, "zk-prover.proto", 2360,
  &descriptor_table_zk_2dprover_2eproto_once, descriptor_table_zk_2dprover_2eproto_sccs, descriptor_table_zk_2dprover_2eproto_deps, 17, 0,
  schemas, file_default_instances, TableStruct_zk_2dprover_2eproto::offsets,
  file_level_metadata_zk_2dprover_2eproto, 17, file_level_enum_descriptors_zk_2dprover_2eproto, file_level_service_descriptors_zk_2dprover_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_zk_2dprover_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_zk_2dprover_2eproto)), true);
namespace zkprover {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResGetStatus_StatusProver_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_zk_2dprover_2eproto);
  return file_level_enum_descriptors_zk_2dprover_2eproto[0];
}
bool ResGetStatus_StatusProver_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ResGetStatus_StatusProver ResGetStatus::BOOTING;
constexpr ResGetStatus_StatusProver ResGetStatus::COMPUTING;
constexpr ResGetStatus_StatusProver ResGetStatus::IDLE;
constexpr ResGetStatus_StatusProver ResGetStatus::HALT;
constexpr ResGetStatus_StatusProver ResGetStatus::StatusProver_MIN;
constexpr ResGetStatus_StatusProver ResGetStatus::StatusProver_MAX;
constexpr int ResGetStatus::StatusProver_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResGenProof_ResultGenProof_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_zk_2dprover_2eproto);
  return file_level_enum_descriptors_zk_2dprover_2eproto[1];
}
bool ResGenProof_ResultGenProof_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ResGenProof_ResultGenProof ResGenProof::OK;
constexpr ResGenProof_ResultGenProof ResGenProof::ERROR;
constexpr ResGenProof_ResultGenProof ResGenProof::INTERNAL_ERROR;
constexpr ResGenProof_ResultGenProof ResGenProof::ResultGenProof_MIN;
constexpr ResGenProof_ResultGenProof ResGenProof::ResultGenProof_MAX;
constexpr int ResGenProof::ResultGenProof_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResCancel_ResultCancel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_zk_2dprover_2eproto);
  return file_level_enum_descriptors_zk_2dprover_2eproto[2];
}
bool ResCancel_ResultCancel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ResCancel_ResultCancel ResCancel::OK;
constexpr ResCancel_ResultCancel ResCancel::ERROR;
constexpr ResCancel_ResultCancel ResCancel::ResultCancel_MIN;
constexpr ResCancel_ResultCancel ResCancel::ResultCancel_MAX;
constexpr int ResCancel::ResultCancel_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResGetProof_ResultGetProof_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_zk_2dprover_2eproto);
  return file_level_enum_descriptors_zk_2dprover_2eproto[3];
}
bool ResGetProof_ResultGetProof_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ResGetProof_ResultGetProof ResGetProof::COMPLETED_OK;
constexpr ResGetProof_ResultGetProof ResGetProof::ERROR;
constexpr ResGetProof_ResultGetProof ResGetProof::COMPLETED_ERR;
constexpr ResGetProof_ResultGetProof ResGetProof::PENDING;
constexpr ResGetProof_ResultGetProof ResGetProof::INTERNAL_ERROR;
constexpr ResGetProof_ResultGetProof ResGetProof::CANCEL;
constexpr ResGetProof_ResultGetProof ResGetProof::ResultGetProof_MIN;
constexpr ResGetProof_ResultGetProof ResGetProof::ResultGetProof_MAX;
constexpr int ResGetProof::ResultGetProof_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Version::InitAsDefaultInstance() {
}
class Version::_Internal {
 public:
};

Version::Version(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zkprover.Version)
}
Version::Version(const Version& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  v0_0_1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_v0_0_1().empty()) {
    v0_0_1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_v0_0_1(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:zkprover.Version)
}

void Version::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Version_zk_2dprover_2eproto.base);
  v0_0_1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Version::~Version() {
  // @@protoc_insertion_point(destructor:zkprover.Version)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Version::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  v0_0_1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Version::ArenaDtor(void* object) {
  Version* _this = reinterpret_cast< Version* >(object);
  (void)_this;
}
void Version::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Version::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Version& Version::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Version_zk_2dprover_2eproto.base);
  return *internal_default_instance();
}


void Version::Clear() {
// @@protoc_insertion_point(message_clear_start:zkprover.Version)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  v0_0_1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Version::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string v0_0_1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_v0_0_1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zkprover.Version.v0_0_1"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Version::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zkprover.Version)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string v0_0_1 = 1;
  if (this->v0_0_1().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_v0_0_1().data(), static_cast<int>(this->_internal_v0_0_1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zkprover.Version.v0_0_1");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_v0_0_1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zkprover.Version)
  return target;
}

size_t Version::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zkprover.Version)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string v0_0_1 = 1;
  if (this->v0_0_1().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_v0_0_1());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Version::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zkprover.Version)
  GOOGLE_DCHECK_NE(&from, this);
  const Version* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Version>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zkprover.Version)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zkprover.Version)
    MergeFrom(*source);
  }
}

void Version::MergeFrom(const Version& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zkprover.Version)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.v0_0_1().size() > 0) {
    _internal_set_v0_0_1(from._internal_v0_0_1());
  }
}

void Version::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zkprover.Version)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Version::CopyFrom(const Version& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zkprover.Version)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Version::IsInitialized() const {
  return true;
}

void Version::InternalSwap(Version* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  v0_0_1_.Swap(&other->v0_0_1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Version::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NoParams::InitAsDefaultInstance() {
}
class NoParams::_Internal {
 public:
};

NoParams::NoParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zkprover.NoParams)
}
NoParams::NoParams(const NoParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zkprover.NoParams)
}

void NoParams::SharedCtor() {
}

NoParams::~NoParams() {
  // @@protoc_insertion_point(destructor:zkprover.NoParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NoParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NoParams::ArenaDtor(void* object) {
  NoParams* _this = reinterpret_cast< NoParams* >(object);
  (void)_this;
}
void NoParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NoParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NoParams& NoParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NoParams_zk_2dprover_2eproto.base);
  return *internal_default_instance();
}


void NoParams::Clear() {
// @@protoc_insertion_point(message_clear_start:zkprover.NoParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NoParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NoParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zkprover.NoParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zkprover.NoParams)
  return target;
}

size_t NoParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zkprover.NoParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NoParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zkprover.NoParams)
  GOOGLE_DCHECK_NE(&from, this);
  const NoParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NoParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zkprover.NoParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zkprover.NoParams)
    MergeFrom(*source);
  }
}

void NoParams::MergeFrom(const NoParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zkprover.NoParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void NoParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zkprover.NoParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoParams::CopyFrom(const NoParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zkprover.NoParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoParams::IsInitialized() const {
  return true;
}

void NoParams::InternalSwap(NoParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NoParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RequestId::InitAsDefaultInstance() {
}
class RequestId::_Internal {
 public:
};

RequestId::RequestId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zkprover.RequestId)
}
RequestId::RequestId(const RequestId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:zkprover.RequestId)
}

void RequestId::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RequestId_zk_2dprover_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RequestId::~RequestId() {
  // @@protoc_insertion_point(destructor:zkprover.RequestId)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RequestId::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RequestId::ArenaDtor(void* object) {
  RequestId* _this = reinterpret_cast< RequestId* >(object);
  (void)_this;
}
void RequestId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestId& RequestId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestId_zk_2dprover_2eproto.base);
  return *internal_default_instance();
}


void RequestId::Clear() {
// @@protoc_insertion_point(message_clear_start:zkprover.RequestId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zkprover.RequestId.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zkprover.RequestId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zkprover.RequestId.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zkprover.RequestId)
  return target;
}

size_t RequestId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zkprover.RequestId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zkprover.RequestId)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zkprover.RequestId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zkprover.RequestId)
    MergeFrom(*source);
  }
}

void RequestId::MergeFrom(const RequestId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zkprover.RequestId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void RequestId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zkprover.RequestId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestId::CopyFrom(const RequestId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zkprover.RequestId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestId::IsInitialized() const {
  return true;
}

void RequestId::InternalSwap(RequestId* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResGetStatus::InitAsDefaultInstance() {
}
class ResGetStatus::_Internal {
 public:
};

ResGetStatus::ResGetStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pending_request_queue_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zkprover.ResGetStatus)
}
ResGetStatus::ResGetStatus(const ResGetStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pending_request_queue_ids_(from.pending_request_queue_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  last_computed_request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_last_computed_request_id().empty()) {
    last_computed_request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_last_computed_request_id(),
      GetArena());
  }
  current_computing_request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_current_computing_request_id().empty()) {
    current_computing_request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_current_computing_request_id(),
      GetArena());
  }
  version_proto_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version_proto().empty()) {
    version_proto_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_version_proto(),
      GetArena());
  }
  version_server_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version_server().empty()) {
    version_server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_version_server(),
      GetArena());
  }
  ::memcpy(&last_computed_end_time_, &from.last_computed_end_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&last_computed_end_time_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:zkprover.ResGetStatus)
}

void ResGetStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResGetStatus_zk_2dprover_2eproto.base);
  last_computed_request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  current_computing_request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_proto_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_server_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&last_computed_end_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&last_computed_end_time_)) + sizeof(state_));
}

ResGetStatus::~ResGetStatus() {
  // @@protoc_insertion_point(destructor:zkprover.ResGetStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResGetStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  last_computed_request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  current_computing_request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_proto_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_server_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResGetStatus::ArenaDtor(void* object) {
  ResGetStatus* _this = reinterpret_cast< ResGetStatus* >(object);
  (void)_this;
}
void ResGetStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResGetStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResGetStatus& ResGetStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResGetStatus_zk_2dprover_2eproto.base);
  return *internal_default_instance();
}


void ResGetStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:zkprover.ResGetStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pending_request_queue_ids_.Clear();
  last_computed_request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  current_computing_request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_proto_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_server_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&last_computed_end_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&last_computed_end_time_)) + sizeof(state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResGetStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zkprover.ResGetStatus.StatusProver state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::zkprover::ResGetStatus_StatusProver>(val));
        } else goto handle_unusual;
        continue;
      // string last_computed_request_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_last_computed_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zkprover.ResGetStatus.last_computed_request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 last_computed_end_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          last_computed_end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string current_computing_request_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_current_computing_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zkprover.ResGetStatus.current_computing_request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 current_computing_start_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          current_computing_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version_proto = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_version_proto();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zkprover.ResGetStatus.version_proto"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version_server = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_version_server();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zkprover.ResGetStatus.version_server"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string pending_request_queue_ids = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_pending_request_queue_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zkprover.ResGetStatus.pending_request_queue_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResGetStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zkprover.ResGetStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zkprover.ResGetStatus.StatusProver state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_state(), target);
  }

  // string last_computed_request_id = 2;
  if (this->last_computed_request_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_computed_request_id().data(), static_cast<int>(this->_internal_last_computed_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zkprover.ResGetStatus.last_computed_request_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_last_computed_request_id(), target);
  }

  // uint64 last_computed_end_time = 3;
  if (this->last_computed_end_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_last_computed_end_time(), target);
  }

  // string current_computing_request_id = 4;
  if (this->current_computing_request_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_current_computing_request_id().data(), static_cast<int>(this->_internal_current_computing_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zkprover.ResGetStatus.current_computing_request_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_current_computing_request_id(), target);
  }

  // uint64 current_computing_start_time = 5;
  if (this->current_computing_start_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_current_computing_start_time(), target);
  }

  // string version_proto = 6;
  if (this->version_proto().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version_proto().data(), static_cast<int>(this->_internal_version_proto().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zkprover.ResGetStatus.version_proto");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_version_proto(), target);
  }

  // string version_server = 7;
  if (this->version_server().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version_server().data(), static_cast<int>(this->_internal_version_server().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zkprover.ResGetStatus.version_server");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_version_server(), target);
  }

  // repeated string pending_request_queue_ids = 8;
  for (int i = 0, n = this->_internal_pending_request_queue_ids_size(); i < n; i++) {
    const auto& s = this->_internal_pending_request_queue_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zkprover.ResGetStatus.pending_request_queue_ids");
    target = stream->WriteString(8, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zkprover.ResGetStatus)
  return target;
}

size_t ResGetStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zkprover.ResGetStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string pending_request_queue_ids = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(pending_request_queue_ids_.size());
  for (int i = 0, n = pending_request_queue_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      pending_request_queue_ids_.Get(i));
  }

  // string last_computed_request_id = 2;
  if (this->last_computed_request_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_computed_request_id());
  }

  // string current_computing_request_id = 4;
  if (this->current_computing_request_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_current_computing_request_id());
  }

  // string version_proto = 6;
  if (this->version_proto().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version_proto());
  }

  // string version_server = 7;
  if (this->version_server().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version_server());
  }

  // uint64 last_computed_end_time = 3;
  if (this->last_computed_end_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_last_computed_end_time());
  }

  // uint64 current_computing_start_time = 5;
  if (this->current_computing_start_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_current_computing_start_time());
  }

  // .zkprover.ResGetStatus.StatusProver state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResGetStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zkprover.ResGetStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ResGetStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResGetStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zkprover.ResGetStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zkprover.ResGetStatus)
    MergeFrom(*source);
  }
}

void ResGetStatus::MergeFrom(const ResGetStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zkprover.ResGetStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pending_request_queue_ids_.MergeFrom(from.pending_request_queue_ids_);
  if (from.last_computed_request_id().size() > 0) {
    _internal_set_last_computed_request_id(from._internal_last_computed_request_id());
  }
  if (from.current_computing_request_id().size() > 0) {
    _internal_set_current_computing_request_id(from._internal_current_computing_request_id());
  }
  if (from.version_proto().size() > 0) {
    _internal_set_version_proto(from._internal_version_proto());
  }
  if (from.version_server().size() > 0) {
    _internal_set_version_server(from._internal_version_server());
  }
  if (from.last_computed_end_time() != 0) {
    _internal_set_last_computed_end_time(from._internal_last_computed_end_time());
  }
  if (from.current_computing_start_time() != 0) {
    _internal_set_current_computing_start_time(from._internal_current_computing_start_time());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void ResGetStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zkprover.ResGetStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResGetStatus::CopyFrom(const ResGetStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zkprover.ResGetStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResGetStatus::IsInitialized() const {
  return true;
}

void ResGetStatus::InternalSwap(ResGetStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pending_request_queue_ids_.InternalSwap(&other->pending_request_queue_ids_);
  last_computed_request_id_.Swap(&other->last_computed_request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  current_computing_request_id_.Swap(&other->current_computing_request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_proto_.Swap(&other->version_proto_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_server_.Swap(&other->version_server_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResGetStatus, state_)
      + sizeof(ResGetStatus::state_)
      - PROTOBUF_FIELD_OFFSET(ResGetStatus, last_computed_end_time_)>(
          reinterpret_cast<char*>(&last_computed_end_time_),
          reinterpret_cast<char*>(&other->last_computed_end_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResGetStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResGenProof::InitAsDefaultInstance() {
}
class ResGenProof::_Internal {
 public:
};

ResGenProof::ResGenProof(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zkprover.ResGenProof)
}
ResGenProof::ResGenProof(const ResGenProof& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:zkprover.ResGenProof)
}

void ResGenProof::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResGenProof_zk_2dprover_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
}

ResGenProof::~ResGenProof() {
  // @@protoc_insertion_point(destructor:zkprover.ResGenProof)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResGenProof::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResGenProof::ArenaDtor(void* object) {
  ResGenProof* _this = reinterpret_cast< ResGenProof* >(object);
  (void)_this;
}
void ResGenProof::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResGenProof::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResGenProof& ResGenProof::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResGenProof_zk_2dprover_2eproto.base);
  return *internal_default_instance();
}


void ResGenProof::Clear() {
// @@protoc_insertion_point(message_clear_start:zkprover.ResGenProof)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResGenProof::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zkprover.ResGenProof.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zkprover.ResGenProof.ResultGenProof result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::zkprover::ResGenProof_ResultGenProof>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResGenProof::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zkprover.ResGenProof)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zkprover.ResGenProof.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .zkprover.ResGenProof.ResultGenProof result = 2;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zkprover.ResGenProof)
  return target;
}

size_t ResGenProof::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zkprover.ResGenProof)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .zkprover.ResGenProof.ResultGenProof result = 2;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResGenProof::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zkprover.ResGenProof)
  GOOGLE_DCHECK_NE(&from, this);
  const ResGenProof* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResGenProof>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zkprover.ResGenProof)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zkprover.ResGenProof)
    MergeFrom(*source);
  }
}

void ResGenProof::MergeFrom(const ResGenProof& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zkprover.ResGenProof)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void ResGenProof::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zkprover.ResGenProof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResGenProof::CopyFrom(const ResGenProof& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zkprover.ResGenProof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResGenProof::IsInitialized() const {
  return true;
}

void ResGenProof::InternalSwap(ResGenProof* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResGenProof::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResCancel::InitAsDefaultInstance() {
}
class ResCancel::_Internal {
 public:
};

ResCancel::ResCancel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zkprover.ResCancel)
}
ResCancel::ResCancel(const ResCancel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:zkprover.ResCancel)
}

void ResCancel::SharedCtor() {
  result_ = 0;
}

ResCancel::~ResCancel() {
  // @@protoc_insertion_point(destructor:zkprover.ResCancel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResCancel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ResCancel::ArenaDtor(void* object) {
  ResCancel* _this = reinterpret_cast< ResCancel* >(object);
  (void)_this;
}
void ResCancel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResCancel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResCancel& ResCancel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResCancel_zk_2dprover_2eproto.base);
  return *internal_default_instance();
}


void ResCancel::Clear() {
// @@protoc_insertion_point(message_clear_start:zkprover.ResCancel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResCancel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zkprover.ResCancel.ResultCancel result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::zkprover::ResCancel_ResultCancel>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResCancel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zkprover.ResCancel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zkprover.ResCancel.ResultCancel result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zkprover.ResCancel)
  return target;
}

size_t ResCancel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zkprover.ResCancel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zkprover.ResCancel.ResultCancel result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResCancel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zkprover.ResCancel)
  GOOGLE_DCHECK_NE(&from, this);
  const ResCancel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResCancel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zkprover.ResCancel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zkprover.ResCancel)
    MergeFrom(*source);
  }
}

void ResCancel::MergeFrom(const ResCancel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zkprover.ResCancel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void ResCancel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zkprover.ResCancel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResCancel::CopyFrom(const ResCancel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zkprover.ResCancel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResCancel::IsInitialized() const {
  return true;
}

void ResCancel::InternalSwap(ResCancel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResCancel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResGetProof::InitAsDefaultInstance() {
  ::zkprover::_ResGetProof_default_instance_._instance.get_mutable()->proof_ = const_cast< ::zkprover::Proof*>(
      ::zkprover::Proof::internal_default_instance());
  ::zkprover::_ResGetProof_default_instance_._instance.get_mutable()->public__ = const_cast< ::zkprover::PublicInputsExtended*>(
      ::zkprover::PublicInputsExtended::internal_default_instance());
}
class ResGetProof::_Internal {
 public:
  static const ::zkprover::Proof& proof(const ResGetProof* msg);
  static const ::zkprover::PublicInputsExtended& public_(const ResGetProof* msg);
};

const ::zkprover::Proof&
ResGetProof::_Internal::proof(const ResGetProof* msg) {
  return *msg->proof_;
}
const ::zkprover::PublicInputsExtended&
ResGetProof::_Internal::public_(const ResGetProof* msg) {
  return *msg->public__;
}
ResGetProof::ResGetProof(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zkprover.ResGetProof)
}
ResGetProof::ResGetProof(const ResGetProof& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  result_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_result_string().empty()) {
    result_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_result_string(),
      GetArena());
  }
  if (from._internal_has_proof()) {
    proof_ = new ::zkprover::Proof(*from.proof_);
  } else {
    proof_ = nullptr;
  }
  if (from._internal_has_public_()) {
    public__ = new ::zkprover::PublicInputsExtended(*from.public__);
  } else {
    public__ = nullptr;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:zkprover.ResGetProof)
}

void ResGetProof::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResGetProof_zk_2dprover_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&proof_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&proof_)) + sizeof(result_));
}

ResGetProof::~ResGetProof() {
  // @@protoc_insertion_point(destructor:zkprover.ResGetProof)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResGetProof::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete proof_;
  if (this != internal_default_instance()) delete public__;
}

void ResGetProof::ArenaDtor(void* object) {
  ResGetProof* _this = reinterpret_cast< ResGetProof* >(object);
  (void)_this;
}
void ResGetProof::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResGetProof::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResGetProof& ResGetProof::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResGetProof_zk_2dprover_2eproto.base);
  return *internal_default_instance();
}


void ResGetProof::Clear() {
// @@protoc_insertion_point(message_clear_start:zkprover.ResGetProof)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  result_string_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && proof_ != nullptr) {
    delete proof_;
  }
  proof_ = nullptr;
  if (GetArena() == nullptr && public__ != nullptr) {
    delete public__;
  }
  public__ = nullptr;
  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResGetProof::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zkprover.ResGetProof.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zkprover.Proof proof = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_proof(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zkprover.PublicInputsExtended public = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_public_(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zkprover.ResGetProof.ResultGetProof result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::zkprover::ResGetProof_ResultGetProof>(val));
        } else goto handle_unusual;
        continue;
      // string result_string = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_result_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zkprover.ResGetProof.result_string"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResGetProof::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zkprover.ResGetProof)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zkprover.ResGetProof.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .zkprover.Proof proof = 2;
  if (this->has_proof()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::proof(this), target, stream);
  }

  // .zkprover.PublicInputsExtended public = 3;
  if (this->has_public_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::public_(this), target, stream);
  }

  // .zkprover.ResGetProof.ResultGetProof result = 4;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_result(), target);
  }

  // string result_string = 5;
  if (this->result_string().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_result_string().data(), static_cast<int>(this->_internal_result_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zkprover.ResGetProof.result_string");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_result_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zkprover.ResGetProof)
  return target;
}

size_t ResGetProof::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zkprover.ResGetProof)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string result_string = 5;
  if (this->result_string().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_result_string());
  }

  // .zkprover.Proof proof = 2;
  if (this->has_proof()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *proof_);
  }

  // .zkprover.PublicInputsExtended public = 3;
  if (this->has_public_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *public__);
  }

  // .zkprover.ResGetProof.ResultGetProof result = 4;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResGetProof::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zkprover.ResGetProof)
  GOOGLE_DCHECK_NE(&from, this);
  const ResGetProof* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResGetProof>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zkprover.ResGetProof)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zkprover.ResGetProof)
    MergeFrom(*source);
  }
}

void ResGetProof::MergeFrom(const ResGetProof& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zkprover.ResGetProof)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.result_string().size() > 0) {
    _internal_set_result_string(from._internal_result_string());
  }
  if (from.has_proof()) {
    _internal_mutable_proof()->::zkprover::Proof::MergeFrom(from._internal_proof());
  }
  if (from.has_public_()) {
    _internal_mutable_public_()->::zkprover::PublicInputsExtended::MergeFrom(from._internal_public_());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void ResGetProof::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zkprover.ResGetProof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResGetProof::CopyFrom(const ResGetProof& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zkprover.ResGetProof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResGetProof::IsInitialized() const {
  return true;
}

void ResGetProof::InternalSwap(ResGetProof* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  result_string_.Swap(&other->result_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResGetProof, result_)
      + sizeof(ResGetProof::result_)
      - PROTOBUF_FIELD_OFFSET(ResGetProof, proof_)>(
          reinterpret_cast<char*>(&proof_),
          reinterpret_cast<char*>(&other->proof_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResGetProof::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ResExecute_DiffKeysValuesEntry_DoNotUse::ResExecute_DiffKeysValuesEntry_DoNotUse() {}
ResExecute_DiffKeysValuesEntry_DoNotUse::ResExecute_DiffKeysValuesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ResExecute_DiffKeysValuesEntry_DoNotUse::MergeFrom(const ResExecute_DiffKeysValuesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ResExecute_DiffKeysValuesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ResExecute_DiffKeysValuesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void ResExecute::InitAsDefaultInstance() {
  ::zkprover::_ResExecute_default_instance_._instance.get_mutable()->counters_ = const_cast< ::zkprover::ZkCounters*>(
      ::zkprover::ZkCounters::internal_default_instance());
}
class ResExecute::_Internal {
 public:
  static const ::zkprover::ZkCounters& counters(const ResExecute* msg);
};

const ::zkprover::ZkCounters&
ResExecute::_Internal::counters(const ResExecute* msg) {
  return *msg->counters_;
}
ResExecute::ResExecute(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  diff_keys_values_(arena),
  receipts_(arena),
  logs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zkprover.ResExecute)
}
ResExecute::ResExecute(const ResExecute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      receipts_(from.receipts_),
      logs_(from.logs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  diff_keys_values_.MergeFrom(from.diff_keys_values_);
  new_state_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_new_state_root().empty()) {
    new_state_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_new_state_root(),
      GetArena());
  }
  if (from._internal_has_counters()) {
    counters_ = new ::zkprover::ZkCounters(*from.counters_);
  } else {
    counters_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zkprover.ResExecute)
}

void ResExecute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResExecute_zk_2dprover_2eproto.base);
  new_state_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  counters_ = nullptr;
}

ResExecute::~ResExecute() {
  // @@protoc_insertion_point(destructor:zkprover.ResExecute)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResExecute::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  new_state_root_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete counters_;
}

void ResExecute::ArenaDtor(void* object) {
  ResExecute* _this = reinterpret_cast< ResExecute* >(object);
  (void)_this;
}
void ResExecute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResExecute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResExecute& ResExecute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResExecute_zk_2dprover_2eproto.base);
  return *internal_default_instance();
}


void ResExecute::Clear() {
// @@protoc_insertion_point(message_clear_start:zkprover.ResExecute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  diff_keys_values_.Clear();
  receipts_.Clear();
  logs_.Clear();
  new_state_root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && counters_ != nullptr) {
    delete counters_;
  }
  counters_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResExecute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, string> diff_keys_values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&diff_keys_values_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string new_state_root = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_new_state_root();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zkprover.ResExecute.new_state_root"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zkprover.ZkCounters counters = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_counters(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string receipts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_receipts();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zkprover.ResExecute.receipts"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string logs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_logs();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zkprover.ResExecute.logs"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResExecute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zkprover.ResExecute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> diff_keys_values = 1;
  if (!this->_internal_diff_keys_values().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "zkprover.ResExecute.DiffKeysValuesEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "zkprover.ResExecute.DiffKeysValuesEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_diff_keys_values().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_diff_keys_values().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_diff_keys_values().begin();
          it != this->_internal_diff_keys_values().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ResExecute_DiffKeysValuesEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_diff_keys_values().begin();
          it != this->_internal_diff_keys_values().end(); ++it) {
        target = ResExecute_DiffKeysValuesEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // string new_state_root = 2;
  if (this->new_state_root().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_new_state_root().data(), static_cast<int>(this->_internal_new_state_root().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zkprover.ResExecute.new_state_root");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_new_state_root(), target);
  }

  // .zkprover.ZkCounters counters = 3;
  if (this->has_counters()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::counters(this), target, stream);
  }

  // repeated string receipts = 4;
  for (int i = 0, n = this->_internal_receipts_size(); i < n; i++) {
    const auto& s = this->_internal_receipts(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zkprover.ResExecute.receipts");
    target = stream->WriteString(4, s, target);
  }

  // repeated string logs = 5;
  for (int i = 0, n = this->_internal_logs_size(); i < n; i++) {
    const auto& s = this->_internal_logs(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zkprover.ResExecute.logs");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zkprover.ResExecute)
  return target;
}

size_t ResExecute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zkprover.ResExecute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> diff_keys_values = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_diff_keys_values_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_diff_keys_values().begin();
      it != this->_internal_diff_keys_values().end(); ++it) {
    total_size += ResExecute_DiffKeysValuesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated string receipts = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(receipts_.size());
  for (int i = 0, n = receipts_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      receipts_.Get(i));
  }

  // repeated string logs = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(logs_.size());
  for (int i = 0, n = logs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      logs_.Get(i));
  }

  // string new_state_root = 2;
  if (this->new_state_root().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_new_state_root());
  }

  // .zkprover.ZkCounters counters = 3;
  if (this->has_counters()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *counters_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResExecute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zkprover.ResExecute)
  GOOGLE_DCHECK_NE(&from, this);
  const ResExecute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResExecute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zkprover.ResExecute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zkprover.ResExecute)
    MergeFrom(*source);
  }
}

void ResExecute::MergeFrom(const ResExecute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zkprover.ResExecute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  diff_keys_values_.MergeFrom(from.diff_keys_values_);
  receipts_.MergeFrom(from.receipts_);
  logs_.MergeFrom(from.logs_);
  if (from.new_state_root().size() > 0) {
    _internal_set_new_state_root(from._internal_new_state_root());
  }
  if (from.has_counters()) {
    _internal_mutable_counters()->::zkprover::ZkCounters::MergeFrom(from._internal_counters());
  }
}

void ResExecute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zkprover.ResExecute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResExecute::CopyFrom(const ResExecute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zkprover.ResExecute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResExecute::IsInitialized() const {
  return true;
}

void ResExecute::InternalSwap(ResExecute* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  diff_keys_values_.Swap(&other->diff_keys_values_);
  receipts_.InternalSwap(&other->receipts_);
  logs_.InternalSwap(&other->logs_);
  new_state_root_.Swap(&other->new_state_root_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(counters_, other->counters_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResExecute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ZkCounters::InitAsDefaultInstance() {
}
class ZkCounters::_Internal {
 public:
};

ZkCounters::ZkCounters(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zkprover.ZkCounters)
}
ZkCounters::ZkCounters(const ZkCounters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ecrecover_, &from.ecrecover_,
    static_cast<size_t>(reinterpret_cast<char*>(&arith_) -
    reinterpret_cast<char*>(&ecrecover_)) + sizeof(arith_));
  // @@protoc_insertion_point(copy_constructor:zkprover.ZkCounters)
}

void ZkCounters::SharedCtor() {
  ::memset(&ecrecover_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&arith_) -
      reinterpret_cast<char*>(&ecrecover_)) + sizeof(arith_));
}

ZkCounters::~ZkCounters() {
  // @@protoc_insertion_point(destructor:zkprover.ZkCounters)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ZkCounters::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ZkCounters::ArenaDtor(void* object) {
  ZkCounters* _this = reinterpret_cast< ZkCounters* >(object);
  (void)_this;
}
void ZkCounters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ZkCounters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ZkCounters& ZkCounters::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ZkCounters_zk_2dprover_2eproto.base);
  return *internal_default_instance();
}


void ZkCounters::Clear() {
// @@protoc_insertion_point(message_clear_start:zkprover.ZkCounters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ecrecover_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&arith_) -
      reinterpret_cast<char*>(&ecrecover_)) + sizeof(arith_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ZkCounters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 ecrecover = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ecrecover_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 hash_poseidon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          hash_poseidon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 hash_keccak = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          hash_keccak_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 arith = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          arith_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ZkCounters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zkprover.ZkCounters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ecrecover = 1;
  if (this->ecrecover() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ecrecover(), target);
  }

  // uint32 hash_poseidon = 2;
  if (this->hash_poseidon() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hash_poseidon(), target);
  }

  // uint32 hash_keccak = 3;
  if (this->hash_keccak() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_hash_keccak(), target);
  }

  // uint32 arith = 4;
  if (this->arith() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_arith(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zkprover.ZkCounters)
  return target;
}

size_t ZkCounters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zkprover.ZkCounters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 ecrecover = 1;
  if (this->ecrecover() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ecrecover());
  }

  // uint32 hash_poseidon = 2;
  if (this->hash_poseidon() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hash_poseidon());
  }

  // uint32 hash_keccak = 3;
  if (this->hash_keccak() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hash_keccak());
  }

  // uint32 arith = 4;
  if (this->arith() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_arith());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ZkCounters::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zkprover.ZkCounters)
  GOOGLE_DCHECK_NE(&from, this);
  const ZkCounters* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ZkCounters>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zkprover.ZkCounters)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zkprover.ZkCounters)
    MergeFrom(*source);
  }
}

void ZkCounters::MergeFrom(const ZkCounters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zkprover.ZkCounters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ecrecover() != 0) {
    _internal_set_ecrecover(from._internal_ecrecover());
  }
  if (from.hash_poseidon() != 0) {
    _internal_set_hash_poseidon(from._internal_hash_poseidon());
  }
  if (from.hash_keccak() != 0) {
    _internal_set_hash_keccak(from._internal_hash_keccak());
  }
  if (from.arith() != 0) {
    _internal_set_arith(from._internal_arith());
  }
}

void ZkCounters::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zkprover.ZkCounters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZkCounters::CopyFrom(const ZkCounters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zkprover.ZkCounters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZkCounters::IsInitialized() const {
  return true;
}

void ZkCounters::InternalSwap(ZkCounters* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ZkCounters, arith_)
      + sizeof(ZkCounters::arith_)
      - PROTOBUF_FIELD_OFFSET(ZkCounters, ecrecover_)>(
          reinterpret_cast<char*>(&ecrecover_),
          reinterpret_cast<char*>(&other->ecrecover_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ZkCounters::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PublicInputs::InitAsDefaultInstance() {
}
class PublicInputs::_Internal {
 public:
};

PublicInputs::PublicInputs(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zkprover.PublicInputs)
}
PublicInputs::PublicInputs(const PublicInputs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  old_state_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_old_state_root().empty()) {
    old_state_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_old_state_root(),
      GetArena());
  }
  old_local_exit_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_old_local_exit_root().empty()) {
    old_local_exit_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_old_local_exit_root(),
      GetArena());
  }
  new_state_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_new_state_root().empty()) {
    new_state_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_new_state_root(),
      GetArena());
  }
  new_local_exit_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_new_local_exit_root().empty()) {
    new_local_exit_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_new_local_exit_root(),
      GetArena());
  }
  sequencer_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sequencer_addr().empty()) {
    sequencer_addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sequencer_addr(),
      GetArena());
  }
  batch_hash_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_batch_hash_data().empty()) {
    batch_hash_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_batch_hash_data(),
      GetArena());
  }
  ::memcpy(&chain_id_, &from.chain_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&block_num_) -
    reinterpret_cast<char*>(&chain_id_)) + sizeof(block_num_));
  // @@protoc_insertion_point(copy_constructor:zkprover.PublicInputs)
}

void PublicInputs::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PublicInputs_zk_2dprover_2eproto.base);
  old_state_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  old_local_exit_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_state_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_local_exit_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sequencer_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  batch_hash_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&chain_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&block_num_) -
      reinterpret_cast<char*>(&chain_id_)) + sizeof(block_num_));
}

PublicInputs::~PublicInputs() {
  // @@protoc_insertion_point(destructor:zkprover.PublicInputs)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PublicInputs::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  old_state_root_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  old_local_exit_root_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_state_root_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_local_exit_root_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sequencer_addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  batch_hash_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PublicInputs::ArenaDtor(void* object) {
  PublicInputs* _this = reinterpret_cast< PublicInputs* >(object);
  (void)_this;
}
void PublicInputs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublicInputs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PublicInputs& PublicInputs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PublicInputs_zk_2dprover_2eproto.base);
  return *internal_default_instance();
}


void PublicInputs::Clear() {
// @@protoc_insertion_point(message_clear_start:zkprover.PublicInputs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  old_state_root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  old_local_exit_root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  new_state_root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  new_local_exit_root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sequencer_addr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  batch_hash_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&chain_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&block_num_) -
      reinterpret_cast<char*>(&chain_id_)) + sizeof(block_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublicInputs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string old_state_root = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_old_state_root();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zkprover.PublicInputs.old_state_root"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string old_local_exit_root = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_old_local_exit_root();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zkprover.PublicInputs.old_local_exit_root"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string new_state_root = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_new_state_root();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zkprover.PublicInputs.new_state_root"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string new_local_exit_root = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_new_local_exit_root();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zkprover.PublicInputs.new_local_exit_root"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sequencer_addr = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_sequencer_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zkprover.PublicInputs.sequencer_addr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string batch_hash_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_batch_hash_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zkprover.PublicInputs.batch_hash_data"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 chain_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          chain_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 batch_num = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          batch_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 block_num = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          block_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 eth_timestamp = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          eth_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PublicInputs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zkprover.PublicInputs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string old_state_root = 1;
  if (this->old_state_root().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_old_state_root().data(), static_cast<int>(this->_internal_old_state_root().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zkprover.PublicInputs.old_state_root");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_old_state_root(), target);
  }

  // string old_local_exit_root = 2;
  if (this->old_local_exit_root().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_old_local_exit_root().data(), static_cast<int>(this->_internal_old_local_exit_root().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zkprover.PublicInputs.old_local_exit_root");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_old_local_exit_root(), target);
  }

  // string new_state_root = 3;
  if (this->new_state_root().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_new_state_root().data(), static_cast<int>(this->_internal_new_state_root().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zkprover.PublicInputs.new_state_root");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_new_state_root(), target);
  }

  // string new_local_exit_root = 4;
  if (this->new_local_exit_root().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_new_local_exit_root().data(), static_cast<int>(this->_internal_new_local_exit_root().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zkprover.PublicInputs.new_local_exit_root");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_new_local_exit_root(), target);
  }

  // string sequencer_addr = 5;
  if (this->sequencer_addr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sequencer_addr().data(), static_cast<int>(this->_internal_sequencer_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zkprover.PublicInputs.sequencer_addr");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_sequencer_addr(), target);
  }

  // string batch_hash_data = 6;
  if (this->batch_hash_data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_batch_hash_data().data(), static_cast<int>(this->_internal_batch_hash_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zkprover.PublicInputs.batch_hash_data");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_batch_hash_data(), target);
  }

  // uint32 chain_id = 7;
  if (this->chain_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_chain_id(), target);
  }

  // uint32 batch_num = 8;
  if (this->batch_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_batch_num(), target);
  }

  // uint32 block_num = 9;
  if (this->block_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_block_num(), target);
  }

  // uint64 eth_timestamp = 10;
  if (this->eth_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_eth_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zkprover.PublicInputs)
  return target;
}

size_t PublicInputs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zkprover.PublicInputs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string old_state_root = 1;
  if (this->old_state_root().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_old_state_root());
  }

  // string old_local_exit_root = 2;
  if (this->old_local_exit_root().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_old_local_exit_root());
  }

  // string new_state_root = 3;
  if (this->new_state_root().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_new_state_root());
  }

  // string new_local_exit_root = 4;
  if (this->new_local_exit_root().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_new_local_exit_root());
  }

  // string sequencer_addr = 5;
  if (this->sequencer_addr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sequencer_addr());
  }

  // string batch_hash_data = 6;
  if (this->batch_hash_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_batch_hash_data());
  }

  // uint32 chain_id = 7;
  if (this->chain_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_chain_id());
  }

  // uint32 batch_num = 8;
  if (this->batch_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_batch_num());
  }

  // uint64 eth_timestamp = 10;
  if (this->eth_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_eth_timestamp());
  }

  // uint32 block_num = 9;
  if (this->block_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_block_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublicInputs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zkprover.PublicInputs)
  GOOGLE_DCHECK_NE(&from, this);
  const PublicInputs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PublicInputs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zkprover.PublicInputs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zkprover.PublicInputs)
    MergeFrom(*source);
  }
}

void PublicInputs::MergeFrom(const PublicInputs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zkprover.PublicInputs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.old_state_root().size() > 0) {
    _internal_set_old_state_root(from._internal_old_state_root());
  }
  if (from.old_local_exit_root().size() > 0) {
    _internal_set_old_local_exit_root(from._internal_old_local_exit_root());
  }
  if (from.new_state_root().size() > 0) {
    _internal_set_new_state_root(from._internal_new_state_root());
  }
  if (from.new_local_exit_root().size() > 0) {
    _internal_set_new_local_exit_root(from._internal_new_local_exit_root());
  }
  if (from.sequencer_addr().size() > 0) {
    _internal_set_sequencer_addr(from._internal_sequencer_addr());
  }
  if (from.batch_hash_data().size() > 0) {
    _internal_set_batch_hash_data(from._internal_batch_hash_data());
  }
  if (from.chain_id() != 0) {
    _internal_set_chain_id(from._internal_chain_id());
  }
  if (from.batch_num() != 0) {
    _internal_set_batch_num(from._internal_batch_num());
  }
  if (from.eth_timestamp() != 0) {
    _internal_set_eth_timestamp(from._internal_eth_timestamp());
  }
  if (from.block_num() != 0) {
    _internal_set_block_num(from._internal_block_num());
  }
}

void PublicInputs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zkprover.PublicInputs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublicInputs::CopyFrom(const PublicInputs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zkprover.PublicInputs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublicInputs::IsInitialized() const {
  return true;
}

void PublicInputs::InternalSwap(PublicInputs* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  old_state_root_.Swap(&other->old_state_root_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  old_local_exit_root_.Swap(&other->old_local_exit_root_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  new_state_root_.Swap(&other->new_state_root_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  new_local_exit_root_.Swap(&other->new_local_exit_root_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sequencer_addr_.Swap(&other->sequencer_addr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  batch_hash_data_.Swap(&other->batch_hash_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PublicInputs, block_num_)
      + sizeof(PublicInputs::block_num_)
      - PROTOBUF_FIELD_OFFSET(PublicInputs, chain_id_)>(
          reinterpret_cast<char*>(&chain_id_),
          reinterpret_cast<char*>(&other->chain_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PublicInputs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProofB::InitAsDefaultInstance() {
}
class ProofB::_Internal {
 public:
};

ProofB::ProofB(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  proofs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zkprover.ProofB)
}
ProofB::ProofB(const ProofB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      proofs_(from.proofs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zkprover.ProofB)
}

void ProofB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProofB_zk_2dprover_2eproto.base);
}

ProofB::~ProofB() {
  // @@protoc_insertion_point(destructor:zkprover.ProofB)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProofB::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ProofB::ArenaDtor(void* object) {
  ProofB* _this = reinterpret_cast< ProofB* >(object);
  (void)_this;
}
void ProofB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProofB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProofB& ProofB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProofB_zk_2dprover_2eproto.base);
  return *internal_default_instance();
}


void ProofB::Clear() {
// @@protoc_insertion_point(message_clear_start:zkprover.ProofB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  proofs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProofB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string proofs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_proofs();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zkprover.ProofB.proofs"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProofB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zkprover.ProofB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string proofs = 1;
  for (int i = 0, n = this->_internal_proofs_size(); i < n; i++) {
    const auto& s = this->_internal_proofs(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zkprover.ProofB.proofs");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zkprover.ProofB)
  return target;
}

size_t ProofB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zkprover.ProofB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string proofs = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(proofs_.size());
  for (int i = 0, n = proofs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      proofs_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProofB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zkprover.ProofB)
  GOOGLE_DCHECK_NE(&from, this);
  const ProofB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProofB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zkprover.ProofB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zkprover.ProofB)
    MergeFrom(*source);
  }
}

void ProofB::MergeFrom(const ProofB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zkprover.ProofB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  proofs_.MergeFrom(from.proofs_);
}

void ProofB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zkprover.ProofB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProofB::CopyFrom(const ProofB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zkprover.ProofB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProofB::IsInitialized() const {
  return true;
}

void ProofB::InternalSwap(ProofB* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  proofs_.InternalSwap(&other->proofs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProofB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Proof::InitAsDefaultInstance() {
}
class Proof::_Internal {
 public:
};

Proof::Proof(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  proofa_(arena),
  proofb_(arena),
  proofc_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zkprover.Proof)
}
Proof::Proof(const Proof& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      proofa_(from.proofa_),
      proofb_(from.proofb_),
      proofc_(from.proofc_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zkprover.Proof)
}

void Proof::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Proof_zk_2dprover_2eproto.base);
}

Proof::~Proof() {
  // @@protoc_insertion_point(destructor:zkprover.Proof)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Proof::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Proof::ArenaDtor(void* object) {
  Proof* _this = reinterpret_cast< Proof* >(object);
  (void)_this;
}
void Proof::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Proof::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Proof& Proof::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Proof_zk_2dprover_2eproto.base);
  return *internal_default_instance();
}


void Proof::Clear() {
// @@protoc_insertion_point(message_clear_start:zkprover.Proof)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  proofa_.Clear();
  proofb_.Clear();
  proofc_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Proof::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string proofA = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_proofa();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zkprover.Proof.proofA"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .zkprover.ProofB proofB = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_proofb(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string proofC = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_proofc();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zkprover.Proof.proofC"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Proof::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zkprover.Proof)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string proofA = 1;
  for (int i = 0, n = this->_internal_proofa_size(); i < n; i++) {
    const auto& s = this->_internal_proofa(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zkprover.Proof.proofA");
    target = stream->WriteString(1, s, target);
  }

  // repeated .zkprover.ProofB proofB = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_proofb_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_proofb(i), target, stream);
  }

  // repeated string proofC = 3;
  for (int i = 0, n = this->_internal_proofc_size(); i < n; i++) {
    const auto& s = this->_internal_proofc(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zkprover.Proof.proofC");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zkprover.Proof)
  return target;
}

size_t Proof::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zkprover.Proof)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string proofA = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(proofa_.size());
  for (int i = 0, n = proofa_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      proofa_.Get(i));
  }

  // repeated .zkprover.ProofB proofB = 2;
  total_size += 1UL * this->_internal_proofb_size();
  for (const auto& msg : this->proofb_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string proofC = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(proofc_.size());
  for (int i = 0, n = proofc_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      proofc_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Proof::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zkprover.Proof)
  GOOGLE_DCHECK_NE(&from, this);
  const Proof* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Proof>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zkprover.Proof)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zkprover.Proof)
    MergeFrom(*source);
  }
}

void Proof::MergeFrom(const Proof& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zkprover.Proof)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  proofa_.MergeFrom(from.proofa_);
  proofb_.MergeFrom(from.proofb_);
  proofc_.MergeFrom(from.proofc_);
}

void Proof::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zkprover.Proof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proof::CopyFrom(const Proof& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zkprover.Proof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proof::IsInitialized() const {
  return true;
}

void Proof::InternalSwap(Proof* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  proofa_.InternalSwap(&other->proofa_);
  proofb_.InternalSwap(&other->proofb_);
  proofc_.InternalSwap(&other->proofc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Proof::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

InputProver_DbEntry_DoNotUse::InputProver_DbEntry_DoNotUse() {}
InputProver_DbEntry_DoNotUse::InputProver_DbEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void InputProver_DbEntry_DoNotUse::MergeFrom(const InputProver_DbEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata InputProver_DbEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void InputProver_DbEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void InputProver::InitAsDefaultInstance() {
  ::zkprover::_InputProver_default_instance_._instance.get_mutable()->public_inputs_ = const_cast< ::zkprover::PublicInputs*>(
      ::zkprover::PublicInputs::internal_default_instance());
}
class InputProver::_Internal {
 public:
  static const ::zkprover::PublicInputs& public_inputs(const InputProver* msg);
};

const ::zkprover::PublicInputs&
InputProver::_Internal::public_inputs(const InputProver* msg) {
  return *msg->public_inputs_;
}
InputProver::InputProver(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  txs_(arena),
  db_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zkprover.InputProver)
}
InputProver::InputProver(const InputProver& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      txs_(from.txs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  db_.MergeFrom(from.db_);
  global_exit_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_global_exit_root().empty()) {
    global_exit_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_global_exit_root(),
      GetArena());
  }
  if (from._internal_has_public_inputs()) {
    public_inputs_ = new ::zkprover::PublicInputs(*from.public_inputs_);
  } else {
    public_inputs_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zkprover.InputProver)
}

void InputProver::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InputProver_zk_2dprover_2eproto.base);
  global_exit_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_inputs_ = nullptr;
}

InputProver::~InputProver() {
  // @@protoc_insertion_point(destructor:zkprover.InputProver)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InputProver::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  global_exit_root_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete public_inputs_;
}

void InputProver::ArenaDtor(void* object) {
  InputProver* _this = reinterpret_cast< InputProver* >(object);
  (void)_this;
}
void InputProver::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InputProver::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InputProver& InputProver::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InputProver_zk_2dprover_2eproto.base);
  return *internal_default_instance();
}


void InputProver::Clear() {
// @@protoc_insertion_point(message_clear_start:zkprover.InputProver)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  txs_.Clear();
  db_.Clear();
  global_exit_root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && public_inputs_ != nullptr) {
    delete public_inputs_;
  }
  public_inputs_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InputProver::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zkprover.PublicInputs public_inputs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_public_inputs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string global_exit_root = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_global_exit_root();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zkprover.InputProver.global_exit_root"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string txs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_txs();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zkprover.InputProver.txs"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, string> db = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&db_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InputProver::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zkprover.InputProver)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zkprover.PublicInputs public_inputs = 1;
  if (this->has_public_inputs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::public_inputs(this), target, stream);
  }

  // string global_exit_root = 2;
  if (this->global_exit_root().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_global_exit_root().data(), static_cast<int>(this->_internal_global_exit_root().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zkprover.InputProver.global_exit_root");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_global_exit_root(), target);
  }

  // repeated string txs = 3;
  for (int i = 0, n = this->_internal_txs_size(); i < n; i++) {
    const auto& s = this->_internal_txs(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zkprover.InputProver.txs");
    target = stream->WriteString(3, s, target);
  }

  // map<string, string> db = 4;
  if (!this->_internal_db().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "zkprover.InputProver.DbEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "zkprover.InputProver.DbEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_db().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_db().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_db().begin();
          it != this->_internal_db().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = InputProver_DbEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_db().begin();
          it != this->_internal_db().end(); ++it) {
        target = InputProver_DbEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zkprover.InputProver)
  return target;
}

size_t InputProver::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zkprover.InputProver)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string txs = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(txs_.size());
  for (int i = 0, n = txs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      txs_.Get(i));
  }

  // map<string, string> db = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_db_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_db().begin();
      it != this->_internal_db().end(); ++it) {
    total_size += InputProver_DbEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string global_exit_root = 2;
  if (this->global_exit_root().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_global_exit_root());
  }

  // .zkprover.PublicInputs public_inputs = 1;
  if (this->has_public_inputs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *public_inputs_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InputProver::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zkprover.InputProver)
  GOOGLE_DCHECK_NE(&from, this);
  const InputProver* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InputProver>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zkprover.InputProver)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zkprover.InputProver)
    MergeFrom(*source);
  }
}

void InputProver::MergeFrom(const InputProver& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zkprover.InputProver)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  txs_.MergeFrom(from.txs_);
  db_.MergeFrom(from.db_);
  if (from.global_exit_root().size() > 0) {
    _internal_set_global_exit_root(from._internal_global_exit_root());
  }
  if (from.has_public_inputs()) {
    _internal_mutable_public_inputs()->::zkprover::PublicInputs::MergeFrom(from._internal_public_inputs());
  }
}

void InputProver::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zkprover.InputProver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputProver::CopyFrom(const InputProver& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zkprover.InputProver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputProver::IsInitialized() const {
  return true;
}

void InputProver::InternalSwap(InputProver* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  txs_.InternalSwap(&other->txs_);
  db_.Swap(&other->db_);
  global_exit_root_.Swap(&other->global_exit_root_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(public_inputs_, other->public_inputs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InputProver::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InputProverExecute::InitAsDefaultInstance() {
  ::zkprover::_InputProverExecute_default_instance_._instance.get_mutable()->public_inputs_ = const_cast< ::zkprover::PublicInputs*>(
      ::zkprover::PublicInputs::internal_default_instance());
}
class InputProverExecute::_Internal {
 public:
  static const ::zkprover::PublicInputs& public_inputs(const InputProverExecute* msg);
};

const ::zkprover::PublicInputs&
InputProverExecute::_Internal::public_inputs(const InputProverExecute* msg) {
  return *msg->public_inputs_;
}
InputProverExecute::InputProverExecute(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  txs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zkprover.InputProverExecute)
}
InputProverExecute::InputProverExecute(const InputProverExecute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      txs_(from.txs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  global_exit_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_global_exit_root().empty()) {
    global_exit_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_global_exit_root(),
      GetArena());
  }
  if (from._internal_has_public_inputs()) {
    public_inputs_ = new ::zkprover::PublicInputs(*from.public_inputs_);
  } else {
    public_inputs_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zkprover.InputProverExecute)
}

void InputProverExecute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InputProverExecute_zk_2dprover_2eproto.base);
  global_exit_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_inputs_ = nullptr;
}

InputProverExecute::~InputProverExecute() {
  // @@protoc_insertion_point(destructor:zkprover.InputProverExecute)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InputProverExecute::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  global_exit_root_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete public_inputs_;
}

void InputProverExecute::ArenaDtor(void* object) {
  InputProverExecute* _this = reinterpret_cast< InputProverExecute* >(object);
  (void)_this;
}
void InputProverExecute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InputProverExecute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InputProverExecute& InputProverExecute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InputProverExecute_zk_2dprover_2eproto.base);
  return *internal_default_instance();
}


void InputProverExecute::Clear() {
// @@protoc_insertion_point(message_clear_start:zkprover.InputProverExecute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  txs_.Clear();
  global_exit_root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && public_inputs_ != nullptr) {
    delete public_inputs_;
  }
  public_inputs_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InputProverExecute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zkprover.PublicInputs public_inputs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_public_inputs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string global_exit_root = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_global_exit_root();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zkprover.InputProverExecute.global_exit_root"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string txs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_txs();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zkprover.InputProverExecute.txs"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InputProverExecute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zkprover.InputProverExecute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zkprover.PublicInputs public_inputs = 1;
  if (this->has_public_inputs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::public_inputs(this), target, stream);
  }

  // string global_exit_root = 2;
  if (this->global_exit_root().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_global_exit_root().data(), static_cast<int>(this->_internal_global_exit_root().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zkprover.InputProverExecute.global_exit_root");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_global_exit_root(), target);
  }

  // repeated string txs = 3;
  for (int i = 0, n = this->_internal_txs_size(); i < n; i++) {
    const auto& s = this->_internal_txs(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zkprover.InputProverExecute.txs");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zkprover.InputProverExecute)
  return target;
}

size_t InputProverExecute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zkprover.InputProverExecute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string txs = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(txs_.size());
  for (int i = 0, n = txs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      txs_.Get(i));
  }

  // string global_exit_root = 2;
  if (this->global_exit_root().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_global_exit_root());
  }

  // .zkprover.PublicInputs public_inputs = 1;
  if (this->has_public_inputs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *public_inputs_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InputProverExecute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zkprover.InputProverExecute)
  GOOGLE_DCHECK_NE(&from, this);
  const InputProverExecute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InputProverExecute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zkprover.InputProverExecute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zkprover.InputProverExecute)
    MergeFrom(*source);
  }
}

void InputProverExecute::MergeFrom(const InputProverExecute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zkprover.InputProverExecute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  txs_.MergeFrom(from.txs_);
  if (from.global_exit_root().size() > 0) {
    _internal_set_global_exit_root(from._internal_global_exit_root());
  }
  if (from.has_public_inputs()) {
    _internal_mutable_public_inputs()->::zkprover::PublicInputs::MergeFrom(from._internal_public_inputs());
  }
}

void InputProverExecute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zkprover.InputProverExecute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputProverExecute::CopyFrom(const InputProverExecute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zkprover.InputProverExecute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputProverExecute::IsInitialized() const {
  return true;
}

void InputProverExecute::InternalSwap(InputProverExecute* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  txs_.InternalSwap(&other->txs_);
  global_exit_root_.Swap(&other->global_exit_root_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(public_inputs_, other->public_inputs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InputProverExecute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PublicInputsExtended::InitAsDefaultInstance() {
  ::zkprover::_PublicInputsExtended_default_instance_._instance.get_mutable()->public_inputs_ = const_cast< ::zkprover::PublicInputs*>(
      ::zkprover::PublicInputs::internal_default_instance());
}
class PublicInputsExtended::_Internal {
 public:
  static const ::zkprover::PublicInputs& public_inputs(const PublicInputsExtended* msg);
};

const ::zkprover::PublicInputs&
PublicInputsExtended::_Internal::public_inputs(const PublicInputsExtended* msg) {
  return *msg->public_inputs_;
}
PublicInputsExtended::PublicInputsExtended(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zkprover.PublicInputsExtended)
}
PublicInputsExtended::PublicInputsExtended(const PublicInputsExtended& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  input_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_input_hash().empty()) {
    input_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_input_hash(),
      GetArena());
  }
  if (from._internal_has_public_inputs()) {
    public_inputs_ = new ::zkprover::PublicInputs(*from.public_inputs_);
  } else {
    public_inputs_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zkprover.PublicInputsExtended)
}

void PublicInputsExtended::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PublicInputsExtended_zk_2dprover_2eproto.base);
  input_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_inputs_ = nullptr;
}

PublicInputsExtended::~PublicInputsExtended() {
  // @@protoc_insertion_point(destructor:zkprover.PublicInputsExtended)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PublicInputsExtended::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  input_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete public_inputs_;
}

void PublicInputsExtended::ArenaDtor(void* object) {
  PublicInputsExtended* _this = reinterpret_cast< PublicInputsExtended* >(object);
  (void)_this;
}
void PublicInputsExtended::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublicInputsExtended::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PublicInputsExtended& PublicInputsExtended::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PublicInputsExtended_zk_2dprover_2eproto.base);
  return *internal_default_instance();
}


void PublicInputsExtended::Clear() {
// @@protoc_insertion_point(message_clear_start:zkprover.PublicInputsExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && public_inputs_ != nullptr) {
    delete public_inputs_;
  }
  public_inputs_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublicInputsExtended::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zkprover.PublicInputs public_inputs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_public_inputs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string input_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_input_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zkprover.PublicInputsExtended.input_hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PublicInputsExtended::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zkprover.PublicInputsExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zkprover.PublicInputs public_inputs = 1;
  if (this->has_public_inputs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::public_inputs(this), target, stream);
  }

  // string input_hash = 2;
  if (this->input_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_input_hash().data(), static_cast<int>(this->_internal_input_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zkprover.PublicInputsExtended.input_hash");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_input_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zkprover.PublicInputsExtended)
  return target;
}

size_t PublicInputsExtended::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zkprover.PublicInputsExtended)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string input_hash = 2;
  if (this->input_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_input_hash());
  }

  // .zkprover.PublicInputs public_inputs = 1;
  if (this->has_public_inputs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *public_inputs_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublicInputsExtended::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zkprover.PublicInputsExtended)
  GOOGLE_DCHECK_NE(&from, this);
  const PublicInputsExtended* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PublicInputsExtended>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zkprover.PublicInputsExtended)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zkprover.PublicInputsExtended)
    MergeFrom(*source);
  }
}

void PublicInputsExtended::MergeFrom(const PublicInputsExtended& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zkprover.PublicInputsExtended)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.input_hash().size() > 0) {
    _internal_set_input_hash(from._internal_input_hash());
  }
  if (from.has_public_inputs()) {
    _internal_mutable_public_inputs()->::zkprover::PublicInputs::MergeFrom(from._internal_public_inputs());
  }
}

void PublicInputsExtended::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zkprover.PublicInputsExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublicInputsExtended::CopyFrom(const PublicInputsExtended& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zkprover.PublicInputsExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublicInputsExtended::IsInitialized() const {
  return true;
}

void PublicInputsExtended::InternalSwap(PublicInputsExtended* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  input_hash_.Swap(&other->input_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(public_inputs_, other->public_inputs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PublicInputsExtended::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace zkprover
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zkprover::Version* Arena::CreateMaybeMessage< ::zkprover::Version >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zkprover::Version >(arena);
}
template<> PROTOBUF_NOINLINE ::zkprover::NoParams* Arena::CreateMaybeMessage< ::zkprover::NoParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zkprover::NoParams >(arena);
}
template<> PROTOBUF_NOINLINE ::zkprover::RequestId* Arena::CreateMaybeMessage< ::zkprover::RequestId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zkprover::RequestId >(arena);
}
template<> PROTOBUF_NOINLINE ::zkprover::ResGetStatus* Arena::CreateMaybeMessage< ::zkprover::ResGetStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zkprover::ResGetStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::zkprover::ResGenProof* Arena::CreateMaybeMessage< ::zkprover::ResGenProof >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zkprover::ResGenProof >(arena);
}
template<> PROTOBUF_NOINLINE ::zkprover::ResCancel* Arena::CreateMaybeMessage< ::zkprover::ResCancel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zkprover::ResCancel >(arena);
}
template<> PROTOBUF_NOINLINE ::zkprover::ResGetProof* Arena::CreateMaybeMessage< ::zkprover::ResGetProof >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zkprover::ResGetProof >(arena);
}
template<> PROTOBUF_NOINLINE ::zkprover::ResExecute_DiffKeysValuesEntry_DoNotUse* Arena::CreateMaybeMessage< ::zkprover::ResExecute_DiffKeysValuesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zkprover::ResExecute_DiffKeysValuesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::zkprover::ResExecute* Arena::CreateMaybeMessage< ::zkprover::ResExecute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zkprover::ResExecute >(arena);
}
template<> PROTOBUF_NOINLINE ::zkprover::ZkCounters* Arena::CreateMaybeMessage< ::zkprover::ZkCounters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zkprover::ZkCounters >(arena);
}
template<> PROTOBUF_NOINLINE ::zkprover::PublicInputs* Arena::CreateMaybeMessage< ::zkprover::PublicInputs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zkprover::PublicInputs >(arena);
}
template<> PROTOBUF_NOINLINE ::zkprover::ProofB* Arena::CreateMaybeMessage< ::zkprover::ProofB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zkprover::ProofB >(arena);
}
template<> PROTOBUF_NOINLINE ::zkprover::Proof* Arena::CreateMaybeMessage< ::zkprover::Proof >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zkprover::Proof >(arena);
}
template<> PROTOBUF_NOINLINE ::zkprover::InputProver_DbEntry_DoNotUse* Arena::CreateMaybeMessage< ::zkprover::InputProver_DbEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zkprover::InputProver_DbEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::zkprover::InputProver* Arena::CreateMaybeMessage< ::zkprover::InputProver >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zkprover::InputProver >(arena);
}
template<> PROTOBUF_NOINLINE ::zkprover::InputProverExecute* Arena::CreateMaybeMessage< ::zkprover::InputProverExecute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zkprover::InputProverExecute >(arena);
}
template<> PROTOBUF_NOINLINE ::zkprover::PublicInputsExtended* Arena::CreateMaybeMessage< ::zkprover::PublicInputsExtended >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zkprover::PublicInputsExtended >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
