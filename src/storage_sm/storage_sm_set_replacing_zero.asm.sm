Set_ReplacingZero:

    LOAD FREE ${GetRKey()} -> RKEY;    // Load remaining key

    // OldRoot = LeafNodeHash = Hash( 1 | 0 | 0 | 0, Hash( Key, Hash( Value[0-3], Value[4-7] ) ) );
    LOAD FREE ${GetValueLow()} -> VALUE_LOW;
    LOAD VALUE_LOW -> HASH_LEFT;
    LOAD FREE ${GetValueHigh()} -> VALUE_HIGH;
    LOAD VALUE_HIGH -> HASH_RIGHT;
    HASH -> HASH_RIGHT
    LOAD RKEY -> HASH_LEFT
    HASH -> HASH_RIGHT
    LOAD FREE ${GetConstant(1,0,0,0)} -> HASH_LEFT
    HASH -> OLD_ROOT

    // Init LEVEL, and rotate as per key level
    LOAD FREE ${GetConstant(1,0,0,0)} -> LEVEL;
    JMPZ FREE ${GetLevelBit(0)} -> SRZ_LevelBit1; // If level bit 0 is zero, then skip the next 1 rotation
    ROTATE_LEVEL;

SRZ_LevelBit1:

    JMPZ FREE ${GetLevelBit(1)} -> SRZ_SiblingHash; // If level bit 1 is zero, then skip the next 2 rotations
    ROTATE_LEVEL;
    ROTATE_LEVEL;

SRZ_SiblingHash:

    LOAD FREE ${GetNextKeyBit()} -> RKEY_BIT;
    JMPZ RKEY_BIT -> SRZ_SiblingIsRight1; // If next key bit is zero, then sibling is right (sibling's next key bit is 1)
 
SRZ_SiblingIsLeft1:

    // NewRoot = Hash( SiblingHash, OldRoot(LeafNodeHash) )
    LOAD OLD_ROOT -> HASH_RIGHT;
    LOAD FREE ${GetSiblingHash()} -> HASH_LEFT;
    HASH -> NEW_ROOT;

    // OldRoot = Hash ( SiblingHash, 0 )
    LOAD FREE ${GetConstant(0)} -> HASH_RIGHT;
    HASH -> OLD_ROOT;

    // Update remaining key
    CLIMB_RKEY;
    ROTATE_LEVEL;

    goto SRZ_ClimbTree;

SRZ_SiblingIsRight1:

    // NewRoot = Hash( OldRoot(LeafNodeHash), SiblingHash )
    LOAD OLD_ROOT -> HASH_LEFT;
    LOAD FREE ${GetSiblingHash()} -> HASH_RIGHT;
    HASH -> NEW_ROOT;

    // OldRoot = Hash ( 0, SiblingHash )
    LOAD FREE ${GetConstant(0)} -> HASH_LEFT;
    HASH -> OLD_ROOT;

    // Update remaining key
    CLIMB_RKEY;
    ROTATE_LEVEL;

SRZ_ClimbTree:
    JMPZ FREE -> SRZ_Latch; // If (we are at the top of the tree) goto SRZ_Latch

    LOAD FREE ${GetNextKeyBit()} -> RKEY_BIT;
    JMPZ RKEY_BIT -> SRZ_SiblingIsRight2; // If next key bit is zero, then sibling is right (sibling's next key bit is 1)

SRZ_SiblingIsLeft2:

    // NewRoot = Hash ( SiblingHash, NewRoot )
    LOAD NEW_ROOT -> HASH_RIGHT;
    LOAD FREE ${GetSiblingHash()} -> HASH_LEFT;
    HASH -> NEW_ROOT;

    // OldRoot = Hash ( SiblingHash, OldRoot )
    LOAD OLD_ROOT -> HASH_RIGHT;
    HASH -> OLD_ROOT;

    // Update remaining key
    CLIMB_RKEY;
    ROTATE_LEVEL;

    goto SRZ_ClimbTree;

SRZ_SiblingIsRight2:

    // NewRoot = Hash ( NewRoot, SiblingHash )
    LOAD NEW_ROOT -> HASH_LEFT;
    LOAD FREE ${GetSiblingHash()} -> HASH_RIGHT;
    HASH -> NEW_ROOT

    // OldRoot = Hash ( OldRoot, SiblingHash )
    LOAD OLD_ROOT -> HASH_LEFT;
    HASH -> OLD_ROOT;

    // Update remaining key
    CLIMB_RKEY;
    ROTATE_LEVEL;

    goto SRZ_ClimbTree;


SRZ_Latch:
    LATCH;   // At this point consistency is granted: OLD_ROOT, NEW_ROOT, RKEY (complete key), VALUE_LOW, VALUE_HIGH, LEVEL